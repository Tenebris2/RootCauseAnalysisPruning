


Function: _init
----------------------------------------------
7: iVar1 = (*(code *)(undefined *)0x10a0a8)();
	00001014:CALL RAX
END_OF_LINE
----------------------------------------------
8: return iVar1;
	0000101a:RET
END_OF_LINE



Function: FUN_00001020
----------------------------------------------
5: (*(code *)(undefined *)0x0)();
	00001026:JMP qword ptr [0x00008ec8]
END_OF_LINE
----------------------------------------------
6: return;
	00001026:JMP qword ptr [0x00008ec8]
END_OF_LINE



Function: FUN_00001030
----------------------------------------------
5: FUN_00001020();
	00001039:JMP 0x00001020
END_OF_LINE
----------------------------------------------
6: return;
	00001039:JMP 0x00001020
END_OF_LINE



Function: FUN_0000103f
----------------------------------------------
5: FUN_00001020();
	00001049:JMP 0x00001020
END_OF_LINE
----------------------------------------------
6: return;
	00001049:JMP 0x00001020
END_OF_LINE



Function: FUN_0000104f
----------------------------------------------
5: FUN_00001020();
	00001059:JMP 0x00001020
END_OF_LINE
----------------------------------------------
6: return;
	00001059:JMP 0x00001020
END_OF_LINE



Function: FUN_0000105f
----------------------------------------------
5: FUN_00001020();
	00001069:JMP 0x00001020
END_OF_LINE
----------------------------------------------
6: return;
	00001069:JMP 0x00001020
END_OF_LINE



Function: FUN_0000106f
----------------------------------------------
5: FUN_00001020();
	00001079:JMP 0x00001020
END_OF_LINE
----------------------------------------------
6: return;
	00001079:JMP 0x00001020
END_OF_LINE



Function: FUN_0000107f
----------------------------------------------
5: FUN_00001020();
	00001089:JMP 0x00001020
END_OF_LINE
----------------------------------------------
6: return;
	00001089:JMP 0x00001020
END_OF_LINE



Function: FUN_0000108f
----------------------------------------------
5: FUN_00001020();
	00001099:JMP 0x00001020
END_OF_LINE
----------------------------------------------
6: return;
	00001099:JMP 0x00001020
END_OF_LINE



Function: FUN_0000109f
----------------------------------------------
5: FUN_00001020();
	000010a9:JMP 0x00001020
END_OF_LINE
----------------------------------------------
6: return;
	000010a9:JMP 0x00001020
END_OF_LINE



Function: FUN_000010af
----------------------------------------------
5: FUN_00001020();
	000010b9:JMP 0x00001020
END_OF_LINE
----------------------------------------------
6: return;
	000010b9:JMP 0x00001020
END_OF_LINE



Function: FUN_000010bf
----------------------------------------------
5: FUN_00001020();
	000010c9:JMP 0x00001020
END_OF_LINE
----------------------------------------------
6: return;
	000010c9:JMP 0x00001020
END_OF_LINE



Function: FUN_000010cf
----------------------------------------------
5: FUN_00001020();
	000010d9:JMP 0x00001020
END_OF_LINE
----------------------------------------------
6: return;
	000010d9:JMP 0x00001020
END_OF_LINE



Function: FUN_000010df
----------------------------------------------
5: FUN_00001020();
	000010e9:JMP 0x00001020
END_OF_LINE
----------------------------------------------
6: return;
	000010e9:JMP 0x00001020
END_OF_LINE



Function: FUN_000010ef
----------------------------------------------
5: FUN_00001020();
	000010f9:JMP 0x00001020
END_OF_LINE
----------------------------------------------
6: return;
	000010f9:JMP 0x00001020
END_OF_LINE



Function: FUN_000010ff
----------------------------------------------
5: FUN_00001020();
	00001109:JMP 0x00001020
END_OF_LINE
----------------------------------------------
6: return;
	00001109:JMP 0x00001020
END_OF_LINE



Function: FUN_0000110f
----------------------------------------------
5: FUN_00001020();
	00001119:JMP 0x00001020
END_OF_LINE
----------------------------------------------
6: return;
	00001119:JMP 0x00001020
END_OF_LINE



Function: FUN_0000111f
----------------------------------------------
5: FUN_00001020();
	00001129:JMP 0x00001020
END_OF_LINE
----------------------------------------------
6: return;
	00001129:JMP 0x00001020
END_OF_LINE



Function: FUN_0000112f
----------------------------------------------
5: FUN_00001020();
	00001139:JMP 0x00001020
END_OF_LINE
----------------------------------------------
6: return;
	00001139:JMP 0x00001020
END_OF_LINE



Function: FUN_0000113f
----------------------------------------------
5: FUN_00001020();
	00001149:JMP 0x00001020
END_OF_LINE
----------------------------------------------
6: return;
	00001149:JMP 0x00001020
END_OF_LINE



Function: FUN_0000114f
----------------------------------------------
5: FUN_00001020();
	00001159:JMP 0x00001020
END_OF_LINE
----------------------------------------------
6: return;
	00001159:JMP 0x00001020
END_OF_LINE



Function: FUN_0000115f
----------------------------------------------
5: FUN_00001020();
	00001169:JMP 0x00001020
END_OF_LINE
----------------------------------------------
6: return;
	00001169:JMP 0x00001020
END_OF_LINE



Function: FUN_0000116f
----------------------------------------------
5: FUN_00001020();
	00001179:JMP 0x00001020
END_OF_LINE
----------------------------------------------
6: return;
	00001179:JMP 0x00001020
END_OF_LINE



Function: FUN_0000117f
----------------------------------------------
5: FUN_00001020();
	00001189:JMP 0x00001020
END_OF_LINE
----------------------------------------------
6: return;
	00001189:JMP 0x00001020
END_OF_LINE



Function: FUN_0000118f
----------------------------------------------
5: FUN_00001020();
	00001199:JMP 0x00001020
END_OF_LINE
----------------------------------------------
6: return;
	00001199:JMP 0x00001020
END_OF_LINE



Function: FUN_0000119f
----------------------------------------------
5: FUN_00001020();
	000011a9:JMP 0x00001020
END_OF_LINE
----------------------------------------------
6: return;
	000011a9:JMP 0x00001020
END_OF_LINE



Function: FUN_000011af
----------------------------------------------
5: FUN_00001020();
	000011b9:JMP 0x00001020
END_OF_LINE
----------------------------------------------
6: return;
	000011b9:JMP 0x00001020
END_OF_LINE



Function: FUN_000011bf
----------------------------------------------
5: FUN_00001020();
	000011c9:JMP 0x00001020
END_OF_LINE
----------------------------------------------
6: return;
	000011c9:JMP 0x00001020
END_OF_LINE



Function: FUN_000011cf
----------------------------------------------
5: FUN_00001020();
	000011d9:JMP 0x00001020
END_OF_LINE
----------------------------------------------
6: return;
	000011d9:JMP 0x00001020
END_OF_LINE



Function: FUN_000011df
----------------------------------------------
5: FUN_00001020();
	000011e9:JMP 0x00001020
END_OF_LINE
----------------------------------------------
6: return;
	000011e9:JMP 0x00001020
END_OF_LINE



Function: FUN_000011ef
----------------------------------------------
5: FUN_00001020();
	000011f9:JMP 0x00001020
END_OF_LINE
----------------------------------------------
6: return;
	000011f9:JMP 0x00001020
END_OF_LINE



Function: FUN_000011ff
----------------------------------------------
5: FUN_00001020();
	00001209:JMP 0x00001020
END_OF_LINE
----------------------------------------------
6: return;
	00001209:JMP 0x00001020
END_OF_LINE



Function: FUN_0000120f
----------------------------------------------
5: FUN_00001020();
	00001219:JMP 0x00001020
END_OF_LINE
----------------------------------------------
6: return;
	00001219:JMP 0x00001020
END_OF_LINE



Function: FUN_0000121f
----------------------------------------------
5: FUN_00001020();
	00001229:JMP 0x00001020
END_OF_LINE
----------------------------------------------
6: return;
	00001229:JMP 0x00001020
END_OF_LINE



Function: FUN_0000122f
----------------------------------------------
5: FUN_00001020();
	00001239:JMP 0x00001020
END_OF_LINE
----------------------------------------------
6: return;
	00001239:JMP 0x00001020
END_OF_LINE



Function: FUN_0000123f
----------------------------------------------
5: (*(code *)(undefined *)0x10a128)();
	00001244:JMP qword ptr [0x00008ff8]
END_OF_LINE
----------------------------------------------
6: return;
	00001244:JMP qword ptr [0x00008ff8]
END_OF_LINE



Function: FUN_00001240
----------------------------------------------
5: (*(code *)(undefined *)0x10a128)();
	00001244:JMP qword ptr [0x00008ff8]
END_OF_LINE
----------------------------------------------
6: return;
	00001244:JMP qword ptr [0x00008ff8]
END_OF_LINE



Function: free
----------------------------------------------
7: (*(code *)(undefined *)0x10a000)();
	00001254:JMP qword ptr [0x00008ed0]
END_OF_LINE
----------------------------------------------
8: return;
	00001254:JMP qword ptr [0x00008ed0]
END_OF_LINE



Function: strncpy
----------------------------------------------
9: pcVar1 = (char *)(*(code *)(undefined *)0x10a010)();
	00001264:JMP qword ptr [0x00008ed8]
END_OF_LINE
----------------------------------------------
10: return pcVar1;
	00001264:JMP qword ptr [0x00008ed8]
END_OF_LINE



Function: strncmp
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x10a018)();
	00001274:JMP qword ptr [0x00008ee0]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00001274:JMP qword ptr [0x00008ee0]
END_OF_LINE



Function: strcpy
----------------------------------------------
9: pcVar1 = (char *)(*(code *)(undefined *)0x10a028)();
	00001284:JMP qword ptr [0x00008ee8]
END_OF_LINE
----------------------------------------------
10: return pcVar1;
	00001284:JMP qword ptr [0x00008ee8]
END_OF_LINE



Function: puts
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x10a030)();
	00001294:JMP qword ptr [0x00008ef0]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00001294:JMP qword ptr [0x00008ef0]
END_OF_LINE



Function: fread
----------------------------------------------
9: sVar1 = (*(code *)(undefined *)0x10a038)();
	000012a4:JMP qword ptr [0x00008ef8]
END_OF_LINE
----------------------------------------------
10: return sVar1;
	000012a4:JMP qword ptr [0x00008ef8]
END_OF_LINE



Function: vsnprintf
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x10a040)();
	000012b4:JMP qword ptr [0x00008f00]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	000012b4:JMP qword ptr [0x00008f00]
END_OF_LINE



Function: strlen
----------------------------------------------
9: sVar1 = (*(code *)(undefined *)0x10a048)();
	000012c4:JMP qword ptr [0x00008f08]
END_OF_LINE
----------------------------------------------
10: return sVar1;
	000012c4:JMP qword ptr [0x00008f08]
END_OF_LINE



Function: __stack_chk_fail
----------------------------------------------
5: (*(code *)(undefined *)0x10a050)();
	000012d4:JMP qword ptr [0x00008f10]
END_OF_LINE
----------------------------------------------
6: return;
	000012d4:JMP qword ptr [0x00008f10]
END_OF_LINE



Function: mmap
----------------------------------------------
9: pvVar1 = (void *)(*(code *)(undefined *)0x10a058)();
	000012e4:JMP qword ptr [0x00008f18]
END_OF_LINE
----------------------------------------------
10: return pvVar1;
	000012e4:JMP qword ptr [0x00008f18]
END_OF_LINE



Function: strchr
----------------------------------------------
9: pcVar1 = (char *)(*(code *)(undefined *)0x10a060)();
	000012f4:JMP qword ptr [0x00008f20]
END_OF_LINE
----------------------------------------------
10: return pcVar1;
	000012f4:JMP qword ptr [0x00008f20]
END_OF_LINE



Function: snprintf
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x10a068)();
	00001304:JMP qword ptr [0x00008f28]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00001304:JMP qword ptr [0x00008f28]
END_OF_LINE



Function: memset
----------------------------------------------
9: pvVar1 = (void *)(*(code *)(undefined *)0x10a070)();
	00001314:JMP qword ptr [0x00008f30]
END_OF_LINE
----------------------------------------------
10: return pvVar1;
	00001314:JMP qword ptr [0x00008f30]
END_OF_LINE



Function: close
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x10a078)();
	00001324:JMP qword ptr [0x00008f38]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00001324:JMP qword ptr [0x00008f38]
END_OF_LINE



Function: strspn
----------------------------------------------
9: sVar1 = (*(code *)(undefined *)0x10a080)();
	00001334:JMP qword ptr [0x00008f40]
END_OF_LINE
----------------------------------------------
10: return sVar1;
	00001334:JMP qword ptr [0x00008f40]
END_OF_LINE



Function: strcspn
----------------------------------------------
9: sVar1 = (*(code *)(undefined *)0x10a088)();
	00001344:JMP qword ptr [0x00008f48]
END_OF_LINE
----------------------------------------------
10: return sVar1;
	00001344:JMP qword ptr [0x00008f48]
END_OF_LINE



Function: read
----------------------------------------------
9: sVar1 = (*(code *)(undefined *)0x10a090)();
	00001354:JMP qword ptr [0x00008f50]
END_OF_LINE
----------------------------------------------
10: return sVar1;
	00001354:JMP qword ptr [0x00008f50]
END_OF_LINE



Function: strcmp
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x10a098)();
	00001364:JMP qword ptr [0x00008f58]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00001364:JMP qword ptr [0x00008f58]
END_OF_LINE



Function: fprintf
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x10a0a0)();
	00001374:JMP qword ptr [0x00008f60]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00001374:JMP qword ptr [0x00008f60]
END_OF_LINE



Function: strtol
----------------------------------------------
9: lVar1 = (*(code *)(undefined *)0x10a0b0)();
	00001384:JMP qword ptr [0x00008f68]
END_OF_LINE
----------------------------------------------
10: return lVar1;
	00001384:JMP qword ptr [0x00008f68]
END_OF_LINE



Function: memcpy
----------------------------------------------
9: pvVar1 = (void *)(*(code *)(undefined *)0x10a0b8)();
	00001394:JMP qword ptr [0x00008f70]
END_OF_LINE
----------------------------------------------
10: return pvVar1;
	00001394:JMP qword ptr [0x00008f70]
END_OF_LINE



Function: malloc
----------------------------------------------
9: pvVar1 = (void *)(*(code *)(undefined *)0x10a0c0)();
	000013a4:JMP qword ptr [0x00008f78]
END_OF_LINE
----------------------------------------------
10: return pvVar1;
	000013a4:JMP qword ptr [0x00008f78]
END_OF_LINE



Function: realloc
----------------------------------------------
9: pvVar1 = (void *)(*(code *)(undefined *)0x10a0c8)();
	000013b4:JMP qword ptr [0x00008f80]
END_OF_LINE
----------------------------------------------
10: return pvVar1;
	000013b4:JMP qword ptr [0x00008f80]
END_OF_LINE



Function: munmap
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x10a0d0)();
	000013c4:JMP qword ptr [0x00008f88]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	000013c4:JMP qword ptr [0x00008f88]
END_OF_LINE



Function: madvise
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x10a0d8)();
	000013d4:JMP qword ptr [0x00008f90]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	000013d4:JMP qword ptr [0x00008f90]
END_OF_LINE



Function: memmove
----------------------------------------------
9: pvVar1 = (void *)(*(code *)(undefined *)0x10a0e0)();
	000013e4:JMP qword ptr [0x00008f98]
END_OF_LINE
----------------------------------------------
10: return pvVar1;
	000013e4:JMP qword ptr [0x00008f98]
END_OF_LINE



Function: open
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x10a0e8)();
	000013f4:JMP qword ptr [0x00008fa0]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	000013f4:JMP qword ptr [0x00008fa0]
END_OF_LINE



Function: sysconf
----------------------------------------------
9: lVar1 = (*(code *)(undefined *)0x10a0f0)();
	00001404:JMP qword ptr [0x00008fa8]
END_OF_LINE
----------------------------------------------
10: return lVar1;
	00001404:JMP qword ptr [0x00008fa8]
END_OF_LINE



Function: sprintf
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x10a0f8)();
	00001414:JMP qword ptr [0x00008fb0]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00001414:JMP qword ptr [0x00008fb0]
END_OF_LINE



Function: strdup
----------------------------------------------
9: pcVar1 = (char *)(*(code *)(undefined *)0x10a108)();
	00001424:JMP qword ptr [0x00008fb8]
END_OF_LINE
----------------------------------------------
10: return pcVar1;
	00001424:JMP qword ptr [0x00008fb8]
END_OF_LINE



Function: fstat
----------------------------------------------
9: iVar1 = (*(code *)(undefined *)0x10a110)();
	00001434:JMP qword ptr [0x00008fc0]
END_OF_LINE
----------------------------------------------
10: return iVar1;
	00001434:JMP qword ptr [0x00008fc0]
END_OF_LINE



Function: strstr
----------------------------------------------
9: pcVar1 = (char *)(*(code *)(undefined *)0x10a118)();
	00001444:JMP qword ptr [0x00008fc8]
END_OF_LINE
----------------------------------------------
10: return pcVar1;
	00001444:JMP qword ptr [0x00008fc8]
END_OF_LINE



Function: __ctype_b_loc
----------------------------------------------
9: ppuVar1 = (ushort **)(*(code *)(undefined *)0x10a120)();
	00001454:JMP qword ptr [0x00008fd0]
END_OF_LINE
----------------------------------------------
10: return ppuVar1;
	00001454:JMP qword ptr [0x00008fd0]
END_OF_LINE



Function: _start
----------------------------------------------
7: (*(code *)(undefined *)0x10a008)(main,param_2,&stack0x00000008,0,0,param_1,auStack_8);
	00001469:POP RSI
	0000146a:MOV RDX,RSP
	0000146d:AND RSP,-0x10
	00001471:PUSH RAX
	00001472:PUSH RSP
	00001473:XOR R8D,R8D
	00001476:XOR ECX,ECX
	00001478:LEA RDI,[0x6979]
	0000147f:CALL qword ptr [0x00008fd8]
END_OF_LINE
----------------------------------------------
10: } while( true );
	00001485:HLT
END_OF_LINE



Function: deregister_tm_clones
----------------------------------------------
8: return;
	000014b8:RET
END_OF_LINE



Function: register_tm_clones
----------------------------------------------
8: return;
	000014f8:RET
END_OF_LINE



Function: __do_global_dtors_aux
----------------------------------------------
5: if (completed.0 != '\0') {
	00001504:CMP byte ptr [0x00009088],0x0
	0000150b:JNZ 0x00001538
END_OF_LINE
----------------------------------------------
6: return;
	00001538:RET
END_OF_LINE
----------------------------------------------
8: FUN_00001240(__dso_handle);
	00001522:CALL 0x00001240
END_OF_LINE
----------------------------------------------
9: deregister_tm_clones();
	00001527:CALL 0x00001490
END_OF_LINE
----------------------------------------------
10: completed.0 = 1;
	0000152c:MOV byte ptr [0x00009088],0x1
END_OF_LINE
----------------------------------------------
11: return;
	00001534:RET
END_OF_LINE



Function: frame_dummy
----------------------------------------------
5: register_tm_clones();
	00001544:JMP 0x000014c0
END_OF_LINE
----------------------------------------------
6: return;
	00001544:JMP 0x000014c0
END_OF_LINE



Function: ezxml_child
----------------------------------------------
9: if (xml == (ezxml_t.conflict)0x0) {
	0000155d:CMP qword ptr [RBP + -0x8],0x0
	00001562:JZ 0x0000156e
END_OF_LINE
----------------------------------------------
10: xml_local = (ezxml_t.conflict)0x0;
	0000156e:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
13: xml_local = xml->child;
	00001568:MOV RAX,qword ptr [RAX + 0x38]
END_OF_LINE
----------------------------------------------
15: while ((xml_local != (ezxml_t.conflict)0x0 && (iVar1 = strcmp(name,xml_local->name), iVar1 != 0)))
	00001585:CMP qword ptr [RBP + -0x8],0x0
	0000158a:JZ 0x000015a6
	0000158c:MOV RAX,qword ptr [RBP + -0x8]
	00001590:MOV RDX,qword ptr [RAX]
	00001593:MOV RAX,qword ptr [RBP + -0x10]
	00001597:MOV RSI,RDX
	0000159a:MOV RDI,RAX
	0000159d:CALL 0x00001360
	000015a2:TEST EAX,EAX
	000015a4:JNZ 0x00001579
END_OF_LINE
----------------------------------------------
17: xml_local = xml_local->sibling;
	0000157d:MOV RAX,qword ptr [RAX + 0x28]
END_OF_LINE
----------------------------------------------
19: return xml_local;
	000015a6:MOV RAX,qword ptr [RBP + -0x8]
	000015aa:LEAVE
	000015ab:RET
END_OF_LINE



Function: ezxml_idx
----------------------------------------------
8: xml_local = xml;
	000015bb:JMP 0x000015cd
END_OF_LINE
----------------------------------------------
9: for (idx_local = idx; (xml_local != (ezxml_t.conflict)0x0 && (idx_local != 0));
	000015bb:JMP 0x000015cd
	000015bd:MOV RAX,qword ptr [RBP + -0x8]
	000015c1:MOV RAX,qword ptr [RAX + 0x20]
	000015c5:MOV qword ptr [RBP + -0x8],RAX
	000015c9:SUB dword ptr [RBP + -0xc],0x1
	000015cd:CMP qword ptr [RBP + -0x8],0x0
	000015d2:JZ 0x000015da
	000015d4:CMP dword ptr [RBP + -0xc],0x0
	000015d8:JNZ 0x000015bd
END_OF_LINE
----------------------------------------------
10: idx_local = idx_local + -1) {
	000015c9:SUB dword ptr [RBP + -0xc],0x1
END_OF_LINE
----------------------------------------------
11: xml_local = xml_local->next;
	000015c1:MOV RAX,qword ptr [RAX + 0x20]
END_OF_LINE
----------------------------------------------
13: return xml_local;
	000015da:MOV RAX,qword ptr [RBP + -0x8]
	000015de:POP RBP
	000015df:RET
END_OF_LINE



Function: ezxml_attr
----------------------------------------------
13: i = 0;
	000015f4:MOV dword ptr [RBP + -0x10],0x0
END_OF_LINE
----------------------------------------------
14: j = 1;
	000015fb:MOV dword ptr [RBP + -0xc],0x1
END_OF_LINE
----------------------------------------------
15: if ((xml == (ezxml_t.conflict)0x0) || (xml->attr == (char **)0x0)) {
	0000160a:CMP qword ptr [RBP + -0x18],0x0
	0000160f:JZ 0x0000161e
	00001611:MOV RAX,qword ptr [RBP + -0x18]
	00001615:MOV RAX,qword ptr [RAX + 0x8]
	00001619:TEST RAX,RAX
	0000161c:JNZ 0x0000162c
END_OF_LINE
----------------------------------------------
16: pcVar2 = (char *)0x0;
	0000161e:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
19: for (; xml->attr[i] != (char *)0x0; i = i + 2) {
	00001628:ADD dword ptr [RBP + -0x10],0x2
	0000162c:MOV RAX,qword ptr [RBP + -0x18]
	00001630:MOV RDX,qword ptr [RAX + 0x8]
	00001634:MOV EAX,dword ptr [RBP + -0x10]
	00001637:CDQE
	00001639:SHL RAX,0x3
	0000163d:ADD RAX,RDX
	00001640:MOV RAX,qword ptr [RAX]
	00001643:TEST RAX,RAX
	00001646:JZ 0x00001672
END_OF_LINE
----------------------------------------------
20: iVar1 = strcmp(attr,xml->attr[i]);
	0000164c:MOV RDX,qword ptr [RAX + 0x8]
	00001650:MOV EAX,dword ptr [RBP + -0x10]
	00001653:CDQE
	00001655:SHL RAX,0x3
	00001659:ADD RAX,RDX
	0000165c:MOV RDX,qword ptr [RAX]
	0000165f:MOV RAX,qword ptr [RBP + -0x20]
	00001663:MOV RSI,RDX
	00001666:MOV RDI,RAX
	00001669:CALL 0x00001360
END_OF_LINE
----------------------------------------------
21: if (iVar1 == 0) break;
	0000166e:TEST EAX,EAX
	00001670:JNZ 0x00001628
END_OF_LINE
----------------------------------------------
23: root = (ezxml_root_t)xml;
	0000168c:JZ 0x000016ba
END_OF_LINE
----------------------------------------------
24: if (xml->attr[i] == (char *)0x0) {
	00001676:MOV RDX,qword ptr [RAX + 0x8]
	0000167a:MOV EAX,dword ptr [RBP + -0x10]
	0000167d:CDQE
	0000167f:SHL RAX,0x3
	00001683:ADD RAX,RDX
	00001686:MOV RAX,qword ptr [RAX]
	00001689:TEST RAX,RAX
	0000168c:JZ 0x000016ba
END_OF_LINE
----------------------------------------------
25: for (; (root->xml).parent != (ezxml_t)0x0; root = (ezxml_root_t)(root->xml).parent) {
	000016b2:MOV RAX,qword ptr [RAX + 0x40]
	000016b6:MOV qword ptr [RBP + -0x8],RAX
	000016ba:MOV RAX,qword ptr [RBP + -0x8]
	000016be:MOV RAX,qword ptr [RAX + 0x40]
	000016c2:TEST RAX,RAX
	000016c5:JNZ 0x000016ae
END_OF_LINE
----------------------------------------------
27: for (i = 0; root->attr[i] != (char **)0x0; i = i + 1) {
	000016c7:MOV dword ptr [RBP + -0x10],0x0
	000016ce:JMP 0x000016d4
	000016d0:ADD dword ptr [RBP + -0x10],0x1
	000016d4:MOV RAX,qword ptr [RBP + -0x8]
	000016d8:MOV RDX,qword ptr [RAX + 0x88]
	000016df:MOV EAX,dword ptr [RBP + -0x10]
	000016e2:CDQE
	000016e4:SHL RAX,0x3
	000016e8:ADD RAX,RDX
	000016eb:MOV RAX,qword ptr [RAX]
	000016ee:TEST RAX,RAX
	000016f1:JZ 0x00001726
END_OF_LINE
----------------------------------------------
28: iVar1 = strcmp(xml->name,*root->attr[i]);
	000016f7:MOV RDX,qword ptr [RAX + 0x88]
	000016fe:MOV EAX,dword ptr [RBP + -0x10]
	00001701:CDQE
	00001703:SHL RAX,0x3
	00001707:ADD RAX,RDX
	0000170a:MOV RAX,qword ptr [RAX]
	0000170d:MOV RDX,qword ptr [RAX]
	00001710:MOV RAX,qword ptr [RBP + -0x18]
	00001714:MOV RAX,qword ptr [RAX]
	00001717:MOV RSI,RDX
	0000171a:MOV RDI,RAX
	0000171d:CALL 0x00001360
END_OF_LINE
----------------------------------------------
29: if (iVar1 == 0) break;
	00001722:TEST EAX,EAX
	00001724:JNZ 0x000016d0
END_OF_LINE
----------------------------------------------
31: if (root->attr[i] == (char **)0x0) {
	0000172a:MOV RDX,qword ptr [RAX + 0x88]
	00001731:MOV EAX,dword ptr [RBP + -0x10]
	00001734:CDQE
	00001736:SHL RAX,0x3
	0000173a:ADD RAX,RDX
	0000173d:MOV RAX,qword ptr [RAX]
	00001740:TEST RAX,RAX
	00001743:JNZ 0x00001753
END_OF_LINE
----------------------------------------------
32: pcVar2 = (char *)0x0;
	00001745:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
35: for (; root->attr[i][j] != (char *)0x0; j = j + 3) {
	0000174f:ADD dword ptr [RBP + -0xc],0x3
	00001753:MOV RAX,qword ptr [RBP + -0x8]
	00001757:MOV RDX,qword ptr [RAX + 0x88]
	0000175e:MOV EAX,dword ptr [RBP + -0x10]
	00001761:CDQE
	00001763:SHL RAX,0x3
	00001767:ADD RAX,RDX
	0000176a:MOV RDX,qword ptr [RAX]
	0000176d:MOV EAX,dword ptr [RBP + -0xc]
	00001770:CDQE
	00001772:SHL RAX,0x3
	00001776:ADD RAX,RDX
	00001779:MOV RAX,qword ptr [RAX]
	0000177c:TEST RAX,RAX
	0000177f:JZ 0x000017bd
END_OF_LINE
----------------------------------------------
36: iVar1 = strcmp(attr,root->attr[i][j]);
	00001785:MOV RDX,qword ptr [RAX + 0x88]
	0000178c:MOV EAX,dword ptr [RBP + -0x10]
	0000178f:CDQE
	00001791:SHL RAX,0x3
	00001795:ADD RAX,RDX
	00001798:MOV RDX,qword ptr [RAX]
	0000179b:MOV EAX,dword ptr [RBP + -0xc]
	0000179e:CDQE
	000017a0:SHL RAX,0x3
	000017a4:ADD RAX,RDX
	000017a7:MOV RDX,qword ptr [RAX]
	000017aa:MOV RAX,qword ptr [RBP + -0x20]
	000017ae:MOV RSI,RDX
	000017b1:MOV RDI,RAX
	000017b4:CALL 0x00001360
END_OF_LINE
----------------------------------------------
37: if (iVar1 == 0) break;
	000017b9:TEST EAX,EAX
	000017bb:JNZ 0x0000174f
END_OF_LINE
----------------------------------------------
39: if (root->attr[i][j] == (char *)0x0) {
	000017c1:MOV RDX,qword ptr [RAX + 0x88]
	000017c8:MOV EAX,dword ptr [RBP + -0x10]
	000017cb:CDQE
	000017cd:SHL RAX,0x3
	000017d1:ADD RAX,RDX
	000017d4:MOV RDX,qword ptr [RAX]
	000017d7:MOV EAX,dword ptr [RBP + -0xc]
	000017da:CDQE
	000017dc:SHL RAX,0x3
	000017e0:ADD RAX,RDX
	000017e3:MOV RAX,qword ptr [RAX]
	000017e6:TEST RAX,RAX
	000017e9:JZ 0x0000181a
END_OF_LINE
----------------------------------------------
40: pcVar2 = (char *)0x0;
	0000181a:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
43: pcVar2 = root->attr[i][(long)j + 1];
	000017ef:MOV RDX,qword ptr [RAX + 0x88]
	000017f6:MOV EAX,dword ptr [RBP + -0x10]
	000017f9:CDQE
	000017fb:SHL RAX,0x3
	000017ff:ADD RAX,RDX
	00001802:MOV RDX,qword ptr [RAX]
	00001805:MOV EAX,dword ptr [RBP + -0xc]
	00001808:CDQE
	0000180a:ADD RAX,0x1
	0000180e:SHL RAX,0x3
	00001812:ADD RAX,RDX
	00001815:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
48: pcVar2 = xml->attr[(long)i + 1];
	00001692:MOV RDX,qword ptr [RAX + 0x8]
	00001696:MOV EAX,dword ptr [RBP + -0x10]
	00001699:CDQE
	0000169b:ADD RAX,0x1
	0000169f:SHL RAX,0x3
	000016a3:ADD RAX,RDX
	000016a6:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
51: return pcVar2;
	00001820:RET
END_OF_LINE



Function: ezxml_vget
----------------------------------------------
14: if (ap->gp_offset < 0x30) {
	00001839:MOV EAX,dword ptr [RAX]
	0000183b:CMP EAX,0x2f
	0000183e:JA 0x00001864
END_OF_LINE
----------------------------------------------
15: ppcVar1 = (char **)((ulong)ap->gp_offset + (long)ap->reg_save_area);
	00001844:MOV RDX,qword ptr [RAX + 0x10]
	00001848:MOV RAX,qword ptr [RBP + -0x20]
	0000184c:MOV EAX,dword ptr [RAX]
	0000184e:MOV EAX,EAX
	00001850:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
16: ap->gp_offset = ap->gp_offset + 8;
	00001857:MOV EDX,dword ptr [RDX]
	00001859:LEA ECX,[RDX + 0x8]
	0000185c:MOV RDX,qword ptr [RBP + -0x20]
	00001860:MOV dword ptr [RDX],ECX
END_OF_LINE
----------------------------------------------
19: ppcVar1 = (char **)ap->overflow_arg_area;
	00001868:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
20: ap->overflow_arg_area = ppcVar1 + 1;
	0000186c:LEA RCX,[RAX + 0x8]
	00001870:MOV RDX,qword ptr [RBP + -0x20]
	00001874:MOV qword ptr [RDX + 0x8],RCX
END_OF_LINE
----------------------------------------------
22: name_00 = *ppcVar1;
	00001878:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
23: idx = -1;
	0000187f:MOV dword ptr [RBP + -0xc],0xffffffff
END_OF_LINE
----------------------------------------------
24: xml_local = xml;
	0000188b:JZ 0x000018f7
END_OF_LINE
----------------------------------------------
25: if ((name_00 != (char *)0x0) && (*name_00 != '\0')) {
	00001886:CMP qword ptr [RBP + -0x8],0x0
	0000188b:JZ 0x000018f7
	0000188d:MOV RAX,qword ptr [RBP + -0x8]
	00001891:MOVZX EAX,byte ptr [RAX]
	00001894:TEST AL,AL
	00001896:JZ 0x000018f7
END_OF_LINE
----------------------------------------------
26: if (ap->gp_offset < 0x30) {
	0000189c:MOV EAX,dword ptr [RAX]
	0000189e:CMP EAX,0x2f
	000018a1:JA 0x000018c7
END_OF_LINE
----------------------------------------------
27: piVar2 = (int *)((ulong)ap->gp_offset + (long)ap->reg_save_area);
	000018a7:MOV RDX,qword ptr [RAX + 0x10]
	000018ab:MOV RAX,qword ptr [RBP + -0x20]
	000018af:MOV EAX,dword ptr [RAX]
	000018b1:MOV EAX,EAX
	000018b3:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
28: ap->gp_offset = ap->gp_offset + 8;
	000018ba:MOV EDX,dword ptr [RDX]
	000018bc:LEA ECX,[RDX + 0x8]
	000018bf:MOV RDX,qword ptr [RBP + -0x20]
	000018c3:MOV dword ptr [RDX],ECX
END_OF_LINE
----------------------------------------------
31: piVar2 = (int *)ap->overflow_arg_area;
	000018cb:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
32: ap->overflow_arg_area = piVar2 + 2;
	000018cf:LEA RCX,[RAX + 0x8]
	000018d3:MOV RDX,qword ptr [RBP + -0x20]
	000018d7:MOV qword ptr [RDX + 0x8],RCX
END_OF_LINE
----------------------------------------------
34: idx = *piVar2;
	000018db:MOV EAX,dword ptr [RAX]
END_OF_LINE
----------------------------------------------
35: xml_local = ezxml_child(xml,name_00);
	000018ee:CALL 0x00001549
END_OF_LINE
----------------------------------------------
37: if (-1 < idx) {
	000018f7:CMP dword ptr [RBP + -0xc],0x0
	000018fb:JS 0x00001922
END_OF_LINE
----------------------------------------------
38: xml_00 = ezxml_idx(xml_local,idx);
	00001909:CALL 0x000015ac
END_OF_LINE
----------------------------------------------
39: xml_local = ezxml_vget(xml_00,ap);
	0000191b:CALL 0x00001821
END_OF_LINE
----------------------------------------------
41: return xml_local;
	00001927:RET
END_OF_LINE



Function: ezxml_get
----------------------------------------------
40: if (in_AL != '\0') {
	00001961:TEST AL,AL
	00001963:JZ 0x00001985
END_OF_LINE
----------------------------------------------
41: local_88 = in_XMM0_Da;
	00001981:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
42: local_78 = in_XMM1_Da;
	00001981:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
43: local_68 = in_XMM2_Da;
	00001981:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
44: local_58 = in_XMM3_Da;
	00001981:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
45: local_48 = in_XMM4_Da;
	00001981:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
46: local_38 = in_XMM5_Da;
	00001981:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
47: local_28 = in_XMM6_Da;
	00001981:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
48: local_18 = in_XMM7_Da;
	00001981:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
50: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	00001985:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
51: ap[0].gp_offset = 8;
	00001997:MOV dword ptr [RBP + -0xd0],0x8
END_OF_LINE
----------------------------------------------
52: ap[0].fp_offset = 0x30;
	000019a1:MOV dword ptr [RBP + -0xcc],0x30
END_OF_LINE
----------------------------------------------
53: ap[0].overflow_arg_area = &stack0x00000008;
	000019ab:LEA RAX,[RBP + 0x10]
END_OF_LINE
----------------------------------------------
54: ap[0].reg_save_area = local_b8;
	000019b6:LEA RAX,[RBP + -0xb0]
END_OF_LINE
----------------------------------------------
55: local_b0 = in_RSI;
	000019d8:CALL 0x00001821
END_OF_LINE
----------------------------------------------
56: local_a8 = in_RDX;
	000019d8:CALL 0x00001821
END_OF_LINE
----------------------------------------------
57: local_a0 = in_RCX;
	000019d8:CALL 0x00001821
END_OF_LINE
----------------------------------------------
58: local_98 = in_R8;
	000019d8:CALL 0x00001821
END_OF_LINE
----------------------------------------------
59: local_90 = in_R9;
	000019d8:CALL 0x00001821
END_OF_LINE
----------------------------------------------
60: peVar2 = ezxml_vget(xml,ap);
	000019c4:LEA RDX,[RBP + -0xd0]
	000019cb:MOV RAX,qword ptr [RBP + -0xe8]
	000019d2:MOV RSI,RDX
	000019d5:MOV RDI,RAX
	000019d8:CALL 0x00001821
END_OF_LINE
----------------------------------------------
61: if (lVar1 != *(long *)(in_FS_OFFSET + 0x28)) {
	000019f2:SUB RDX,qword ptr FS:[0x28]
	000019fb:JZ 0x00001a02
END_OF_LINE
----------------------------------------------
63: __stack_chk_fail();
	000019fd:CALL 0x000012d0
END_OF_LINE
----------------------------------------------
65: return peVar2;
	000019e4:MOV RAX,qword ptr [RBP + -0xd8]
	000019eb:MOV RDX,qword ptr [RBP + -0xb8]
	000019f2:SUB RDX,qword ptr FS:[0x28]
	000019fb:JZ 0x00001a02
	000019fd:CALL 0x000012d0
	00001a02:LEAVE
	00001a03:RET
END_OF_LINE



Function: ezxml_pi
----------------------------------------------
12: i = 0;
	00001a20:MOV dword ptr [RBP + -0xc],0x0
END_OF_LINE
----------------------------------------------
13: root = (ezxml_root_t)xml;
	00001a2c:JNZ 0x00001a46
END_OF_LINE
----------------------------------------------
14: if (xml == (ezxml_t.conflict)0x0) {
	00001a27:CMP qword ptr [RBP + -0x8],0x0
	00001a2c:JNZ 0x00001a46
END_OF_LINE
----------------------------------------------
15: ppcVar2 = EZXML_NIL;
	00001a2e:LEA RAX,[0x9090]
END_OF_LINE
----------------------------------------------
18: for (; (root->xml).parent != (ezxml_t)0x0; root = (ezxml_root_t)(root->xml).parent) {
	00001a3e:MOV RAX,qword ptr [RAX + 0x40]
	00001a42:MOV qword ptr [RBP + -0x8],RAX
	00001a46:MOV RAX,qword ptr [RBP + -0x8]
	00001a4a:MOV RAX,qword ptr [RAX + 0x40]
	00001a4e:TEST RAX,RAX
	00001a51:JNZ 0x00001a3a
END_OF_LINE
----------------------------------------------
20: while ((root->pi[i] != (char **)0x0 && (iVar1 = strcmp(target,*root->pi[i]), iVar1 != 0))) {
	00001a5d:MOV RDX,qword ptr [RAX + 0x90]
	00001a64:MOV EAX,dword ptr [RBP + -0xc]
	00001a67:CDQE
	00001a69:SHL RAX,0x3
	00001a6d:ADD RAX,RDX
	00001a70:MOV RAX,qword ptr [RAX]
	00001a73:TEST RAX,RAX
	00001a76:JZ 0x00001aa8
	00001a78:MOV RAX,qword ptr [RBP + -0x8]
	00001a7c:MOV RDX,qword ptr [RAX + 0x90]
	00001a83:MOV EAX,dword ptr [RBP + -0xc]
	00001a86:CDQE
	00001a88:SHL RAX,0x3
	00001a8c:ADD RAX,RDX
	00001a8f:MOV RAX,qword ptr [RAX]
	00001a92:MOV RDX,qword ptr [RAX]
	00001a95:MOV RAX,qword ptr [RBP + -0x20]
	00001a99:MOV RSI,RDX
	00001a9c:MOV RDI,RAX
	00001a9f:CALL 0x00001360
	00001aa4:TEST EAX,EAX
	00001aa6:JNZ 0x00001a55
END_OF_LINE
----------------------------------------------
21: i = i + 1;
	00001a55:ADD dword ptr [RBP + -0xc],0x1
END_OF_LINE
----------------------------------------------
23: if (root->pi[i] == (char **)0x0) {
	00001aac:MOV RDX,qword ptr [RAX + 0x90]
	00001ab3:MOV EAX,dword ptr [RBP + -0xc]
	00001ab6:CDQE
	00001ab8:SHL RAX,0x3
	00001abc:ADD RAX,RDX
	00001abf:MOV RAX,qword ptr [RAX]
	00001ac2:TEST RAX,RAX
	00001ac5:JZ 0x00001ae7
END_OF_LINE
----------------------------------------------
24: ppcVar2 = EZXML_NIL;
	00001ae7:LEA RAX,[0x9090]
END_OF_LINE
----------------------------------------------
27: ppcVar2 = root->pi[i] + 1;
	00001acb:MOV RDX,qword ptr [RAX + 0x90]
	00001ad2:MOV EAX,dword ptr [RBP + -0xc]
	00001ad5:CDQE
	00001ad7:SHL RAX,0x3
	00001adb:ADD RAX,RDX
	00001ade:MOV RAX,qword ptr [RAX]
	00001ae1:ADD RAX,0x8
END_OF_LINE
----------------------------------------------
30: return ppcVar2;
	00001aef:RET
END_OF_LINE



Function: ezxml_err
----------------------------------------------
39: if (in_AL != '\0') {
	00001b29:TEST AL,AL
	00001b2b:JZ 0x00001b4d
END_OF_LINE
----------------------------------------------
40: local_88 = in_XMM0_Da;
	00001b49:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
41: local_78 = in_XMM1_Da;
	00001b49:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
42: local_68 = in_XMM2_Da;
	00001b49:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
43: local_58 = in_XMM3_Da;
	00001b49:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
44: local_48 = in_XMM4_Da;
	00001b49:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
45: local_38 = in_XMM5_Da;
	00001b49:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
46: local_28 = in_XMM6_Da;
	00001b49:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
47: local_18 = in_XMM7_Da;
	00001b49:MOVAPS xmmword ptr [RBP + -0x10],XMM7
END_OF_LINE
----------------------------------------------
49: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	00001b4d:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
50: line = 1;
	00001b5f:MOV dword ptr [RBP + -0x164],0x1
END_OF_LINE
----------------------------------------------
51: for (t = root->s; t < s; t = t + 1) {
	00001b70:MOV RAX,qword ptr [RAX + 0x70]
	00001b74:MOV qword ptr [RBP + -0x160],RAX
	00001b7b:JMP 0x00001b9a
	00001b7d:MOV RAX,qword ptr [RBP + -0x160]
	00001b84:MOVZX EAX,byte ptr [RAX]
	00001b87:CMP AL,0xa
	00001b89:JNZ 0x00001b92
	00001b8b:ADD dword ptr [RBP + -0x164],0x1
	00001b92:ADD qword ptr [RBP + -0x160],0x1
	00001b9a:MOV RAX,qword ptr [RBP + -0x160]
	00001ba1:CMP RAX,qword ptr [RBP + -0x180]
	00001ba8:JC 0x00001b7d
END_OF_LINE
----------------------------------------------
52: if (*t == '\n') {
	00001b84:MOVZX EAX,byte ptr [RAX]
	00001b87:CMP AL,0xa
	00001b89:JNZ 0x00001b92
END_OF_LINE
----------------------------------------------
53: line = line + 1;
	00001b8b:ADD dword ptr [RBP + -0x164],0x1
END_OF_LINE
----------------------------------------------
56: local_a0 = in_RCX;
	00001bd7:CALL 0x00001300
END_OF_LINE
----------------------------------------------
57: local_98 = in_R8;
	00001bd7:CALL 0x00001300
END_OF_LINE
----------------------------------------------
58: local_90 = in_R9;
	00001bd7:CALL 0x00001300
END_OF_LINE
----------------------------------------------
59: snprintf(fmt,0x80,"[error near line %d]: %s",(ulong)(uint)line,err);
	00001bb7:LEA RAX,[RBP + -0x140]
	00001bbe:MOV R8,RCX
	00001bc1:MOV ECX,EDX
	00001bc3:LEA RDX,[0x7008]
	00001bca:MOV ESI,0x80
	00001bcf:MOV RDI,RAX
	00001bd2:MOV EAX,0x0
	00001bd7:CALL 0x00001300
END_OF_LINE
----------------------------------------------
60: ap[0].gp_offset = 0x18;
	00001bdc:MOV dword ptr [RBP + -0x158],0x18
END_OF_LINE
----------------------------------------------
61: ap[0].fp_offset = 0x30;
	00001be6:MOV dword ptr [RBP + -0x154],0x30
END_OF_LINE
----------------------------------------------
62: ap[0].overflow_arg_area = &stack0x00000008;
	00001bf0:LEA RAX,[RBP + 0x10]
END_OF_LINE
----------------------------------------------
63: ap[0].reg_save_area = local_b8;
	00001bfb:LEA RAX,[RBP + -0xb0]
END_OF_LINE
----------------------------------------------
64: vsnprintf(root->err,0x80,fmt,ap);
	00001c10:LEA RDI,[RAX + 0x9a]
	00001c17:LEA RDX,[RBP + -0x158]
	00001c1e:LEA RAX,[RBP + -0x140]
	00001c25:MOV RCX,RDX
	00001c28:MOV RDX,RAX
	00001c2b:MOV ESI,0x80
	00001c30:CALL 0x000012b0
END_OF_LINE
----------------------------------------------
65: if (lVar1 != *(long *)(in_FS_OFFSET + 0x28)) {
	00001c43:SUB RDX,qword ptr FS:[0x28]
	00001c4c:JZ 0x00001c53
END_OF_LINE
----------------------------------------------
67: __stack_chk_fail();
	00001c4e:CALL 0x000012d0
END_OF_LINE
----------------------------------------------
69: return &root->xml;
	00001c35:MOV RAX,qword ptr [RBP + -0x178]
	00001c3c:MOV RDX,qword ptr [RBP + -0xb8]
	00001c43:SUB RDX,qword ptr FS:[0x28]
	00001c4c:JZ 0x00001c53
	00001c4e:CALL 0x000012d0
	00001c53:LEAVE
	00001c54:RET
END_OF_LINE



Function: ezxml_decode
----------------------------------------------
23: local_20 = *(long *)(in_FS_OFFSET + 0x28);
	00001c6f:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
24: r = s;
	00001c8e:JMP 0x00001ce0
END_OF_LINE
----------------------------------------------
25: m = s;
	00001c8e:JMP 0x00001ce0
END_OF_LINE
----------------------------------------------
26: for (s_local = s; pcVar3 = s_local, *s_local != '\0'; s_local = s_local + 1) {
	00001c8e:JMP 0x00001ce0
	00001c90:MOV RAX,qword ptr [RBP + -0x58]
	00001c94:LEA RDX,[RAX + 0x1]
	00001c98:MOV qword ptr [RBP + -0x58],RDX
	00001c9c:MOV byte ptr [RAX],0xa
	00001c9f:MOV RAX,qword ptr [RBP + -0x58]
	00001ca3:MOVZX EAX,byte ptr [RAX]
	00001ca6:CMP AL,0xa
	00001ca8:JNZ 0x00001cd0
	00001caa:MOV RAX,qword ptr [RBP + -0x58]
	00001cae:MOV RDI,RAX
	00001cb1:CALL 0x000012c0
	00001cb6:MOV RDX,RAX
	00001cb9:MOV RAX,qword ptr [RBP + -0x58]
	00001cbd:LEA RCX,[RAX + 0x1]
	00001cc1:MOV RAX,qword ptr [RBP + -0x58]
	00001cc5:MOV RSI,RCX
	00001cc8:MOV RDI,RAX
	00001ccb:CALL 0x000013e0
	00001cd0:MOV RAX,qword ptr [RBP + -0x58]
	00001cd4:MOVZX EAX,byte ptr [RAX]
	00001cd7:CMP AL,0xd
	00001cd9:JZ 0x00001c90
	00001cdb:ADD qword ptr [RBP + -0x58],0x1
	00001ce0:MOV RAX,qword ptr [RBP + -0x58]
	00001ce4:MOVZX EAX,byte ptr [RAX]
	00001ce7:TEST AL,AL
	00001ce9:JNZ 0x00001cd0
END_OF_LINE
----------------------------------------------
27: while (s_local = pcVar3, *s_local == '\r') {
	00001cd0:MOV RAX,qword ptr [RBP + -0x58]
	00001cd4:MOVZX EAX,byte ptr [RAX]
	00001cd7:CMP AL,0xd
	00001cd9:JZ 0x00001c90
END_OF_LINE
----------------------------------------------
28: pcVar3 = s_local + 1;
	00001c94:LEA RDX,[RAX + 0x1]
END_OF_LINE
----------------------------------------------
29: *s_local = '\n';
	00001c9c:MOV byte ptr [RAX],0xa
END_OF_LINE
----------------------------------------------
30: if (*pcVar3 == '\n') {
	00001ca3:MOVZX EAX,byte ptr [RAX]
	00001ca6:CMP AL,0xa
	00001ca8:JNZ 0x00001cd0
END_OF_LINE
----------------------------------------------
31: sVar4 = strlen(pcVar3);
	00001cb1:CALL 0x000012c0
END_OF_LINE
----------------------------------------------
32: memmove(pcVar3,s_local + 2,sVar4);
	00001cbd:LEA RCX,[RAX + 0x1]
	00001cc1:MOV RAX,qword ptr [RBP + -0x58]
	00001cc5:MOV RSI,RCX
	00001cc8:MOV RDI,RAX
	00001ccb:CALL 0x000013e0
END_OF_LINE
----------------------------------------------
36: s_local = r;
	00001cef:MOV qword ptr [RBP + -0x58],RAX
END_OF_LINE
----------------------------------------------
38: while( true ) {
	00001f6d:JNZ 0x00002153
END_OF_LINE
----------------------------------------------
39: while( true ) {
	00001d7f:JNZ 0x00001f3d
END_OF_LINE
----------------------------------------------
40: while ((((*s_local != '\0' && (*s_local != '&')) && ((*s_local != '%' || (t != '%')))) &&
	00001cfe:MOVZX EAX,byte ptr [RAX]
	00001d01:TEST AL,AL
	00001d03:JZ 0x00001d49
	00001d05:MOV RAX,qword ptr [RBP + -0x58]
	00001d09:MOVZX EAX,byte ptr [RAX]
	00001d0c:CMP AL,0x26
	00001d0e:JZ 0x00001d49
	00001d10:MOV RAX,qword ptr [RBP + -0x58]
	00001d14:MOVZX EAX,byte ptr [RAX]
	00001d17:CMP AL,0x25
	00001d19:JNZ 0x00001d21
	00001d1b:CMP byte ptr [RBP + -0x64],0x25
	00001d1f:JZ 0x00001d49
	00001d21:CALL 0x00001450
	00001d26:MOV RDX,qword ptr [RAX]
	00001d29:MOV RAX,qword ptr [RBP + -0x58]
	00001d2d:MOVZX EAX,byte ptr [RAX]
	00001d30:MOVSX RAX,AL
	00001d34:ADD RAX,RAX
	00001d37:ADD RAX,RDX
	00001d3a:MOVZX EAX,word ptr [RAX]
	00001d3d:MOVZX EAX,AX
	00001d40:AND EAX,0x2000
	00001d45:TEST EAX,EAX
	00001d47:JZ 0x00001cf5
END_OF_LINE
----------------------------------------------
41: (ppuVar2 = __ctype_b_loc(), ((*ppuVar2)[*s_local] & 0x2000) == 0))) {
	00001d21:CALL 0x00001450
	00001d26:MOV RDX,qword ptr [RAX]
	00001d29:MOV RAX,qword ptr [RBP + -0x58]
	00001d2d:MOVZX EAX,byte ptr [RAX]
	00001d30:MOVSX RAX,AL
	00001d34:ADD RAX,RAX
	00001d37:ADD RAX,RDX
	00001d3a:MOVZX EAX,word ptr [RAX]
	00001d3d:MOVZX EAX,AX
	00001d40:AND EAX,0x2000
	00001d45:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
42: s_local = s_local + 1;
	00001cf5:ADD qword ptr [RBP + -0x58],0x1
END_OF_LINE
----------------------------------------------
44: if (*s_local == '\0') {
	00001d4d:MOVZX EAX,byte ptr [RAX]
	00001d50:TEST AL,AL
	00001d52:JZ 0x000021a2
END_OF_LINE
----------------------------------------------
45: if (t == '*') {
	000021a3:CMP byte ptr [RBP + -0x64],0x2a
	000021a7:JNZ 0x00002257
END_OF_LINE
----------------------------------------------
46: for (s_local = r; *s_local != '\0'; s_local = s_local + 1) {
	000021b1:MOV qword ptr [RBP + -0x58],RAX
	000021b5:JMP 0x0000222b
	000021b7:MOV RAX,qword ptr [RBP + -0x58]
	000021bb:LEA RDX,[0x7024]
	000021c2:MOV RSI,RDX
	000021c5:MOV RDI,RAX
	000021c8:CALL 0x00001330
	000021cd:MOV qword ptr [RBP + -0x20],RAX
	000021d1:CMP qword ptr [RBP + -0x20],0x0
	000021d6:JZ 0x00002210
	000021d8:MOV RDX,qword ptr [RBP + -0x20]
	000021dc:MOV RAX,qword ptr [RBP + -0x58]
	000021e0:ADD RAX,RDX
	000021e3:MOV RDI,RAX
	000021e6:CALL 0x000012c0
	000021eb:LEA RDX,[RAX + 0x1]
	000021ef:MOV RCX,qword ptr [RBP + -0x20]
	000021f3:MOV RAX,qword ptr [RBP + -0x58]
	000021f7:ADD RCX,RAX
	000021fa:MOV RAX,qword ptr [RBP + -0x58]
	000021fe:MOV RSI,RCX
	00002201:MOV RDI,RAX
	00002204:CALL 0x000013e0
	00002209:JMP 0x00002210
	0000220b:ADD qword ptr [RBP + -0x58],0x1
	00002210:MOV RAX,qword ptr [RBP + -0x58]
	00002214:MOVZX EAX,byte ptr [RAX]
	00002217:TEST AL,AL
	00002219:JZ 0x00002226
	0000221b:MOV RAX,qword ptr [RBP + -0x58]
	0000221f:MOVZX EAX,byte ptr [RAX]
	00002222:CMP AL,0x20
	00002224:JNZ 0x0000220b
	00002226:ADD qword ptr [RBP + -0x58],0x1
	0000222b:MOV RAX,qword ptr [RBP + -0x58]
	0000222f:MOVZX EAX,byte ptr [RAX]
	00002232:TEST AL,AL
	00002234:JNZ 0x000021b7
END_OF_LINE
----------------------------------------------
47: l = strspn(s_local," ");
	000021c8:CALL 0x00001330
END_OF_LINE
----------------------------------------------
48: if (l != 0) {
	000021d1:CMP qword ptr [RBP + -0x20],0x0
	000021d6:JZ 0x00002210
END_OF_LINE
----------------------------------------------
49: sVar4 = strlen(s_local + l);
	000021e0:ADD RAX,RDX
	000021e3:MOV RDI,RAX
	000021e6:CALL 0x000012c0
END_OF_LINE
----------------------------------------------
50: memmove(s_local,s_local + l,sVar4 + 1);
	000021eb:LEA RDX,[RAX + 0x1]
	000021ef:MOV RCX,qword ptr [RBP + -0x20]
	000021f3:MOV RAX,qword ptr [RBP + -0x58]
	000021f7:ADD RCX,RAX
	000021fa:MOV RAX,qword ptr [RBP + -0x58]
	000021fe:MOV RSI,RCX
	00002201:MOV RDI,RAX
	00002204:CALL 0x000013e0
END_OF_LINE
----------------------------------------------
52: for (; (*s_local != '\0' && (*s_local != ' ')); s_local = s_local + 1) {
	0000220b:ADD qword ptr [RBP + -0x58],0x1
	00002210:MOV RAX,qword ptr [RBP + -0x58]
	00002214:MOVZX EAX,byte ptr [RAX]
	00002217:TEST AL,AL
	00002219:JZ 0x00002226
	0000221b:MOV RAX,qword ptr [RBP + -0x58]
	0000221f:MOVZX EAX,byte ptr [RAX]
	00002222:CMP AL,0x20
	00002224:JNZ 0x0000220b
END_OF_LINE
----------------------------------------------
55: pcVar3 = s_local + -1;
	00002236:SUB qword ptr [RBP + -0x58],0x1
END_OF_LINE
----------------------------------------------
56: if ((r <= pcVar3) && (*pcVar3 == ' ')) {
	0000223f:CMP RAX,qword ptr [RBP + -0x48]
	00002243:JC 0x00002257
	00002245:MOV RAX,qword ptr [RBP + -0x58]
	00002249:MOVZX EAX,byte ptr [RAX]
	0000224c:CMP AL,0x20
	0000224e:JNZ 0x00002257
END_OF_LINE
----------------------------------------------
57: *pcVar3 = '\0';
	00002254:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
60: if (local_20 == *(long *)(in_FS_OFFSET + 0x28)) {
	0000225f:SUB RDX,qword ptr FS:[0x28]
	00002268:JZ 0x0000226f
END_OF_LINE
----------------------------------------------
61: return r;
	00002257:MOV RAX,qword ptr [RBP + -0x48]
	0000225b:MOV RDX,qword ptr [RBP + -0x18]
	0000225f:SUB RDX,qword ptr FS:[0x28]
	00002268:JZ 0x0000226f
	0000226a:CALL 0x000012d0
	0000226f:MOV RBX,qword ptr [RBP + -0x8]
	00002273:LEAVE
	00002274:RET
END_OF_LINE
----------------------------------------------
64: __stack_chk_fail();
	0000226a:CALL 0x000012d0
END_OF_LINE
----------------------------------------------
66: if ((t == 'c') || (iVar1 = strncmp(s_local,"&#",2), iVar1 != 0)) break;
	00001d58:CMP byte ptr [RBP + -0x64],0x63
	00001d5c:JZ 0x00001f3d
	00001d62:MOV RAX,qword ptr [RBP + -0x58]
	00001d66:MOV EDX,0x2
	00001d6b:LEA RCX,[0x7021]
	00001d72:MOV RSI,RCX
	00001d75:MOV RDI,RAX
	00001d78:CALL 0x00001270
	00001d7d:TEST EAX,EAX
	00001d7f:JNZ 0x00001f3d
END_OF_LINE
----------------------------------------------
67: if (s_local[2] == 'x') {
	00001d89:ADD RAX,0x2
	00001d8d:MOVZX EAX,byte ptr [RAX]
	00001d90:CMP AL,0x78
	00001d92:JNZ 0x00001db6
END_OF_LINE
----------------------------------------------
68: c = strtol(s_local + 3,&e,0x10);
	00001d98:LEA RCX,[RAX + 0x3]
	00001d9c:LEA RAX,[RBP + -0x50]
	00001da0:MOV EDX,0x10
	00001da5:MOV RSI,RAX
	00001da8:MOV RDI,RCX
	00001dab:CALL 0x00001380
END_OF_LINE
----------------------------------------------
71: c = strtol(s_local + 2,&e,10);
	00001dba:LEA RCX,[RAX + 0x2]
	00001dbe:LEA RAX,[RBP + -0x50]
	00001dc2:MOV EDX,0xa
	00001dc7:MOV RSI,RAX
	00001dca:MOV RDI,RCX
	00001dcd:CALL 0x00001380
END_OF_LINE
----------------------------------------------
73: if ((c == 0) || (*e != ';')) {
	00001dd6:CMP qword ptr [RBP + -0x38],0x0
	00001ddb:JZ 0x00001de8
	00001ddd:MOV RAX,qword ptr [RBP + -0x50]
	00001de1:MOVZX EAX,byte ptr [RAX]
	00001de4:CMP AL,0x3b
	00001de6:JZ 0x00001df2
END_OF_LINE
----------------------------------------------
74: s_local = s_local + 1;
	00001de8:ADD qword ptr [RBP + -0x58],0x1
	00001ded:JMP 0x0000219d
END_OF_LINE
----------------------------------------------
77: if (c < 0x80) {
	00001df7:JG 0x00001e10
END_OF_LINE
----------------------------------------------
78: *s_local = (char)c;
	00001e09:MOV byte ptr [RAX],DL
END_OF_LINE
----------------------------------------------
79: s_local = s_local + 1;
	00001dfd:LEA RDX,[RAX + 0x1]
	00001e01:MOV qword ptr [RBP + -0x58],RDX
	00001e05:MOV RDX,qword ptr [RBP + -0x38]
	00001e09:MOV byte ptr [RAX],DL
	00001e0b:JMP 0x00001ef5
END_OF_LINE
----------------------------------------------
82: b = 0;
	00001e10:MOV qword ptr [RBP + -0x40],0x0
END_OF_LINE
----------------------------------------------
83: for (d = c; d != 0; d = d / 2) {
	00001e1c:MOV qword ptr [RBP + -0x30],RAX
	00001e20:JMP 0x00001e3c
	00001e22:ADD qword ptr [RBP + -0x40],0x1
	00001e27:MOV RAX,qword ptr [RBP + -0x30]
	00001e2b:MOV RDX,RAX
	00001e2e:SHR RDX,0x3f
	00001e32:ADD RAX,RDX
	00001e35:SAR RAX,0x1
	00001e38:MOV qword ptr [RBP + -0x30],RAX
	00001e3c:CMP qword ptr [RBP + -0x30],0x0
	00001e41:JNZ 0x00001e22
END_OF_LINE
----------------------------------------------
84: b = b + 1;
	00001e22:ADD qword ptr [RBP + -0x40],0x1
END_OF_LINE
----------------------------------------------
86: b = (b + -2) / 5;
	00001e47:LEA RCX,[RAX + -0x2]
	00001e4b:MOV RDX,0x6666666666666667
	00001e55:MOV RAX,RCX
	00001e58:IMUL RDX
	00001e5b:MOV RAX,RDX
	00001e5e:SAR RAX,0x1
END_OF_LINE
----------------------------------------------
87: *s_local = (byte)(0xff << (7U - (char)b & 0x1f)) |
	00001e7a:SUB EAX,EDX
	00001e7c:MOV EDX,0xff
	00001e81:MOV ECX,EAX
	00001e83:SHL EDX,CL
	00001e85:MOV EAX,EDX
	00001e87:MOV ESI,EAX
	00001e89:MOV RAX,qword ptr [RBP + -0x40]
	00001e8d:MOV EDX,EAX
	00001e8f:MOV EAX,EDX
	00001e91:ADD EAX,EAX
	00001e93:ADD EAX,EDX
	00001e95:ADD EAX,EAX
	00001e97:MOV EDX,EAX
	00001e99:MOV RAX,qword ptr [RBP + -0x38]
	00001e9d:MOV ECX,EDX
	00001e9f:SAR RAX,CL
	00001ea2:MOV ECX,EAX
	00001ea4:MOV RAX,qword ptr [RBP + -0x58]
	00001ea8:LEA RDX,[RAX + 0x1]
	00001eac:MOV qword ptr [RBP + -0x58],RDX
	00001eb0:OR ESI,ECX
	00001eb2:MOV EDX,ESI
	00001eb4:MOV byte ptr [RAX],DL
END_OF_LINE
----------------------------------------------
88: (byte)(c >> ((char)b * '\x06' & 0x3fU));
	00001e83:SHL EDX,CL
	00001e85:MOV EAX,EDX
	00001e87:MOV ESI,EAX
	00001e89:MOV RAX,qword ptr [RBP + -0x40]
	00001e8d:MOV EDX,EAX
	00001e8f:MOV EAX,EDX
	00001e91:ADD EAX,EAX
	00001e93:ADD EAX,EDX
	00001e95:ADD EAX,EAX
	00001e97:MOV EDX,EAX
	00001e99:MOV RAX,qword ptr [RBP + -0x38]
	00001e9d:MOV ECX,EDX
	00001e9f:SAR RAX,CL
END_OF_LINE
----------------------------------------------
89: while (s_local = s_local + 1, b != 0) {
	00001ea8:LEA RDX,[RAX + 0x1]
	00001eac:MOV qword ptr [RBP + -0x58],RDX
	00001eb0:OR ESI,ECX
	00001eb2:MOV EDX,ESI
	00001eb4:MOV byte ptr [RAX],DL
	00001eb6:JMP 0x00001eee
	00001eb8:SUB qword ptr [RBP + -0x40],0x1
	00001ebd:MOV RAX,qword ptr [RBP + -0x40]
	00001ec1:MOV EDX,EAX
	00001ec3:MOV EAX,EDX
	00001ec5:ADD EAX,EAX
	00001ec7:ADD EAX,EDX
	00001ec9:ADD EAX,EAX
	00001ecb:MOV EDX,EAX
	00001ecd:MOV RAX,qword ptr [RBP + -0x38]
	00001ed1:MOV ECX,EDX
	00001ed3:SAR RAX,CL
	00001ed6:AND EAX,0x3f
	00001ed9:MOV ECX,EAX
	00001edb:MOV RAX,qword ptr [RBP + -0x58]
	00001edf:LEA RDX,[RAX + 0x1]
	00001ee3:MOV qword ptr [RBP + -0x58],RDX
	00001ee7:OR ECX,0xffffff80
	00001eea:MOV EDX,ECX
	00001eec:MOV byte ptr [RAX],DL
	00001eee:CMP qword ptr [RBP + -0x40],0x0
	00001ef3:JNZ 0x00001eb8
END_OF_LINE
----------------------------------------------
90: b = b + -1;
	00001eb8:SUB qword ptr [RBP + -0x40],0x1
END_OF_LINE
----------------------------------------------
91: *s_local = (byte)(c >> ((char)b * '\x06' & 0x3fU)) & 0x3f | 0x80;
	00001ec9:ADD EAX,EAX
	00001ecb:MOV EDX,EAX
	00001ecd:MOV RAX,qword ptr [RBP + -0x38]
	00001ed1:MOV ECX,EDX
	00001ed3:SAR RAX,CL
	00001ed6:AND EAX,0x3f
	00001ed9:MOV ECX,EAX
	00001edb:MOV RAX,qword ptr [RBP + -0x58]
	00001edf:LEA RDX,[RAX + 0x1]
	00001ee3:MOV qword ptr [RBP + -0x58],RDX
	00001ee7:OR ECX,0xffffff80
	00001eea:MOV EDX,ECX
	00001eec:MOV byte ptr [RAX],DL
END_OF_LINE
----------------------------------------------
94: pcVar3 = strchr(s_local,0x3b);
	00001f01:CALL 0x000012f0
END_OF_LINE
----------------------------------------------
95: sVar4 = strlen(pcVar3);
	00001f09:CALL 0x000012c0
END_OF_LINE
----------------------------------------------
96: pcVar3 = strchr(s_local,0x3b);
	00001f1d:CALL 0x000012f0
END_OF_LINE
----------------------------------------------
97: memmove(s_local,pcVar3 + 1,sVar4);
	00001f22:LEA RCX,[RAX + 0x1]
	00001f26:MOV RAX,qword ptr [RBP + -0x58]
	00001f2a:MOV RDX,RBX
	00001f2d:MOV RSI,RCX
	00001f30:MOV RDI,RAX
	00001f33:CALL 0x000013e0
END_OF_LINE
----------------------------------------------
100: if (((*s_local == '&') && (((t == '&' || (t == ' ')) || (t == '*')))) ||
	00001f41:MOVZX EAX,byte ptr [RAX]
	00001f44:CMP AL,0x26
	00001f46:JNZ 0x00001f5a
	00001f48:CMP byte ptr [RBP + -0x64],0x26
	00001f4c:JZ 0x00001f73
	00001f4e:CMP byte ptr [RBP + -0x64],0x20
	00001f52:JZ 0x00001f73
	00001f54:CMP byte ptr [RBP + -0x64],0x2a
	00001f58:JZ 0x00001f73
	00001f5a:MOV RAX,qword ptr [RBP + -0x58]
	00001f5e:MOVZX EAX,byte ptr [RAX]
	00001f61:CMP AL,0x25
	00001f63:JNZ 0x00002153
	00001f69:CMP byte ptr [RBP + -0x64],0x25
	00001f6d:JNZ 0x00002153
END_OF_LINE
----------------------------------------------
101: ((*s_local == '%' && (t == '%')))) break;
	00001f5e:MOVZX EAX,byte ptr [RAX]
	00001f61:CMP AL,0x25
	00001f63:JNZ 0x00002153
	00001f69:CMP byte ptr [RBP + -0x64],0x25
END_OF_LINE
----------------------------------------------
102: if (((t == ' ') || (t == '*')) &&
	00002153:CMP byte ptr [RBP + -0x64],0x20
	00002157:JZ 0x0000215f
	00002159:CMP byte ptr [RBP + -0x64],0x2a
	0000215d:JNZ 0x00002198
	0000215f:CALL 0x00001450
	00002164:MOV RDX,qword ptr [RAX]
	00002167:MOV RAX,qword ptr [RBP + -0x58]
	0000216b:MOVZX EAX,byte ptr [RAX]
	0000216e:MOVSX RAX,AL
	00002172:ADD RAX,RAX
	00002175:ADD RAX,RDX
	00002178:MOVZX EAX,word ptr [RAX]
	0000217b:MOVZX EAX,AX
	0000217e:AND EAX,0x2000
	00002183:TEST EAX,EAX
	00002185:JZ 0x00002198
END_OF_LINE
----------------------------------------------
103: (ppuVar2 = __ctype_b_loc(), ((*ppuVar2)[*s_local] & 0x2000) != 0)) {
	0000215f:CALL 0x00001450
	00002164:MOV RDX,qword ptr [RAX]
	00002167:MOV RAX,qword ptr [RBP + -0x58]
	0000216b:MOVZX EAX,byte ptr [RAX]
	0000216e:MOVSX RAX,AL
	00002172:ADD RAX,RAX
	00002175:ADD RAX,RDX
	00002178:MOVZX EAX,word ptr [RAX]
	0000217b:MOVZX EAX,AX
	0000217e:AND EAX,0x2000
	00002183:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
104: *s_local = ' ';
	00002193:MOV byte ptr [RAX],0x20
END_OF_LINE
----------------------------------------------
105: s_local = s_local + 1;
	0000218b:LEA RDX,[RAX + 0x1]
	0000218f:MOV qword ptr [RBP + -0x58],RDX
	00002193:MOV byte ptr [RAX],0x20
	00002196:JMP 0x0000219d
END_OF_LINE
----------------------------------------------
108: s_local = s_local + 1;
	00002198:ADD qword ptr [RBP + -0x58],0x1
END_OF_LINE
----------------------------------------------
111: for (b = 0; ent[b] != (char *)0x0; b = b + 2) {
	00001f73:MOV qword ptr [RBP + -0x40],0x0
	00001f7b:JMP 0x00001f82
	00001f7d:ADD qword ptr [RBP + -0x40],0x2
	00001f82:MOV RAX,qword ptr [RBP + -0x40]
	00001f86:LEA RDX,[RAX*0x8]
	00001f8e:MOV RAX,qword ptr [RBP + -0x60]
	00001f92:ADD RAX,RDX
	00001f95:MOV RAX,qword ptr [RAX]
	00001f98:TEST RAX,RAX
	00001f9b:JZ 0x00001feb
END_OF_LINE
----------------------------------------------
112: sVar4 = strlen(ent[b]);
	00001fad:ADD RAX,RDX
	00001fb0:MOV RAX,qword ptr [RAX]
	00001fb3:MOV RDI,RAX
	00001fb6:CALL 0x000012c0
END_OF_LINE
----------------------------------------------
113: iVar1 = strncmp(s_local + 1,ent[b],sVar4);
	00001fce:ADD RAX,RCX
	00001fd1:MOV RAX,qword ptr [RAX]
	00001fd4:MOV RCX,qword ptr [RBP + -0x58]
	00001fd8:ADD RCX,0x1
	00001fdc:MOV RSI,RAX
	00001fdf:MOV RDI,RCX
	00001fe2:CALL 0x00001270
END_OF_LINE
----------------------------------------------
114: if (iVar1 == 0) break;
	00001fe7:TEST EAX,EAX
	00001fe9:JNZ 0x00001f7d
END_OF_LINE
----------------------------------------------
116: lVar5 = b + 1;
	00001fef:LEA RDX,[RAX + 0x1]
END_OF_LINE
----------------------------------------------
117: if (ent[b] == (char *)0x0) {
	00002003:ADD RAX,RDX
	00002006:MOV RAX,qword ptr [RAX]
	00002009:TEST RAX,RAX
	0000200c:JZ 0x0000214c
END_OF_LINE
----------------------------------------------
118: s_local = s_local + 1;
	0000214c:ADD qword ptr [RBP + -0x58],0x1
	00002151:JMP 0x0000219d
END_OF_LINE
----------------------------------------------
119: b = lVar5;
	00002151:JMP 0x0000219d
END_OF_LINE
----------------------------------------------
122: b = lVar5;
	0000202b:CALL 0x000012c0
END_OF_LINE
----------------------------------------------
123: c = strlen(ent[lVar5]);
	00002022:ADD RAX,RDX
	00002025:MOV RAX,qword ptr [RAX]
	00002028:MOV RDI,RAX
	0000202b:CALL 0x000012c0
END_OF_LINE
----------------------------------------------
124: lVar5 = c - 1;
	00002038:LEA RBX,[RAX + -0x1]
END_OF_LINE
----------------------------------------------
125: e = strchr(s_local,0x3b);
	00002048:CALL 0x000012f0
END_OF_LINE
----------------------------------------------
126: if ((long)e - (long)s_local < lVar5) {
	00002055:SUB RAX,qword ptr [RBP + -0x58]
	00002059:CMP RBX,RAX
	0000205c:JLE 0x000020f4
END_OF_LINE
----------------------------------------------
127: d = (long)s_local - (long)r;
	00002066:SUB RAX,qword ptr [RBP + -0x48]
END_OF_LINE
----------------------------------------------
128: lVar5 = c + d;
	00002076:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
129: sVar4 = strlen(e);
	00002083:CALL 0x000012c0
END_OF_LINE
----------------------------------------------
130: l = sVar4 + lVar5;
	00002088:ADD RAX,RBX
END_OF_LINE
----------------------------------------------
131: if (r == m) {
	00002093:CMP RAX,qword ptr [RBP + -0x28]
	00002097:JNZ 0x000020b9
END_OF_LINE
----------------------------------------------
132: pcVar3 = (char *)malloc(l);
	000020a0:CALL 0x000013a0
END_OF_LINE
----------------------------------------------
133: r = strcpy(pcVar3,r);
	000020b2:CALL 0x00001280
END_OF_LINE
----------------------------------------------
136: r = (char *)realloc(r,l);
	000020c7:CALL 0x000013b0
END_OF_LINE
----------------------------------------------
138: s_local = r + d;
	000020d8:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
139: e = strchr(s_local,0x3b);
	000020eb:CALL 0x000012f0
END_OF_LINE
----------------------------------------------
141: sVar4 = strlen(e);
	000020fb:CALL 0x000012c0
END_OF_LINE
----------------------------------------------
142: memmove(s_local + c,e + 1,sVar4);
	00002107:LEA RCX,[RAX + 0x1]
	0000210b:MOV RSI,qword ptr [RBP + -0x38]
	0000210f:MOV RAX,qword ptr [RBP + -0x58]
	00002113:ADD RAX,RSI
	00002116:MOV RSI,RCX
	00002119:MOV RDI,RAX
	0000211c:CALL 0x000013e0
END_OF_LINE
----------------------------------------------
143: strncpy(s_local,ent[b],c);
	00002135:ADD RAX,RCX
	00002138:MOV RCX,qword ptr [RAX]
	0000213b:MOV RAX,qword ptr [RBP + -0x58]
	0000213f:MOV RSI,RCX
	00002142:MOV RDI,RAX
	00002145:CALL 0x00001260
END_OF_LINE



Function: ezxml_open_tag
----------------------------------------------
11: xml = root->cur;
	00002291:MOV RAX,qword ptr [RAX + 0x50]
END_OF_LINE
----------------------------------------------
12: if (xml->name == (char *)0x0) {
	0000229d:MOV RAX,qword ptr [RAX]
	000022a0:TEST RAX,RAX
	000022a3:JZ 0x000022d1
END_OF_LINE
----------------------------------------------
13: xml->name = name;
	000022d9:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
16: off = strlen(xml->txt);
	000022a9:MOV RAX,qword ptr [RAX + 0x10]
	000022ad:MOV RDI,RAX
	000022b0:CALL 0x000012c0
END_OF_LINE
----------------------------------------------
17: xml = ezxml_add_child(xml,name,off);
	000022c6:CALL 0x00006152
END_OF_LINE
----------------------------------------------
19: xml->attr = attr;
	000022e4:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
20: root->cur = xml;
	000022f0:MOV qword ptr [RAX + 0x50],RDX
END_OF_LINE
----------------------------------------------
21: return;
	000022f6:RET
END_OF_LINE



Function: ezxml_char_content
----------------------------------------------
18: xml_00 = root->cur;
	00002319:MOV RAX,qword ptr [RAX + 0x50]
END_OF_LINE
----------------------------------------------
19: if (((xml_00 != (ezxml_t.conflict)0x0) && (xml_00->name != (char *)0x0)) && (len != 0)) {
	00002329:CMP qword ptr [RBP + -0x20],0x0
	0000232e:JZ 0x0000248e
	00002334:MOV RAX,qword ptr [RBP + -0x20]
	00002338:MOV RAX,qword ptr [RAX]
	0000233b:TEST RAX,RAX
	0000233e:JZ 0x0000248e
	00002344:CMP qword ptr [RBP + -0x48],0x0
	00002349:JZ 0x0000248e
END_OF_LINE
----------------------------------------------
20: s[len] = '\0';
	00002357:ADD RAX,RDX
	0000235a:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
21: __s = ezxml_decode(s,root->ent,t);
	00002365:MOV RCX,qword ptr [RAX + 0x80]
	0000236c:MOV RAX,qword ptr [RBP + -0x40]
	00002370:MOV RSI,RCX
	00002373:MOV RDI,RAX
	00002376:CALL 0x00001c55
END_OF_LINE
----------------------------------------------
22: sVar1 = strlen(__s);
	00002386:CALL 0x000012c0
END_OF_LINE
----------------------------------------------
23: if (*xml_00->txt == '\0') {
	00002397:MOV RAX,qword ptr [RAX + 0x10]
	0000239b:MOVZX EAX,byte ptr [RAX]
	0000239e:TEST AL,AL
	000023a0:JNZ 0x000023b3
END_OF_LINE
----------------------------------------------
24: xml_00->txt = __s;
	000023aa:MOV qword ptr [RAX + 0x10],RDX
END_OF_LINE
----------------------------------------------
27: if ((xml_00->flags & 0x40U) == 0) {
	000023b7:MOVZX EAX,word ptr [RAX + 0x48]
	000023bb:CWDE
	000023bc:AND EAX,0x40
	000023bf:TEST EAX,EAX
	000023c1:JZ 0x000023f7
END_OF_LINE
----------------------------------------------
28: pcVar2 = xml_00->txt;
	000023fb:MOV RBX,qword ptr [RAX + 0x10]
END_OF_LINE
----------------------------------------------
29: l = strlen(xml_00->txt);
	00002403:MOV RAX,qword ptr [RAX + 0x10]
	00002407:MOV RDI,RAX
	0000240a:CALL 0x000012c0
END_OF_LINE
----------------------------------------------
30: __dest = (char *)malloc(sVar1 + 1 + l);
	0000238b:ADD RAX,0x1
	0000238f:MOV qword ptr [RBP + -0x48],RAX
	00002393:MOV RAX,qword ptr [RBP + -0x20]
	00002397:MOV RAX,qword ptr [RAX + 0x10]
	0000239b:MOVZX EAX,byte ptr [RAX]
	0000239e:TEST AL,AL
	000023a0:JNZ 0x000023b3
	000023a2:MOV RAX,qword ptr [RBP + -0x20]
	000023a6:MOV RDX,qword ptr [RBP + -0x40]
	000023aa:MOV qword ptr [RAX + 0x10],RDX
	000023ae:JMP 0x0000246d
	000023b3:MOV RAX,qword ptr [RBP + -0x20]
	000023b7:MOVZX EAX,word ptr [RAX + 0x48]
	000023bb:CWDE
	000023bc:AND EAX,0x40
	000023bf:TEST EAX,EAX
	000023c1:JZ 0x000023f7
	000023c3:MOV RAX,qword ptr [RBP + -0x20]
	000023c7:MOV RAX,qword ptr [RAX + 0x10]
	000023cb:MOV RDI,RAX
	000023ce:CALL 0x000012c0
	000023d3:MOV qword ptr [RBP + -0x28],RAX
	000023d7:MOV RDX,qword ptr [RBP + -0x28]
	000023db:MOV RAX,qword ptr [RBP + -0x48]
	000023df:ADD RDX,RAX
	000023e2:MOV RAX,qword ptr [RBP + -0x20]
	000023e6:MOV RAX,qword ptr [RAX + 0x10]
	000023ea:MOV RSI,RDX
	000023ed:MOV RDI,RAX
	000023f0:CALL 0x000013b0
	000023f5:JMP 0x00002431
	000023f7:MOV RAX,qword ptr [RBP + -0x20]
	000023fb:MOV RBX,qword ptr [RAX + 0x10]
	000023ff:MOV RAX,qword ptr [RBP + -0x20]
	00002403:MOV RAX,qword ptr [RAX + 0x10]
	00002407:MOV RDI,RAX
	0000240a:CALL 0x000012c0
	0000240f:MOV qword ptr [RBP + -0x28],RAX
	00002413:MOV RDX,qword ptr [RBP + -0x28]
	00002417:MOV RAX,qword ptr [RBP + -0x48]
	0000241b:ADD RAX,RDX
	0000241e:MOV RDI,RAX
	00002421:CALL 0x000013a0
END_OF_LINE
----------------------------------------------
31: pcVar2 = strcpy(__dest,pcVar2);
	0000242c:CALL 0x00001280
END_OF_LINE
----------------------------------------------
34: l = strlen(xml_00->txt);
	000023c7:MOV RAX,qword ptr [RAX + 0x10]
	000023cb:MOV RDI,RAX
	000023ce:CALL 0x000012c0
END_OF_LINE
----------------------------------------------
35: pcVar2 = (char *)realloc(xml_00->txt,l + sVar1 + 1);
	0000238b:ADD RAX,0x1
	0000238f:MOV qword ptr [RBP + -0x48],RAX
	00002393:MOV RAX,qword ptr [RBP + -0x20]
	00002397:MOV RAX,qword ptr [RAX + 0x10]
	0000239b:MOVZX EAX,byte ptr [RAX]
	0000239e:TEST AL,AL
	000023a0:JNZ 0x000023b3
	000023a2:MOV RAX,qword ptr [RBP + -0x20]
	000023a6:MOV RDX,qword ptr [RBP + -0x40]
	000023aa:MOV qword ptr [RAX + 0x10],RDX
	000023ae:JMP 0x0000246d
	000023b3:MOV RAX,qword ptr [RBP + -0x20]
	000023b7:MOVZX EAX,word ptr [RAX + 0x48]
	000023bb:CWDE
	000023bc:AND EAX,0x40
	000023bf:TEST EAX,EAX
	000023c1:JZ 0x000023f7
	000023c3:MOV RAX,qword ptr [RBP + -0x20]
	000023c7:MOV RAX,qword ptr [RAX + 0x10]
	000023cb:MOV RDI,RAX
	000023ce:CALL 0x000012c0
	000023d3:MOV qword ptr [RBP + -0x28],RAX
	000023d7:MOV RDX,qword ptr [RBP + -0x28]
	000023db:MOV RAX,qword ptr [RBP + -0x48]
	000023df:ADD RDX,RAX
	000023e2:MOV RAX,qword ptr [RBP + -0x20]
	000023e6:MOV RAX,qword ptr [RAX + 0x10]
	000023ea:MOV RSI,RDX
	000023ed:MOV RDI,RAX
	000023f0:CALL 0x000013b0
END_OF_LINE
----------------------------------------------
37: xml_00->txt = pcVar2;
	00002435:MOV qword ptr [RDX + 0x10],RAX
END_OF_LINE
----------------------------------------------
38: strcpy(xml_00->txt + l,__s);
	0000243d:MOV RDX,qword ptr [RAX + 0x10]
	00002441:MOV RAX,qword ptr [RBP + -0x28]
	00002445:ADD RDX,RAX
	00002448:MOV RAX,qword ptr [RBP + -0x40]
	0000244c:MOV RSI,RAX
	0000244f:MOV RDI,RDX
	00002452:CALL 0x00001280
END_OF_LINE
----------------------------------------------
39: if (__s != s) {
	0000245b:CMP RAX,qword ptr [RBP + -0x18]
	0000245f:JZ 0x0000246d
END_OF_LINE
----------------------------------------------
40: free(__s);
	00002468:CALL 0x00001250
END_OF_LINE
----------------------------------------------
43: if (s != xml_00->txt) {
	00002471:MOV RAX,qword ptr [RAX + 0x10]
	00002475:CMP qword ptr [RBP + -0x18],RAX
	00002479:JZ 0x0000248f
END_OF_LINE
----------------------------------------------
44: ezxml_set_flag(xml_00,0x40);
	00002487:CALL 0x0000676d
END_OF_LINE
----------------------------------------------
47: return;
	00002494:RET
END_OF_LINE



Function: ezxml_close_tag
----------------------------------------------
11: if (((root->cur != (ezxml_t.conflict)0x0) && (root->cur->name != (char *)0x0)) &&
	000024b1:MOV RAX,qword ptr [RAX + 0x50]
	000024b5:TEST RAX,RAX
	000024b8:JZ 0x000024e8
	000024ba:MOV RAX,qword ptr [RBP + -0x8]
	000024be:MOV RAX,qword ptr [RAX + 0x50]
	000024c2:MOV RAX,qword ptr [RAX]
	000024c5:TEST RAX,RAX
	000024c8:JZ 0x000024e8
	000024ca:MOV RAX,qword ptr [RBP + -0x8]
	000024ce:MOV RAX,qword ptr [RAX + 0x50]
	000024d2:MOV RDX,qword ptr [RAX]
	000024d5:MOV RAX,qword ptr [RBP + -0x10]
	000024d9:MOV RSI,RDX
	000024dc:MOV RDI,RAX
	000024df:CALL 0x00001360
	000024e4:TEST EAX,EAX
	000024e6:JZ 0x0000250d
END_OF_LINE
----------------------------------------------
12: (iVar1 = strcmp(name,root->cur->name), iVar1 == 0)) {
	000024ce:MOV RAX,qword ptr [RAX + 0x50]
	000024d2:MOV RDX,qword ptr [RAX]
	000024d5:MOV RAX,qword ptr [RBP + -0x10]
	000024d9:MOV RSI,RDX
	000024dc:MOV RDI,RAX
	000024df:CALL 0x00001360
	000024e4:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
13: root->cur = root->cur->parent;
	00002511:MOV RAX,qword ptr [RAX + 0x50]
	00002515:MOV RDX,qword ptr [RAX + 0x40]
	00002519:MOV RAX,qword ptr [RBP + -0x8]
	0000251d:MOV qword ptr [RAX + 0x50],RDX
END_OF_LINE
----------------------------------------------
14: return (ezxml_t.conflict)0x0;
	00002526:LEAVE
	00002527:RET
END_OF_LINE
----------------------------------------------
16: peVar2 = ezxml_err(root,s,"unexpected closing tag </%s>",name);
	00002506:CALL 0x00001af0
END_OF_LINE
----------------------------------------------
17: return peVar2;
	00002526:LEAVE
	00002527:RET
END_OF_LINE



Function: ezxml_ent_ok
----------------------------------------------
12: s_local = s;
	00002540:JMP 0x00002547
END_OF_LINE
----------------------------------------------
14: for (; (*s_local != '\0' && (*s_local != '&')); s_local = s_local + 1) {
	00002542:ADD qword ptr [RBP + -0x20],0x1
	00002547:MOV RAX,qword ptr [RBP + -0x20]
	0000254b:MOVZX EAX,byte ptr [RAX]
	0000254e:TEST AL,AL
	00002550:JZ 0x0000255d
	00002552:MOV RAX,qword ptr [RBP + -0x20]
	00002556:MOVZX EAX,byte ptr [RAX]
	00002559:CMP AL,0x26
	0000255b:JNZ 0x00002542
END_OF_LINE
----------------------------------------------
16: if (*s_local == '\0') {
	00002561:MOVZX EAX,byte ptr [RAX]
	00002564:TEST AL,AL
	00002566:JNZ 0x00002572
END_OF_LINE
----------------------------------------------
17: return 1;
	0000267f:RET
END_OF_LINE
----------------------------------------------
19: sVar2 = strlen(name);
	00002579:CALL 0x000012c0
END_OF_LINE
----------------------------------------------
20: iVar1 = strncmp(s_local + 1,name,sVar2);
	00002585:LEA RCX,[RAX + 0x1]
	00002589:MOV RAX,qword ptr [RBP + -0x18]
	0000258d:MOV RSI,RAX
	00002590:MOV RDI,RCX
	00002593:CALL 0x00001270
END_OF_LINE
----------------------------------------------
21: if (iVar1 == 0) {
	00002598:TEST EAX,EAX
	0000259a:JNZ 0x000025a6
END_OF_LINE
----------------------------------------------
22: return 0;
	0000267f:RET
END_OF_LINE
----------------------------------------------
24: for (i = 0; ent[i] != (char *)0x0; i = i + 2) {
	000025a6:MOV dword ptr [RBP + -0x4],0x0
	000025ad:JMP 0x000025b3
	000025af:ADD dword ptr [RBP + -0x4],0x2
	000025b3:MOV EAX,dword ptr [RBP + -0x4]
	000025b6:CDQE
	000025b8:LEA RDX,[RAX*0x8]
	000025c0:MOV RAX,qword ptr [RBP + -0x28]
	000025c4:ADD RAX,RDX
	000025c7:MOV RAX,qword ptr [RAX]
	000025ca:TEST RAX,RAX
	000025cd:JZ 0x0000261f
END_OF_LINE
----------------------------------------------
25: sVar2 = strlen(ent[i]);
	000025d2:CDQE
	000025d4:LEA RDX,[RAX*0x8]
	000025dc:MOV RAX,qword ptr [RBP + -0x28]
	000025e0:ADD RAX,RDX
	000025e3:MOV RAX,qword ptr [RAX]
	000025e6:MOV RDI,RAX
	000025e9:CALL 0x000012c0
END_OF_LINE
----------------------------------------------
26: iVar1 = strncmp(ent[i],s_local + 1,sVar2);
	000025f5:LEA RCX,[RAX + 0x1]
	000025f9:MOV EAX,dword ptr [RBP + -0x4]
	000025fc:CDQE
	000025fe:LEA RSI,[RAX*0x8]
	00002606:MOV RAX,qword ptr [RBP + -0x28]
	0000260a:ADD RAX,RSI
	0000260d:MOV RAX,qword ptr [RAX]
	00002610:MOV RSI,RCX
	00002613:MOV RDI,RAX
	00002616:CALL 0x00001270
END_OF_LINE
----------------------------------------------
27: if (iVar1 == 0) break;
	0000261b:TEST EAX,EAX
	0000261d:JNZ 0x000025af
END_OF_LINE
----------------------------------------------
29: if ((ent[i] != (char *)0x0) && (iVar1 = ezxml_ent_ok(name,ent[(long)i + 1],ent), iVar1 == 0)) {
	00002622:CDQE
	00002624:LEA RDX,[RAX*0x8]
	0000262c:MOV RAX,qword ptr [RBP + -0x28]
	00002630:ADD RAX,RDX
	00002633:MOV RAX,qword ptr [RAX]
	00002636:TEST RAX,RAX
	00002639:JZ 0x00002674
	0000263b:MOV EAX,dword ptr [RBP + -0x4]
	0000263e:CDQE
	00002640:ADD RAX,0x1
	00002644:LEA RDX,[RAX*0x8]
	0000264c:MOV RAX,qword ptr [RBP + -0x28]
	00002650:ADD RAX,RDX
	00002653:MOV RCX,qword ptr [RAX]
	00002656:MOV RDX,qword ptr [RBP + -0x28]
	0000265a:MOV RAX,qword ptr [RBP + -0x18]
	0000265e:MOV RSI,RCX
	00002661:MOV RDI,RAX
	00002664:CALL 0x00002528
	00002669:TEST EAX,EAX
	0000266b:JNZ 0x00002674
END_OF_LINE
----------------------------------------------
30: return 0;
	0000267f:RET
END_OF_LINE
----------------------------------------------
32: s_local = s_local + 1;
	00002674:ADD qword ptr [RBP + -0x20],0x1
END_OF_LINE
----------------------------------------------
33: } while( true );
	00002679:JMP 0x00002547
END_OF_LINE



Function: ezxml_proc_inst
----------------------------------------------
17: i = 0;
	00002699:MOV dword ptr [RBP + -0x20],0x0
END_OF_LINE
----------------------------------------------
18: j = 1;
	000026a0:MOV dword ptr [RBP + -0x1c],0x1
END_OF_LINE
----------------------------------------------
19: s[len] = '\0';
	000026b7:ADD RAX,RDX
	000026ba:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
20: sVar2 = strcspn(s,"\t\r\n ");
	000026ce:CALL 0x00001340
END_OF_LINE
----------------------------------------------
21: s_local = s + sVar2;
	000026d3:ADD qword ptr [RBP + -0x30],RAX
END_OF_LINE
----------------------------------------------
22: if (*s_local != '\0') {
	000026db:MOVZX EAX,byte ptr [RAX]
	000026de:TEST AL,AL
	000026e0:JZ 0x0000270b
END_OF_LINE
----------------------------------------------
23: *s_local = '\0';
	000026e6:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
24: sVar2 = strspn(s_local + 1,"\t\r\n ");
	000026ed:ADD RAX,0x1
	000026f1:LEA RDX,[0x7043]
	000026f8:MOV RSI,RDX
	000026fb:MOV RDI,RAX
	000026fe:CALL 0x00001330
END_OF_LINE
----------------------------------------------
25: s_local = s_local + sVar2 + 1;
	00002703:ADD RAX,0x1
	00002707:ADD qword ptr [RBP + -0x30],RAX
END_OF_LINE
----------------------------------------------
27: iVar1 = strcmp(s,"xml");
	0000271c:CALL 0x00001360
END_OF_LINE
----------------------------------------------
28: if (iVar1 == 0) {
	00002721:TEST EAX,EAX
	00002723:JNZ 0x000027a0
END_OF_LINE
----------------------------------------------
29: pcVar3 = strstr(s_local,"standalone");
	00002736:CALL 0x00001440
END_OF_LINE
----------------------------------------------
30: if (pcVar3 != (char *)0x0) {
	0000273f:CMP qword ptr [RBP + -0x30],0x0
	00002744:JZ 0x00002afc
END_OF_LINE
----------------------------------------------
31: sVar2 = strspn(pcVar3 + 10,"\t\r\n =\'\"");
	0000274e:ADD RAX,0xa
	00002752:LEA RDX,[0x7057]
	00002759:MOV RSI,RDX
	0000275c:MOV RDI,RAX
	0000275f:CALL 0x00001330
END_OF_LINE
----------------------------------------------
32: iVar1 = strncmp(pcVar3 + sVar2 + 10,"yes",3);
	00002764:LEA RDX,[RAX + 0xa]
	00002768:MOV RAX,qword ptr [RBP + -0x30]
	0000276c:ADD RAX,RDX
	0000276f:MOV EDX,0x3
	00002774:LEA RCX,[0x705f]
	0000277b:MOV RSI,RCX
	0000277e:MOV RDI,RAX
	00002781:CALL 0x00001270
END_OF_LINE
----------------------------------------------
33: if (iVar1 == 0) {
	00002786:TEST EAX,EAX
	00002788:JNZ 0x00002afc
END_OF_LINE
----------------------------------------------
34: root->standalone = 1;
	00002792:MOV word ptr [RAX + 0x98],0x1
END_OF_LINE
----------------------------------------------
39: if (*root->pi == (char **)0x0) {
	000027a4:MOV RAX,qword ptr [RAX + 0x90]
	000027ab:MOV RAX,qword ptr [RAX]
	000027ae:TEST RAX,RAX
	000027b1:JNZ 0x000027e3
END_OF_LINE
----------------------------------------------
40: pppcVar4 = (char ***)malloc(8);
	000027b8:CALL 0x000013a0
END_OF_LINE
----------------------------------------------
41: root->pi = pppcVar4;
	000027c4:MOV qword ptr [RAX + 0x90],RDX
END_OF_LINE
----------------------------------------------
42: *root->pi = (char **)0x0;
	000027cf:MOV RAX,qword ptr [RAX + 0x90]
	000027d6:MOV qword ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
44: for (; root->pi[i] != (char **)0x0; i = i + 1) {
	000027df:ADD dword ptr [RBP + -0x20],0x1
	000027e3:MOV RAX,qword ptr [RBP + -0x28]
	000027e7:MOV RDX,qword ptr [RAX + 0x90]
	000027ee:MOV EAX,dword ptr [RBP + -0x20]
	000027f1:CDQE
	000027f3:SHL RAX,0x3
	000027f7:ADD RAX,RDX
	000027fa:MOV RAX,qword ptr [RAX]
	000027fd:TEST RAX,RAX
	00002800:JZ 0x00002832
END_OF_LINE
----------------------------------------------
45: iVar1 = strcmp(s,*root->pi[i]);
	00002806:MOV RDX,qword ptr [RAX + 0x90]
	0000280d:MOV EAX,dword ptr [RBP + -0x20]
	00002810:CDQE
	00002812:SHL RAX,0x3
	00002816:ADD RAX,RDX
	00002819:MOV RAX,qword ptr [RAX]
	0000281c:MOV RDX,qword ptr [RAX]
	0000281f:MOV RAX,qword ptr [RBP + -0x18]
	00002823:MOV RSI,RDX
	00002826:MOV RDI,RAX
	00002829:CALL 0x00001360
END_OF_LINE
----------------------------------------------
46: if (iVar1 == 0) break;
	0000282e:TEST EAX,EAX
	00002830:JNZ 0x000027df
END_OF_LINE
----------------------------------------------
48: if (root->pi[i] == (char **)0x0) {
	00002836:MOV RDX,qword ptr [RAX + 0x90]
	0000283d:MOV EAX,dword ptr [RBP + -0x20]
	00002840:CDQE
	00002842:SHL RAX,0x3
	00002846:ADD RAX,RDX
	00002849:MOV RAX,qword ptr [RAX]
	0000284c:TEST RAX,RAX
	0000284f:JNZ 0x00002949
END_OF_LINE
----------------------------------------------
49: pppcVar4 = (char ***)realloc(root->pi,(long)(i + 2) * 8);
	00002858:ADD EAX,0x2
	0000285b:CDQE
	0000285d:LEA RDX,[RAX*0x8]
	00002865:MOV RAX,qword ptr [RBP + -0x28]
	00002869:MOV RAX,qword ptr [RAX + 0x90]
	00002870:MOV RSI,RDX
	00002873:MOV RDI,RAX
	00002876:CALL 0x000013b0
END_OF_LINE
----------------------------------------------
50: root->pi = pppcVar4;
	0000287f:MOV qword ptr [RDX + 0x90],RAX
END_OF_LINE
----------------------------------------------
51: pppcVar4 = root->pi;
	0000288a:MOV RDX,qword ptr [RAX + 0x90]
END_OF_LINE
----------------------------------------------
52: ppcVar5 = (char **)malloc(0x18);
	000028a3:CALL 0x000013a0
END_OF_LINE
----------------------------------------------
53: pppcVar4[i] = ppcVar5;
	00002894:CDQE
	00002896:SHL RAX,0x3
	0000289a:LEA RBX,[RDX + RAX*0x1]
	0000289e:MOV EDI,0x18
	000028a3:CALL 0x000013a0
	000028a8:MOV qword ptr [RBX],RAX
END_OF_LINE
----------------------------------------------
54: *root->pi[i] = s;
	000028af:MOV RDX,qword ptr [RAX + 0x90]
	000028b6:MOV EAX,dword ptr [RBP + -0x20]
	000028b9:CDQE
	000028bb:SHL RAX,0x3
	000028bf:ADD RAX,RDX
	000028c2:MOV RAX,qword ptr [RAX]
	000028c5:MOV RDX,qword ptr [RBP + -0x18]
	000028c9:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
55: root->pi[(long)i + 1] = (char **)0x0;
	000028d0:MOV RDX,qword ptr [RAX + 0x90]
	000028d7:MOV EAX,dword ptr [RBP + -0x20]
	000028da:CDQE
	000028dc:ADD RAX,0x1
	000028e0:SHL RAX,0x3
	000028e4:ADD RAX,RDX
	000028e7:MOV qword ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
56: root->pi[i][1] = (char *)0x0;
	000028f2:MOV RDX,qword ptr [RAX + 0x90]
	000028f9:MOV EAX,dword ptr [RBP + -0x20]
	000028fc:CDQE
	000028fe:SHL RAX,0x3
	00002902:ADD RAX,RDX
	00002905:MOV RAX,qword ptr [RAX]
	00002908:ADD RAX,0x8
	0000290c:MOV qword ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
57: ppcVar5 = root->pi[i];
	00002917:MOV RDX,qword ptr [RAX + 0x90]
	0000291e:MOV EAX,dword ptr [RBP + -0x20]
	00002921:CDQE
	00002923:SHL RAX,0x3
	00002927:ADD RAX,RDX
	0000292a:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
58: pcVar3 = strdup("");
	0000293b:CALL 0x00001420
END_OF_LINE
----------------------------------------------
59: ppcVar5[2] = pcVar3;
	0000292d:LEA RBX,[RAX + 0x10]
	00002931:LEA RAX,[0x7063]
	00002938:MOV RDI,RAX
	0000293b:CALL 0x00001420
	00002940:MOV qword ptr [RBX],RAX
END_OF_LINE
----------------------------------------------
61: for (; root->pi[i][j] != (char *)0x0; j = j + 1) {
	00002945:ADD dword ptr [RBP + -0x1c],0x1
	00002949:MOV RAX,qword ptr [RBP + -0x28]
	0000294d:MOV RDX,qword ptr [RAX + 0x90]
	00002954:MOV EAX,dword ptr [RBP + -0x20]
	00002957:CDQE
	00002959:SHL RAX,0x3
	0000295d:ADD RAX,RDX
	00002960:MOV RDX,qword ptr [RAX]
	00002963:MOV EAX,dword ptr [RBP + -0x1c]
	00002966:CDQE
	00002968:SHL RAX,0x3
	0000296c:ADD RAX,RDX
	0000296f:MOV RAX,qword ptr [RAX]
	00002972:TEST RAX,RAX
	00002975:JNZ 0x00002945
END_OF_LINE
----------------------------------------------
63: pppcVar4 = root->pi;
	000029a5:MOV RSI,qword ptr [RCX + 0x90]
END_OF_LINE
----------------------------------------------
64: ppcVar5 = (char **)realloc(root->pi[i],(long)(j + 3) * 8);
	0000297a:ADD EAX,0x3
	0000297d:CDQE
	0000297f:LEA RDX,[RAX*0x8]
	00002987:MOV RAX,qword ptr [RBP + -0x28]
	0000298b:MOV RCX,qword ptr [RAX + 0x90]
	00002992:MOV EAX,dword ptr [RBP + -0x20]
	00002995:CDQE
	00002997:SHL RAX,0x3
	0000299b:ADD RAX,RCX
	0000299e:MOV RAX,qword ptr [RAX]
	000029a1:MOV RCX,qword ptr [RBP + -0x28]
	000029a5:MOV RSI,qword ptr [RCX + 0x90]
	000029ac:MOV ECX,dword ptr [RBP + -0x20]
	000029af:MOVSXD RCX,ECX
	000029b2:SHL RCX,0x3
	000029b6:LEA RBX,[RSI + RCX*0x1]
	000029ba:MOV RSI,RDX
	000029bd:MOV RDI,RAX
	000029c0:CALL 0x000013b0
END_OF_LINE
----------------------------------------------
65: pppcVar4[i] = ppcVar5;
	000029af:MOVSXD RCX,ECX
	000029b2:SHL RCX,0x3
	000029b6:LEA RBX,[RSI + RCX*0x1]
	000029ba:MOV RSI,RDX
	000029bd:MOV RDI,RAX
	000029c0:CALL 0x000013b0
	000029c5:MOV qword ptr [RBX],RAX
END_OF_LINE
----------------------------------------------
66: ppcVar5 = root->pi[i];
	00002a02:MOV RSI,qword ptr [RCX + 0x90]
	00002a09:MOV ECX,dword ptr [RBP + -0x20]
	00002a0c:MOVSXD RCX,ECX
	00002a0f:SHL RCX,0x3
	00002a13:ADD RCX,RSI
	00002a16:MOV RSI,qword ptr [RCX]
END_OF_LINE
----------------------------------------------
67: pcVar3 = (char *)realloc(root->pi[i][(long)j + 1],(long)(j + 1));
	000029cb:ADD EAX,0x1
	000029ce:MOVSXD RDX,EAX
	000029d1:MOV RAX,qword ptr [RBP + -0x28]
	000029d5:MOV RCX,qword ptr [RAX + 0x90]
	000029dc:MOV EAX,dword ptr [RBP + -0x20]
	000029df:CDQE
	000029e1:SHL RAX,0x3
	000029e5:ADD RAX,RCX
	000029e8:MOV RCX,qword ptr [RAX]
	000029eb:MOV EAX,dword ptr [RBP + -0x1c]
	000029ee:CDQE
	000029f0:ADD RAX,0x1
	000029f4:SHL RAX,0x3
	000029f8:ADD RAX,RCX
	000029fb:MOV RAX,qword ptr [RAX]
	000029fe:MOV RCX,qword ptr [RBP + -0x28]
	00002a02:MOV RSI,qword ptr [RCX + 0x90]
	00002a09:MOV ECX,dword ptr [RBP + -0x20]
	00002a0c:MOVSXD RCX,ECX
	00002a0f:SHL RCX,0x3
	00002a13:ADD RCX,RSI
	00002a16:MOV RSI,qword ptr [RCX]
	00002a19:MOV ECX,dword ptr [RBP + -0x1c]
	00002a1c:MOVSXD RCX,ECX
	00002a1f:ADD RCX,0x2
	00002a23:SHL RCX,0x3
	00002a27:LEA RBX,[RSI + RCX*0x1]
	00002a2b:MOV RSI,RDX
	00002a2e:MOV RDI,RAX
	00002a31:CALL 0x000013b0
END_OF_LINE
----------------------------------------------
68: ppcVar5[(long)j + 2] = pcVar3;
	00002a1c:MOVSXD RCX,ECX
	00002a1f:ADD RCX,0x2
	00002a23:SHL RCX,0x3
	00002a27:LEA RBX,[RSI + RCX*0x1]
	00002a2b:MOV RSI,RDX
	00002a2e:MOV RDI,RAX
	00002a31:CALL 0x000013b0
	00002a36:MOV qword ptr [RBX],RAX
END_OF_LINE
----------------------------------------------
69: if ((root->xml).name == (char *)0x0) {
	00002a3d:MOV RAX,qword ptr [RAX]
	00002a40:TEST RAX,RAX
	00002a43:JZ 0x00002a4e
END_OF_LINE
----------------------------------------------
70: pcVar3 = "<";
	00002a4e:LEA RAX,[0x7066]
END_OF_LINE
----------------------------------------------
73: pcVar3 = ">";
	00002a45:LEA RAX,[0x7064]
END_OF_LINE
----------------------------------------------
75: strcpy(root->pi[i][(long)j + 2] + (long)j + -1,pcVar3);
	00002a59:MOV RCX,qword ptr [RDX + 0x90]
	00002a60:MOV EDX,dword ptr [RBP + -0x20]
	00002a63:MOVSXD RDX,EDX
	00002a66:SHL RDX,0x3
	00002a6a:ADD RDX,RCX
	00002a6d:MOV RCX,qword ptr [RDX]
	00002a70:MOV EDX,dword ptr [RBP + -0x1c]
	00002a73:MOVSXD RDX,EDX
	00002a76:ADD RDX,0x2
	00002a7a:SHL RDX,0x3
	00002a7e:ADD RDX,RCX
	00002a81:MOV RCX,qword ptr [RDX]
	00002a84:MOV EDX,dword ptr [RBP + -0x1c]
	00002a87:MOVSXD RDX,EDX
	00002a8a:SUB RDX,0x1
	00002a8e:ADD RDX,RCX
	00002a91:MOV RSI,RAX
	00002a94:MOV RDI,RDX
	00002a97:CALL 0x00001280
END_OF_LINE
----------------------------------------------
76: root->pi[i][(long)j + 1] = (char *)0x0;
	00002aa0:MOV RDX,qword ptr [RAX + 0x90]
	00002aa7:MOV EAX,dword ptr [RBP + -0x20]
	00002aaa:CDQE
	00002aac:SHL RAX,0x3
	00002ab0:ADD RAX,RDX
	00002ab3:MOV RDX,qword ptr [RAX]
	00002ab6:MOV EAX,dword ptr [RBP + -0x1c]
	00002ab9:CDQE
	00002abb:ADD RAX,0x1
	00002abf:SHL RAX,0x3
	00002ac3:ADD RAX,RDX
	00002ac6:MOV qword ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
77: root->pi[i][j] = s_local;
	00002ad1:MOV RDX,qword ptr [RAX + 0x90]
	00002ad8:MOV EAX,dword ptr [RBP + -0x20]
	00002adb:CDQE
	00002add:SHL RAX,0x3
	00002ae1:ADD RAX,RDX
	00002ae4:MOV RDX,qword ptr [RAX]
	00002ae7:MOV EAX,dword ptr [RBP + -0x1c]
	00002aea:CDQE
	00002aec:SHL RAX,0x3
	00002af0:ADD RDX,RAX
	00002af3:MOV RAX,qword ptr [RBP + -0x30]
	00002af7:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
79: return;
	00002b02:RET
END_OF_LINE



Function: ezxml_internal_dtd
----------------------------------------------
27: n = (char *)0x0;
	00002b1c:MOV qword ptr [RBP + -0x40],0x0
END_OF_LINE
----------------------------------------------
28: pe = (char **)malloc(8);
	00002b29:CALL 0x000013a0
END_OF_LINE
----------------------------------------------
29: *pe = EZXML_NIL[0];
	00002b35:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
30: s[len] = '\0';
	00002b44:ADD RAX,RDX
	00002b47:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
31: s_local = s;
	00002b4a:JMP 0x00003588
END_OF_LINE
----------------------------------------------
32: LAB_00003588:
	00003588:CMP qword ptr [RBP + -0x60],0x0
END_OF_LINE
----------------------------------------------
34: if (s_local == (char *)0x0) goto LAB_00003599;
	00003588:CMP qword ptr [RBP + -0x60],0x0
	0000358d:JNZ 0x00002b54
	00003593:JMP 0x00003599
	00003595:NOP
	00003596:JMP 0x00003599
	00003598:NOP
	00003599:MOV RAX,qword ptr [RBP + -0x30]
END_OF_LINE
----------------------------------------------
35: for (; ((*s_local != '\0' && (*s_local != '<')) && (*s_local != '%')); s_local = s_local + 1) {
	00002b4f:ADD qword ptr [RBP + -0x60],0x1
	00002b54:MOV RAX,qword ptr [RBP + -0x60]
	00002b58:MOVZX EAX,byte ptr [RAX]
	00002b5b:TEST AL,AL
	00002b5d:JZ 0x00002b75
	00002b5f:MOV RAX,qword ptr [RBP + -0x60]
	00002b63:MOVZX EAX,byte ptr [RAX]
	00002b66:CMP AL,0x3c
	00002b68:JZ 0x00002b75
	00002b6a:MOV RAX,qword ptr [RBP + -0x60]
	00002b6e:MOVZX EAX,byte ptr [RAX]
	00002b71:CMP AL,0x25
	00002b73:JNZ 0x00002b4f
END_OF_LINE
----------------------------------------------
37: if (*s_local == '\0') goto LAB_00003599;
	00002b79:MOVZX EAX,byte ptr [RAX]
	00002b7c:TEST AL,AL
	00002b7e:JZ 0x00003595
	00002b84:MOV RAX,qword ptr [RBP + -0x60]
	00002b88:MOV EDX,0x8
	00002b8d:LEA RCX,[0x7068]
	00002b94:MOV RSI,RCX
	00002b97:MOV RDI,RAX
	00002b9a:CALL 0x00001270
	00002b9f:TEST EAX,EAX
	00002ba1:JNZ 0x00002e54
	00002ba7:MOV RAX,qword ptr [RBP + -0x60]
	00002bab:ADD RAX,0x8
	00002baf:LEA RDX,[0x7043]
	00002bb6:MOV RSI,RDX
	00002bb9:MOV RDI,RAX
	00002bbc:CALL 0x00001330
	00002bc1:ADD RAX,0x8
	00002bc5:ADD qword ptr [RBP + -0x60],RAX
	00002bc9:MOV RAX,qword ptr [RBP + -0x60]
	00002bcd:MOV qword ptr [RBP + -0x28],RAX
	00002bd1:MOV RAX,qword ptr [RBP + -0x60]
	00002bd5:LEA RDX,[0x7071]
	00002bdc:MOV RSI,RDX
	00002bdf:MOV RDI,RAX
	00002be2:CALL 0x00001330
	00002be7:MOV RDX,qword ptr [RBP + -0x60]
	00002beb:ADD RAX,RDX
	00002bee:MOV qword ptr [RBP + -0x40],RAX
	00002bf2:MOV RAX,qword ptr [RBP + -0x40]
	00002bf6:LEA RDX,[0x7043]
	00002bfd:MOV RSI,RDX
	00002c00:MOV RDI,RAX
	00002c03:CALL 0x00001340
	00002c08:MOV RDX,qword ptr [RBP + -0x40]
	00002c0c:ADD RAX,RDX
	00002c0f:MOV qword ptr [RBP + -0x60],RAX
	00002c13:MOV RAX,qword ptr [RBP + -0x60]
	00002c17:MOV byte ptr [RAX],0x3b
	00002c1a:MOV RAX,qword ptr [RBP + -0x60]
	00002c1e:ADD RAX,0x1
	00002c22:LEA RDX,[0x7043]
	00002c29:MOV RSI,RDX
	00002c2c:MOV RDI,RAX
	00002c2f:CALL 0x00001330
	00002c34:LEA RDX,[RAX + 0x1]
	00002c38:MOV RAX,qword ptr [RBP + -0x60]
	00002c3c:ADD RAX,RDX
	00002c3f:MOV qword ptr [RBP + -0x38],RAX
	00002c43:MOV RAX,qword ptr [RBP + -0x38]
	00002c47:LEA RDX,[RAX + 0x1]
	00002c4b:MOV qword ptr [RBP + -0x38],RDX
	00002c4f:MOVZX EAX,byte ptr [RAX]
	00002c52:MOV byte ptr [RBP + -0x49],AL
	00002c55:CMP byte ptr [RBP + -0x49],0x22
	00002c59:JZ 0x00002c7b
	00002c5b:CMP byte ptr [RBP + -0x49],0x27
	00002c5f:JZ 0x00002c7b
	00002c61:MOV RAX,qword ptr [RBP + -0x60]
	00002c65:MOV ESI,0x3e
	00002c6a:MOV RDI,RAX
	00002c6d:CALL 0x000012f0
	00002c72:MOV qword ptr [RBP + -0x60],RAX
	00002c76:JMP 0x00003588
	00002c7b:MOV dword ptr [RBP + -0x48],0x0
	00002c82:MOV RAX,qword ptr [RBP + -0x28]
	00002c86:MOVZX EAX,byte ptr [RAX]
	00002c89:CMP AL,0x25
	00002c8b:JZ 0x00002c9a
	00002c8d:MOV RAX,qword ptr [RBP + -0x58]
	00002c91:MOV RAX,qword ptr [RAX + 0x80]
	00002c98:JMP 0x00002c9e
	00002c9a:MOV RAX,qword ptr [RBP + -0x30]
	00002c9e:MOV qword ptr [RBP + -0x18],RAX
	00002ca2:JMP 0x00002ca8
	00002ca4:ADD dword ptr [RBP + -0x48],0x1
	00002ca8:MOV EAX,dword ptr [RBP + -0x48]
	00002cab:CDQE
	00002cad:LEA RDX,[RAX*0x8]
	00002cb5:MOV RAX,qword ptr [RBP + -0x18]
	00002cb9:ADD RAX,RDX
	00002cbc:MOV RAX,qword ptr [RAX]
	00002cbf:TEST RAX,RAX
	00002cc2:JNZ 0x00002ca4
	00002cc4:MOV EAX,dword ptr [RBP + -0x48]
	00002cc7:ADD EAX,0x3
	00002cca:CDQE
	00002ccc:LEA RDX,[RAX*0x8]
	00002cd4:MOV RAX,qword ptr [RBP + -0x18]
	00002cd8:MOV RSI,RDX
	00002cdb:MOV RDI,RAX
	00002cde:CALL 0x000013b0
	00002ce3:MOV qword ptr [RBP + -0x18],RAX
	00002ce7:MOV RAX,qword ptr [RBP + -0x28]
	00002ceb:MOVZX EAX,byte ptr [RAX]
	00002cee:CMP AL,0x25
	00002cf0:JNZ 0x00002cfc
	00002cf2:MOV RAX,qword ptr [RBP + -0x18]
	00002cf6:MOV qword ptr [RBP + -0x30],RAX
	00002cfa:JMP 0x00002d0b
	00002cfc:MOV RAX,qword ptr [RBP + -0x58]
	00002d00:MOV RDX,qword ptr [RBP + -0x18]
	00002d04:MOV qword ptr [RAX + 0x80],RDX
	00002d0b:ADD qword ptr [RBP + -0x60],0x1
	00002d10:MOV RAX,qword ptr [RBP + -0x60]
	00002d14:MOV byte ptr [RAX],0x0
	00002d17:MOVSX EDX,byte ptr [RBP + -0x49]
	00002d1b:MOV RAX,qword ptr [RBP + -0x38]
	00002d1f:MOV ESI,EDX
	00002d21:MOV RDI,RAX
	00002d24:CALL 0x000012f0
	00002d29:MOV qword ptr [RBP + -0x60],RAX
	00002d2d:CMP qword ptr [RBP + -0x60],0x0
	00002d32:JZ 0x00002d43
	00002d34:MOV RAX,qword ptr [RBP + -0x60]
	00002d38:LEA RDX,[RAX + 0x1]
	00002d3c:MOV qword ptr [RBP + -0x60],RDX
	00002d40:MOV byte ptr [RAX],0x0
	00002d43:MOV EAX,dword ptr [RBP + -0x48]
	00002d46:CDQE
	00002d48:ADD RAX,0x1
	00002d4c:LEA RDX,[RAX*0x8]
	00002d54:MOV RAX,qword ptr [RBP + -0x18]
	00002d58:LEA RBX,[RDX + RAX*0x1]
	00002d5c:MOV RCX,qword ptr [RBP + -0x30]
	00002d60:MOV RAX,qword ptr [RBP + -0x38]
	00002d64:MOV EDX,0x25
	00002d69:MOV RSI,RCX
	00002d6c:MOV RDI,RAX
	00002d6f:CALL 0x00001c55
	00002d74:MOV qword ptr [RBX],RAX
	00002d77:MOV EAX,dword ptr [RBP + -0x48]
	00002d7a:CDQE
	00002d7c:ADD RAX,0x2
	00002d80:LEA RDX,[RAX*0x8]
	00002d88:MOV RAX,qword ptr [RBP + -0x18]
	00002d8c:ADD RAX,RDX
	00002d8f:MOV qword ptr [RAX],0x0
	00002d96:MOV EAX,dword ptr [RBP + -0x48]
	00002d99:CDQE
	00002d9b:ADD RAX,0x1
	00002d9f:LEA RDX,[RAX*0x8]
	00002da7:MOV RAX,qword ptr [RBP + -0x18]
	00002dab:ADD RAX,RDX
	00002dae:MOV RCX,qword ptr [RAX]
	00002db1:MOV RDX,qword ptr [RBP + -0x18]
	00002db5:MOV RAX,qword ptr [RBP + -0x40]
	00002db9:MOV RSI,RCX
	00002dbc:MOV RDI,RAX
	00002dbf:CALL 0x00002528
	00002dc4:TEST EAX,EAX
	00002dc6:JNZ 0x00002e34
	00002dc8:MOV EAX,dword ptr [RBP + -0x48]
	00002dcb:CDQE
	00002dcd:ADD RAX,0x1
	00002dd1:LEA RDX,[RAX*0x8]
	00002dd9:MOV RAX,qword ptr [RBP + -0x18]
	00002ddd:ADD RAX,RDX
	00002de0:MOV RAX,qword ptr [RAX]
	00002de3:CMP qword ptr [RBP + -0x38],RAX
	00002de7:JZ 0x00002e0c
	00002de9:MOV EAX,dword ptr [RBP + -0x48]
	00002dec:CDQE
	00002dee:ADD RAX,0x1
	00002df2:LEA RDX,[RAX*0x8]
	00002dfa:MOV RAX,qword ptr [RBP + -0x18]
	00002dfe:ADD RAX,RDX
	00002e01:MOV RAX,qword ptr [RAX]
	00002e04:MOV RDI,RAX
	00002e07:CALL 0x00001250
	00002e0c:MOV RDX,qword ptr [RBP + -0x40]
	00002e10:MOV RSI,qword ptr [RBP + -0x38]
	00002e14:MOV RAX,qword ptr [RBP + -0x58]
	00002e18:MOV RCX,RDX
	00002e1b:LEA RDX,[0x7078]
	00002e22:MOV RDI,RAX
	00002e25:MOV EAX,0x0
	00002e2a:CALL 0x00001af0
	00002e2f:JMP 0x00003599
	00002e34:MOV EAX,dword ptr [RBP + -0x48]
	00002e37:CDQE
	00002e39:LEA RDX,[RAX*0x8]
	00002e41:MOV RAX,qword ptr [RBP + -0x18]
	00002e45:ADD RDX,RAX
	00002e48:MOV RAX,qword ptr [RBP + -0x40]
	00002e4c:MOV qword ptr [RDX],RAX
	00002e4f:JMP 0x00003588
	00002e54:MOV RAX,qword ptr [RBP + -0x60]
	00002e58:MOV EDX,0x9
	00002e5d:LEA RCX,[0x7098]
	00002e64:MOV RSI,RCX
	00002e67:MOV RDI,RAX
	00002e6a:CALL 0x00001270
	00002e6f:TEST EAX,EAX
	00002e71:JNZ 0x0000348d
	00002e77:MOV RAX,qword ptr [RBP + -0x60]
	00002e7b:ADD RAX,0x9
	00002e7f:LEA RDX,[0x7043]
	00002e86:MOV RSI,RDX
	00002e89:MOV RDI,RAX
	00002e8c:CALL 0x00001330
	00002e91:LEA RDX,[RAX + 0x9]
	00002e95:MOV RAX,qword ptr [RBP + -0x60]
	00002e99:ADD RAX,RDX
	00002e9c:MOV qword ptr [RBP + -0x20],RAX
	00002ea0:MOV RAX,qword ptr [RBP + -0x20]
	00002ea4:MOVZX EAX,byte ptr [RAX]
	00002ea7:TEST AL,AL
	00002ea9:JNZ 0x00002ecf
	00002eab:MOV RCX,qword ptr [RBP + -0x20]
	00002eaf:MOV RAX,qword ptr [RBP + -0x58]
	00002eb3:LEA RDX,[0x70a2]
	00002eba:MOV RSI,RCX
	00002ebd:MOV RDI,RAX
	00002ec0:MOV EAX,0x0
	00002ec5:CALL 0x00001af0
	00002eca:JMP 0x00003599
	00002ecf:MOV RAX,qword ptr [RBP + -0x20]
	00002ed3:LEA RDX,[0x70b5]
	00002eda:MOV RSI,RDX
	00002edd:MOV RDI,RAX
	00002ee0:CALL 0x00001340
	00002ee5:MOV RDX,qword ptr [RBP + -0x20]
	00002ee9:ADD RAX,RDX
	00002eec:MOV qword ptr [RBP + -0x60],RAX
	00002ef0:MOV RAX,qword ptr [RBP + -0x60]
	00002ef4:MOVZX EAX,byte ptr [RAX]
	00002ef7:CMP AL,0x3e
	00002ef9:JNZ 0x00002f00
	00002efb:JMP 0x00003588
	00002f00:MOV RAX,qword ptr [RBP + -0x60]
	00002f04:MOV byte ptr [RAX],0x0
	00002f07:MOV dword ptr [RBP + -0x48],0x0
	00002f0e:JMP 0x00002f14
	00002f10:ADD dword ptr [RBP + -0x48],0x1
	00002f14:MOV RAX,qword ptr [RBP + -0x58]
	00002f18:MOV RDX,qword ptr [RAX + 0x88]
	00002f1f:MOV EAX,dword ptr [RBP + -0x48]
	00002f22:CDQE
	00002f24:SHL RAX,0x3
	00002f28:ADD RAX,RDX
	00002f2b:MOV RAX,qword ptr [RAX]
	00002f2e:TEST RAX,RAX
	00002f31:JZ 0x00003444
	00002f37:MOV RAX,qword ptr [RBP + -0x58]
	00002f3b:MOV RDX,qword ptr [RAX + 0x88]
	00002f42:MOV EAX,dword ptr [RBP + -0x48]
	00002f45:CDQE
	00002f47:SHL RAX,0x3
	00002f4b:ADD RAX,RDX
	00002f4e:MOV RAX,qword ptr [RAX]
	00002f51:MOV RDX,qword ptr [RAX]
	00002f54:MOV RAX,qword ptr [RBP + -0x40]
	00002f58:MOV RSI,RDX
	00002f5b:MOV RDI,RAX
	00002f5e:CALL 0x00001360
	00002f63:TEST EAX,EAX
	00002f65:JNZ 0x00002f10
	00002f67:JMP 0x00003444
	00002f6c:MOV RAX,qword ptr [RBP + -0x40]
	00002f70:LEA RDX,[0x7043]
	00002f77:MOV RSI,RDX
	00002f7a:MOV RDI,RAX
	00002f7d:CALL 0x00001340
	00002f82:MOV RDX,qword ptr [RBP + -0x40]
	00002f86:ADD RAX,RDX
	00002f89:MOV qword ptr [RBP + -0x60],RAX
	00002f8d:MOV RAX,qword ptr [RBP + -0x60]
	00002f91:MOVZX EAX,byte ptr [RAX]
	00002f94:TEST AL,AL
	00002f96:JZ 0x00002fe2
	00002f98:MOV RAX,qword ptr [RBP + -0x60]
	00002f9c:MOV byte ptr [RAX],0x0
	00002f9f:MOV RAX,qword ptr [RBP + -0x60]
	00002fa3:ADD RAX,0x1
	00002fa7:LEA RDX,[0x7043]
	00002fae:MOV RSI,RDX
	00002fb1:MOV RDI,RAX
	00002fb4:CALL 0x00001330
	00002fb9:ADD RAX,0x1
	00002fbd:ADD qword ptr [RBP + -0x60],RAX
	00002fc1:MOV RAX,qword ptr [RBP + -0x60]
	00002fc5:MOV EDX,0x5
	00002fca:LEA RCX,[0x70cf]
	00002fd1:MOV RSI,RCX
	00002fd4:MOV RDI,RAX
	00002fd7:CALL 0x00001270
	00002fdc:TEST EAX,EAX
	00002fde:JZ 0x0000300f
	00002fe0:JMP 0x00003006
	00002fe2:MOV RCX,qword ptr [RBP + -0x20]
	00002fe6:MOV RAX,qword ptr [RBP + -0x58]
	00002fea:LEA RDX,[0x70bb]
	00002ff1:MOV RSI,RCX
	00002ff4:MOV RDI,RAX
	00002ff7:MOV EAX,0x0
	00002ffc:CALL 0x00001af0
	00003001:JMP 0x00003588
	00003006:LEA RAX,[0x70d5]
	0000300d:JMP 0x00003016
	0000300f:LEA RAX,[0x7024]
	00003016:MOV qword ptr [RBP + -0x28],RAX
	0000301a:MOV RAX,qword ptr [RBP + -0x60]
	0000301e:MOV EDX,0x8
	00003023:LEA RCX,[0x70d7]
	0000302a:MOV RSI,RCX
	0000302d:MOV RDI,RAX
	00003030:CALL 0x00001270
	00003035:TEST EAX,EAX
	00003037:JNZ 0x0000305b
	00003039:MOV RAX,qword ptr [RBP + -0x60]
	0000303d:ADD RAX,0x8
	00003041:LEA RDX,[0x7043]
	00003048:MOV RSI,RDX
	0000304b:MOV RDI,RAX
	0000304e:CALL 0x00001330
	00003053:ADD RAX,0x8
	00003057:ADD qword ptr [RBP + -0x60],RAX
	0000305b:MOV RAX,qword ptr [RBP + -0x60]
	0000305f:MOVZX EAX,byte ptr [RAX]
	00003062:CMP AL,0x28
	00003064:JNZ 0x00003079
	00003066:MOV RAX,qword ptr [RBP + -0x60]
	0000306a:MOV ESI,0x29
	0000306f:MOV RDI,RAX
	00003072:CALL 0x000012f0
	00003077:JMP 0x00003096
	00003079:MOV RAX,qword ptr [RBP + -0x60]
	0000307d:LEA RDX,[0x7043]
	00003084:MOV RSI,RDX
	00003087:MOV RDI,RAX
	0000308a:CALL 0x00001340
	0000308f:MOV RDX,qword ptr [RBP + -0x60]
	00003093:ADD RAX,RDX
	00003096:MOV qword ptr [RBP + -0x60],RAX
	0000309a:CMP qword ptr [RBP + -0x60],0x0
	0000309f:JNZ 0x000030c5
	000030a1:MOV RCX,qword ptr [RBP + -0x20]
	000030a5:MOV RAX,qword ptr [RBP + -0x58]
	000030a9:LEA RDX,[0x70bb]
	000030b0:MOV RSI,RCX
	000030b3:MOV RDI,RAX
	000030b6:MOV EAX,0x0
	000030bb:CALL 0x00001af0
	000030c0:JMP 0x00003588
	000030c5:MOV RAX,qword ptr [RBP + -0x60]
	000030c9:LEA RDX,[0x70e0]
	000030d0:MOV RSI,RDX
	000030d3:MOV RDI,RAX
	000030d6:CALL 0x00001330
	000030db:ADD qword ptr [RBP + -0x60],RAX
	000030df:MOV RAX,qword ptr [RBP + -0x60]
	000030e3:MOV EDX,0x6
	000030e8:LEA RCX,[0x70e6]
	000030ef:MOV RSI,RCX
	000030f2:MOV RDI,RAX
	000030f5:CALL 0x00001270
	000030fa:TEST EAX,EAX
	000030fc:JNZ 0x00003120
	000030fe:MOV RAX,qword ptr [RBP + -0x60]
	00003102:ADD RAX,0x6
	00003106:LEA RDX,[0x7043]
	0000310d:MOV RSI,RDX
	00003110:MOV RDI,RAX
	00003113:CALL 0x00001330
	00003118:ADD RAX,0x6
	0000311c:ADD qword ptr [RBP + -0x60],RAX
	00003120:MOV RAX,qword ptr [RBP + -0x60]
	00003124:MOVZX EAX,byte ptr [RAX]
	00003127:CMP AL,0x23
	00003129:JNZ 0x00003163
	0000312b:MOV RAX,qword ptr [RBP + -0x60]
	0000312f:LEA RDX,[0x70b5]
	00003136:MOV RSI,RDX
	00003139:MOV RDI,RAX
	0000313c:CALL 0x00001340
	00003141:SUB RAX,0x1
	00003145:ADD qword ptr [RBP + -0x60],RAX
	00003149:MOV RAX,qword ptr [RBP + -0x28]
	0000314d:MOVZX EAX,byte ptr [RAX]
	00003150:CMP AL,0x20
	00003152:JNZ 0x00003159
	00003154:JMP 0x00003444
	00003159:MOV qword ptr [RBP + -0x38],0x0
	00003161:JMP 0x000031d5
	00003163:MOV RAX,qword ptr [RBP + -0x60]
	00003167:MOVZX EAX,byte ptr [RAX]
	0000316a:CMP AL,0x22
	0000316c:JZ 0x00003179
	0000316e:MOV RAX,qword ptr [RBP + -0x60]
	00003172:MOVZX EAX,byte ptr [RAX]
	00003175:CMP AL,0x27
	00003177:JNZ 0x000031b1
	00003179:MOV RAX,qword ptr [RBP + -0x60]
	0000317d:MOVZX EAX,byte ptr [RAX]
	00003180:MOVSX EDX,AL
	00003183:MOV RAX,qword ptr [RBP + -0x60]
	00003187:ADD RAX,0x1
	0000318b:MOV qword ptr [RBP + -0x38],RAX
	0000318f:MOV RAX,qword ptr [RBP + -0x38]
	00003193:MOV ESI,EDX
	00003195:MOV RDI,RAX
	00003198:CALL 0x000012f0
	0000319d:MOV qword ptr [RBP + -0x60],RAX
	000031a1:CMP qword ptr [RBP + -0x60],0x0
	000031a6:JZ 0x000031b1
	000031a8:MOV RAX,qword ptr [RBP + -0x60]
	000031ac:MOV byte ptr [RAX],0x0
	000031af:JMP 0x000031d5
	000031b1:MOV RCX,qword ptr [RBP + -0x20]
	000031b5:MOV RAX,qword ptr [RBP + -0x58]
	000031b9:LEA RDX,[0x70bb]
	000031c0:MOV RSI,RCX
	000031c3:MOV RDI,RAX
	000031c6:MOV EAX,0x0
	000031cb:CALL 0x00001af0
	000031d0:JMP 0x00003588
	000031d5:MOV RAX,qword ptr [RBP + -0x58]
	000031d9:MOV RDX,qword ptr [RAX + 0x88]
	000031e0:MOV EAX,dword ptr [RBP + -0x48]
	000031e3:CDQE
	000031e5:SHL RAX,0x3
	000031e9:ADD RAX,RDX
	000031ec:MOV RAX,qword ptr [RAX]
	000031ef:TEST RAX,RAX
	000031f2:JNZ 0x000032c8
	000031f8:CMP dword ptr [RBP + -0x48],0x0
	000031fc:JNZ 0x0000320a
	000031fe:MOV EDI,0x10
	00003203:CALL 0x000013a0
	00003208:JMP 0x00003230
	0000320a:MOV EAX,dword ptr [RBP + -0x48]
	0000320d:ADD EAX,0x2
	00003210:CDQE
	00003212:LEA RDX,[RAX*0x8]
	0000321a:MOV RAX,qword ptr [RBP + -0x58]
	0000321e:MOV RAX,qword ptr [RAX + 0x88]
	00003225:MOV RSI,RDX
	00003228:MOV RDI,RAX
	0000322b:CALL 0x000013b0
	00003230:MOV RDX,qword ptr [RBP + -0x58]
	00003234:MOV qword ptr [RDX + 0x88],RAX
	0000323b:MOV RAX,qword ptr [RBP + -0x58]
	0000323f:MOV RDX,qword ptr [RAX + 0x88]
	00003246:MOV EAX,dword ptr [RBP + -0x48]
	00003249:CDQE
	0000324b:SHL RAX,0x3
	0000324f:LEA RBX,[RDX + RAX*0x1]
	00003253:MOV EDI,0x10
	00003258:CALL 0x000013a0
	0000325d:MOV qword ptr [RBX],RAX
	00003260:MOV RAX,qword ptr [RBP + -0x58]
	00003264:MOV RDX,qword ptr [RAX + 0x88]
	0000326b:MOV EAX,dword ptr [RBP + -0x48]
	0000326e:CDQE
	00003270:SHL RAX,0x3
	00003274:ADD RAX,RDX
	00003277:MOV RAX,qword ptr [RAX]
	0000327a:MOV RDX,qword ptr [RBP + -0x20]
	0000327e:MOV qword ptr [RAX],RDX
	00003281:MOV RAX,qword ptr [RBP + -0x58]
	00003285:MOV RDX,qword ptr [RAX + 0x88]
	0000328c:MOV EAX,dword ptr [RBP + -0x48]
	0000328f:CDQE
	00003291:ADD RAX,0x1
	00003295:SHL RAX,0x3
	00003299:ADD RAX,RDX
	0000329c:MOV qword ptr [RAX],0x0
	000032a3:MOV RAX,qword ptr [RBP + -0x58]
	000032a7:MOV RDX,qword ptr [RAX + 0x88]
	000032ae:MOV EAX,dword ptr [RBP + -0x48]
	000032b1:CDQE
	000032b3:SHL RAX,0x3
	000032b7:ADD RAX,RDX
	000032ba:MOV RAX,qword ptr [RAX]
	000032bd:ADD RAX,0x8
	000032c1:MOV qword ptr [RAX],0x0
	000032c8:MOV dword ptr [RBP + -0x44],0x1
	000032cf:JMP 0x000032d5
	000032d1:ADD dword ptr [RBP + -0x44],0x3
	000032d5:MOV RAX,qword ptr [RBP + -0x58]
	000032d9:MOV RDX,qword ptr [RAX + 0x88]
	000032e0:MOV EAX,dword ptr [RBP + -0x48]
	000032e3:CDQE
	000032e5:SHL RAX,0x3
	000032e9:ADD RAX,RDX
	000032ec:MOV RDX,qword ptr [RAX]
	000032ef:MOV EAX,dword ptr [RBP + -0x44]
	000032f2:CDQE
	000032f4:SHL RAX,0x3
	000032f8:ADD RAX,RDX
	000032fb:MOV RAX,qword ptr [RAX]
	000032fe:TEST RAX,RAX
	00003301:JNZ 0x000032d1
	00003303:MOV EAX,dword ptr [RBP + -0x44]
	00003306:ADD EAX,0x4
	00003309:CDQE
	0000330b:LEA RDX,[RAX*0x8]
	00003313:MOV RAX,qword ptr [RBP + -0x58]
	00003317:MOV RCX,qword ptr [RAX + 0x88]
	0000331e:MOV EAX,dword ptr [RBP + -0x48]
	00003321:CDQE
	00003323:SHL RAX,0x3
	00003327:ADD RAX,RCX
	0000332a:MOV RAX,qword ptr [RAX]
	0000332d:MOV RCX,qword ptr [RBP + -0x58]
	00003331:MOV RSI,qword ptr [RCX + 0x88]
	00003338:MOV ECX,dword ptr [RBP + -0x48]
	0000333b:MOVSXD RCX,ECX
	0000333e:SHL RCX,0x3
	00003342:LEA RBX,[RSI + RCX*0x1]
	00003346:MOV RSI,RDX
	00003349:MOV RDI,RAX
	0000334c:CALL 0x000013b0
	00003351:MOV qword ptr [RBX],RAX
	00003354:MOV RAX,qword ptr [RBP + -0x58]
	00003358:MOV RDX,qword ptr [RAX + 0x88]
	0000335f:MOV EAX,dword ptr [RBP + -0x48]
	00003362:CDQE
	00003364:SHL RAX,0x3
	00003368:ADD RAX,RDX
	0000336b:MOV RDX,qword ptr [RAX]
	0000336e:MOV EAX,dword ptr [RBP + -0x44]
	00003371:CDQE
	00003373:ADD RAX,0x3
	00003377:SHL RAX,0x3
	0000337b:ADD RAX,RDX
	0000337e:MOV qword ptr [RAX],0x0
	00003385:MOV RAX,qword ptr [RBP + -0x58]
	00003389:MOV RDX,qword ptr [RAX + 0x88]
	00003390:MOV EAX,dword ptr [RBP + -0x48]
	00003393:CDQE
	00003395:SHL RAX,0x3
	00003399:ADD RAX,RDX
	0000339c:MOV RDX,qword ptr [RAX]
	0000339f:MOV EAX,dword ptr [RBP + -0x44]
	000033a2:CDQE
	000033a4:ADD RAX,0x2
	000033a8:SHL RAX,0x3
	000033ac:ADD RDX,RAX
	000033af:MOV RAX,qword ptr [RBP + -0x28]
	000033b3:MOV qword ptr [RDX],RAX
	000033b6:CMP qword ptr [RBP + -0x38],0x0
	000033bb:JZ 0x000033e3
	000033bd:MOV RAX,qword ptr [RBP + -0x28]
	000033c1:MOVZX EAX,byte ptr [RAX]
	000033c4:MOVSX EDX,AL
	000033c7:MOV RAX,qword ptr [RBP + -0x58]
	000033cb:MOV RCX,qword ptr [RAX + 0x80]
	000033d2:MOV RAX,qword ptr [RBP + -0x38]
	000033d6:MOV RSI,RCX
	000033d9:MOV RDI,RAX
	000033dc:CALL 0x00001c55
	000033e1:JMP 0x000033e8
	000033e3:MOV EAX,0x0
	000033e8:MOV RDX,qword ptr [RBP + -0x58]
	000033ec:MOV RCX,qword ptr [RDX + 0x88]
	000033f3:MOV EDX,dword ptr [RBP + -0x48]
	000033f6:MOVSXD RDX,EDX
	000033f9:SHL RDX,0x3
	000033fd:ADD RDX,RCX
	00003400:MOV RCX,qword ptr [RDX]
	00003403:MOV EDX,dword ptr [RBP + -0x44]
	00003406:MOVSXD RDX,EDX
	00003409:ADD RDX,0x1
	0000340d:SHL RDX,0x3
	00003411:ADD RDX,RCX
	00003414:MOV qword ptr [RDX],RAX
	00003417:MOV RAX,qword ptr [RBP + -0x58]
	0000341b:MOV RDX,qword ptr [RAX + 0x88]
	00003422:MOV EAX,dword ptr [RBP + -0x48]
	00003425:CDQE
	00003427:SHL RAX,0x3
	0000342b:ADD RAX,RDX
	0000342e:MOV RDX,qword ptr [RAX]
	00003431:MOV EAX,dword ptr [RBP + -0x44]
	00003434:CDQE
	00003436:SHL RAX,0x3
	0000343a:ADD RDX,RAX
	0000343d:MOV RAX,qword ptr [RBP + -0x40]
	00003441:MOV qword ptr [RDX],RAX
	00003444:ADD qword ptr [RBP + -0x60],0x1
	00003449:MOV RAX,qword ptr [RBP + -0x60]
	0000344d:LEA RDX,[0x7043]
	00003454:MOV RSI,RDX
	00003457:MOV RDI,RAX
	0000345a:CALL 0x00001330
	0000345f:MOV RDX,qword ptr [RBP + -0x60]
	00003463:ADD RAX,RDX
	00003466:MOV qword ptr [RBP + -0x40],RAX
	0000346a:MOV RAX,qword ptr [RBP + -0x40]
	0000346e:MOVZX EAX,byte ptr [RAX]
	00003471:TEST AL,AL
	00003473:JZ 0x00003588
	00003479:MOV RAX,qword ptr [RBP + -0x40]
	0000347d:MOVZX EAX,byte ptr [RAX]
	00003480:CMP AL,0x3e
	00003482:JNZ 0x00002f6c
	00003488:JMP 0x00003588
	0000348d:MOV RAX,qword ptr [RBP + -0x60]
	00003491:MOV EDX,0x4
	00003496:LEA RCX,[0x70ed]
	0000349d:MOV RSI,RCX
	000034a0:MOV RDI,RAX
	000034a3:CALL 0x00001270
	000034a8:TEST EAX,EAX
	000034aa:JNZ 0x000034cf
	000034ac:MOV RAX,qword ptr [RBP + -0x60]
	000034b0:ADD RAX,0x4
	000034b4:LEA RDX,[0x70f2]
	000034bb:MOV RSI,RDX
	000034be:MOV RDI,RAX
	000034c1:CALL 0x00001440
	000034c6:MOV qword ptr [RBP + -0x60],RAX
	000034ca:JMP 0x00003588
	000034cf:MOV RAX,qword ptr [RBP + -0x60]
	000034d3:MOV EDX,0x2
	000034d8:LEA RCX,[0x70f6]
	000034df:MOV RSI,RCX
	000034e2:MOV RDI,RAX
	000034e5:CALL 0x00001270
	000034ea:TEST EAX,EAX
	000034ec:JNZ 0x00003543
	000034ee:MOV RAX,qword ptr [RBP + -0x60]
	000034f2:ADD RAX,0x2
	000034f6:MOV qword ptr [RBP + -0x28],RAX
	000034fa:MOV RAX,qword ptr [RBP + -0x28]
	000034fe:LEA RDX,[0x70f9]
	00003505:MOV RSI,RDX
	00003508:MOV RDI,RAX
	0000350b:CALL 0x00001440
	00003510:MOV qword ptr [RBP + -0x60],RAX
	00003514:CMP qword ptr [RBP + -0x60],0x0
	00003519:JZ 0x00003588
	0000351b:MOV RAX,qword ptr [RBP + -0x60]
	0000351f:LEA RDX,[RAX + 0x1]
	00003523:MOV qword ptr [RBP + -0x60],RDX
	00003527:SUB RAX,qword ptr [RBP + -0x28]
	0000352b:MOV RDX,RAX
	0000352e:MOV RCX,qword ptr [RBP + -0x28]
	00003532:MOV RAX,qword ptr [RBP + -0x58]
	00003536:MOV RSI,RCX
	00003539:MOV RDI,RAX
	0000353c:CALL 0x00002680
	00003541:JMP 0x00003588
	00003543:MOV RAX,qword ptr [RBP + -0x60]
	00003547:MOVZX EAX,byte ptr [RAX]
	0000354a:CMP AL,0x3c
	0000354c:JNZ 0x00003565
	0000354e:MOV RAX,qword ptr [RBP + -0x60]
	00003552:MOV ESI,0x3e
	00003557:MOV RDI,RAX
	0000355a:CALL 0x000012f0
	0000355f:MOV qword ptr [RBP + -0x60],RAX
	00003563:JMP 0x00003588
	00003565:MOV RAX,qword ptr [RBP + -0x60]
	00003569:LEA RDX,[RAX + 0x1]
	0000356d:MOV qword ptr [RBP + -0x60],RDX
	00003571:MOVZX EAX,byte ptr [RAX]
	00003574:CMP AL,0x25
	00003576:JNZ 0x00003588
	00003578:MOV RAX,qword ptr [RBP + -0x58]
	0000357c:MOVZX EAX,word ptr [RAX + 0x98]
	00003583:TEST AX,AX
	00003586:JZ 0x00003598
	00003588:CMP qword ptr [RBP + -0x60],0x0
	0000358d:JNZ 0x00002b54
	00003593:JMP 0x00003599
	00003595:NOP
	00003596:JMP 0x00003599
	00003598:NOP
	00003599:MOV RAX,qword ptr [RBP + -0x30]
END_OF_LINE
----------------------------------------------
38: iVar2 = strncmp(s_local,"<!ENTITY",8);
	00002b9a:CALL 0x00001270
END_OF_LINE
----------------------------------------------
39: if (iVar2 != 0) {
	00002b9f:TEST EAX,EAX
	00002ba1:JNZ 0x00002e54
END_OF_LINE
----------------------------------------------
40: iVar2 = strncmp(s_local,"<!ATTLIST",9);
	00002e6a:CALL 0x00001270
END_OF_LINE
----------------------------------------------
41: if (iVar2 == 0) {
	00002e6f:TEST EAX,EAX
	00002e71:JNZ 0x0000348d
END_OF_LINE
----------------------------------------------
42: sVar3 = strspn(s_local + 9,"\t\r\n ");
	00002e7b:ADD RAX,0x9
	00002e7f:LEA RDX,[0x7043]
	00002e86:MOV RSI,RDX
	00002e89:MOV RDI,RAX
	00002e8c:CALL 0x00001330
END_OF_LINE
----------------------------------------------
43: pcVar6 = s_local + sVar3 + 9;
	00002e91:LEA RDX,[RAX + 0x9]
	00002e95:MOV RAX,qword ptr [RBP + -0x60]
	00002e99:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
44: if (*pcVar6 != '\0') {
	00002ea4:MOVZX EAX,byte ptr [RAX]
	00002ea7:TEST AL,AL
	00002ea9:JNZ 0x00002ecf
END_OF_LINE
----------------------------------------------
45: sVar3 = strcspn(pcVar6,"\t\r\n >");
	00002ee0:CALL 0x00001340
END_OF_LINE
----------------------------------------------
46: s_local = pcVar6 + sVar3;
	00002ee9:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
47: if (*s_local != '>') {
	00002ef4:MOVZX EAX,byte ptr [RAX]
	00002ef7:CMP AL,0x3e
	00002ef9:JNZ 0x00002f00
END_OF_LINE
----------------------------------------------
48: *s_local = '\0';
	00002f04:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
49: i = 0;
	00002f07:MOV dword ptr [RBP + -0x48],0x0
END_OF_LINE
----------------------------------------------
50: while ((root->attr[i] != (char **)0x0 && (iVar2 = strcmp(n,*root->attr[i]), iVar2 != 0))
	00002f18:MOV RDX,qword ptr [RAX + 0x88]
	00002f1f:MOV EAX,dword ptr [RBP + -0x48]
	00002f22:CDQE
	00002f24:SHL RAX,0x3
	00002f28:ADD RAX,RDX
	00002f2b:MOV RAX,qword ptr [RAX]
	00002f2e:TEST RAX,RAX
	00002f31:JZ 0x00003444
	00002f37:MOV RAX,qword ptr [RBP + -0x58]
	00002f3b:MOV RDX,qword ptr [RAX + 0x88]
	00002f42:MOV EAX,dword ptr [RBP + -0x48]
	00002f45:CDQE
	00002f47:SHL RAX,0x3
	00002f4b:ADD RAX,RDX
	00002f4e:MOV RAX,qword ptr [RAX]
	00002f51:MOV RDX,qword ptr [RAX]
	00002f54:MOV RAX,qword ptr [RBP + -0x40]
	00002f58:MOV RSI,RDX
	00002f5b:MOV RDI,RAX
	00002f5e:CALL 0x00001360
	00002f63:TEST EAX,EAX
	00002f65:JNZ 0x00002f10
END_OF_LINE
----------------------------------------------
52: i = i + 1;
	00002f10:ADD dword ptr [RBP + -0x48],0x1
END_OF_LINE
----------------------------------------------
54: LAB_00003444:
	00003444:ADD qword ptr [RBP + -0x60],0x1
END_OF_LINE
----------------------------------------------
55: s_local = s_local + 1;
	00003444:ADD qword ptr [RBP + -0x60],0x1
END_OF_LINE
----------------------------------------------
56: sVar3 = strspn(s_local,"\t\r\n ");
	0000345a:CALL 0x00001330
END_OF_LINE
----------------------------------------------
57: n = s_local + sVar3;
	00003463:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
58: if ((*n != '\0') && (*n != '>')) {
	0000346e:MOVZX EAX,byte ptr [RAX]
	00003471:TEST AL,AL
	00003473:JZ 0x00003588
	00003479:MOV RAX,qword ptr [RBP + -0x40]
	0000347d:MOVZX EAX,byte ptr [RAX]
	00003480:CMP AL,0x3e
	00003482:JNZ 0x00002f6c
END_OF_LINE
----------------------------------------------
59: sVar3 = strcspn(n,"\t\r\n ");
	00002f7d:CALL 0x00001340
END_OF_LINE
----------------------------------------------
60: s_local = n + sVar3;
	00002f86:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
61: if (*s_local == '\0') {
	00002f91:MOVZX EAX,byte ptr [RAX]
	00002f94:TEST AL,AL
	00002f96:JZ 0x00002fe2
END_OF_LINE
----------------------------------------------
62: ezxml_err(root,pcVar6,"malformed <!ATTLIST");
	00002ffc:CALL 0x00001af0
END_OF_LINE
----------------------------------------------
65: *s_local = '\0';
	00002f9c:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
66: sVar3 = strspn(s_local + 1,"\t\r\n ");
	00002fa3:ADD RAX,0x1
	00002fa7:LEA RDX,[0x7043]
	00002fae:MOV RSI,RDX
	00002fb1:MOV RDI,RAX
	00002fb4:CALL 0x00001330
END_OF_LINE
----------------------------------------------
67: s_local = s_local + sVar3 + 1;
	00002fb9:ADD RAX,0x1
	00002fbd:ADD qword ptr [RBP + -0x60],RAX
END_OF_LINE
----------------------------------------------
68: iVar2 = strncmp(s_local,"CDATA",5);
	00002fd7:CALL 0x00001270
END_OF_LINE
----------------------------------------------
69: if (iVar2 == 0) {
	00002fdc:TEST EAX,EAX
	00002fde:JZ 0x0000300f
END_OF_LINE
----------------------------------------------
70: pcVar5 = " ";
	0000300f:LEA RAX,[0x7024]
END_OF_LINE
----------------------------------------------
73: pcVar5 = "*";
	00003006:LEA RAX,[0x70d5]
END_OF_LINE
----------------------------------------------
75: iVar2 = strncmp(s_local,"NOTATION",8);
	00003030:CALL 0x00001270
END_OF_LINE
----------------------------------------------
76: if (iVar2 == 0) {
	00003035:TEST EAX,EAX
	00003037:JNZ 0x0000305b
END_OF_LINE
----------------------------------------------
77: sVar3 = strspn(s_local + 8,"\t\r\n ");
	0000303d:ADD RAX,0x8
	00003041:LEA RDX,[0x7043]
	00003048:MOV RSI,RDX
	0000304b:MOV RDI,RAX
	0000304e:CALL 0x00001330
END_OF_LINE
----------------------------------------------
78: s_local = s_local + sVar3 + 8;
	00003053:ADD RAX,0x8
	00003057:ADD qword ptr [RBP + -0x60],RAX
END_OF_LINE
----------------------------------------------
80: if (*s_local == '(') {
	0000305f:MOVZX EAX,byte ptr [RAX]
	00003062:CMP AL,0x28
	00003064:JNZ 0x00003079
END_OF_LINE
----------------------------------------------
81: pcVar4 = strchr(s_local,0x29);
	00003072:CALL 0x000012f0
END_OF_LINE
----------------------------------------------
84: sVar3 = strcspn(s_local,"\t\r\n ");
	0000308a:CALL 0x00001340
END_OF_LINE
----------------------------------------------
85: pcVar4 = s_local + sVar3;
	00003093:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
87: if (pcVar4 == (char *)0x0) {
	0000309a:CMP qword ptr [RBP + -0x60],0x0
	0000309f:JNZ 0x000030c5
END_OF_LINE
----------------------------------------------
88: ezxml_err(root,pcVar6,"malformed <!ATTLIST");
	000030bb:CALL 0x00001af0
END_OF_LINE
----------------------------------------------
89: s_local = (char *)0x0;
	000030c0:JMP 0x00003588
END_OF_LINE
----------------------------------------------
92: sVar3 = strspn(pcVar4,"\t\r\n )");
	000030d6:CALL 0x00001330
END_OF_LINE
----------------------------------------------
93: s_local = pcVar4 + sVar3;
	000030db:ADD qword ptr [RBP + -0x60],RAX
END_OF_LINE
----------------------------------------------
94: iVar2 = strncmp(s_local,"#FIXED",6);
	000030f5:CALL 0x00001270
END_OF_LINE
----------------------------------------------
95: if (iVar2 == 0) {
	000030fa:TEST EAX,EAX
	000030fc:JNZ 0x00003120
END_OF_LINE
----------------------------------------------
96: sVar3 = strspn(s_local + 6,"\t\r\n ");
	00003102:ADD RAX,0x6
	00003106:LEA RDX,[0x7043]
	0000310d:MOV RSI,RDX
	00003110:MOV RDI,RAX
	00003113:CALL 0x00001330
END_OF_LINE
----------------------------------------------
97: s_local = s_local + sVar3 + 6;
	00003118:ADD RAX,0x6
	0000311c:ADD qword ptr [RBP + -0x60],RAX
END_OF_LINE
----------------------------------------------
99: if (*s_local == '#') break;
	00003124:MOVZX EAX,byte ptr [RAX]
	00003127:CMP AL,0x23
	00003129:JNZ 0x00003163
END_OF_LINE
----------------------------------------------
100: if ((*s_local == '\"') || (*s_local == '\'')) {
	00003167:MOVZX EAX,byte ptr [RAX]
	0000316a:CMP AL,0x22
	0000316c:JZ 0x00003179
	0000316e:MOV RAX,qword ptr [RBP + -0x60]
	00003172:MOVZX EAX,byte ptr [RAX]
	00003175:CMP AL,0x27
	00003177:JNZ 0x000031b1
END_OF_LINE
----------------------------------------------
101: v = s_local + 1;
	00003187:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
102: s_local = strchr(v,(int)*s_local);
	0000317d:MOVZX EAX,byte ptr [RAX]
	00003180:MOVSX EDX,AL
	00003183:MOV RAX,qword ptr [RBP + -0x60]
	00003187:ADD RAX,0x1
	0000318b:MOV qword ptr [RBP + -0x38],RAX
	0000318f:MOV RAX,qword ptr [RBP + -0x38]
	00003193:MOV ESI,EDX
	00003195:MOV RDI,RAX
	00003198:CALL 0x000012f0
END_OF_LINE
----------------------------------------------
103: if (s_local == (char *)0x0) goto LAB_000031b1;
	000031a1:CMP qword ptr [RBP + -0x60],0x0
	000031a6:JZ 0x000031b1
	000031a8:MOV RAX,qword ptr [RBP + -0x60]
	000031ac:MOV byte ptr [RAX],0x0
	000031af:JMP 0x000031d5
	000031b1:MOV RCX,qword ptr [RBP + -0x20]
END_OF_LINE
----------------------------------------------
104: *s_local = '\0';
	000031ac:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
105: goto LAB_000031d5;
	000031d5:MOV RAX,qword ptr [RBP + -0x58]
END_OF_LINE
----------------------------------------------
107: LAB_000031b1:
	000031b1:MOV RCX,qword ptr [RBP + -0x20]
END_OF_LINE
----------------------------------------------
108: ezxml_err(root,pcVar6,"malformed <!ATTLIST");
	000031cb:CALL 0x00001af0
END_OF_LINE
----------------------------------------------
113: goto LAB_00003588;
	00003588:CMP qword ptr [RBP + -0x60],0x0
END_OF_LINE
----------------------------------------------
115: ezxml_err(root,pcVar6,"unclosed <!ATTLIST");
	00002ec5:CALL 0x00001af0
END_OF_LINE
----------------------------------------------
116: goto LAB_00003599;
	00003599:MOV RAX,qword ptr [RBP + -0x30]
END_OF_LINE
----------------------------------------------
118: iVar2 = strncmp(s_local,"<!--",4);
	000034a3:CALL 0x00001270
END_OF_LINE
----------------------------------------------
119: if (iVar2 == 0) {
	000034a8:TEST EAX,EAX
	000034aa:JNZ 0x000034cf
END_OF_LINE
----------------------------------------------
120: s_local = strstr(s_local + 4,"-->");
	000034b0:ADD RAX,0x4
	000034b4:LEA RDX,[0x70f2]
	000034bb:MOV RSI,RDX
	000034be:MOV RDI,RAX
	000034c1:CALL 0x00001440
END_OF_LINE
----------------------------------------------
123: iVar2 = strncmp(s_local,"<?",2);
	000034e5:CALL 0x00001270
END_OF_LINE
----------------------------------------------
124: if (iVar2 == 0) {
	000034ea:TEST EAX,EAX
	000034ec:JNZ 0x00003543
END_OF_LINE
----------------------------------------------
125: pcVar6 = s_local + 2;
	000034f2:ADD RAX,0x2
END_OF_LINE
----------------------------------------------
126: s_local = strstr(pcVar6,"?>");
	0000350b:CALL 0x00001440
END_OF_LINE
----------------------------------------------
127: if (s_local != (char *)0x0) {
	00003514:CMP qword ptr [RBP + -0x60],0x0
	00003519:JZ 0x00003588
END_OF_LINE
----------------------------------------------
128: ezxml_proc_inst(root,pcVar6,(long)s_local - (long)pcVar6);
	00003527:SUB RAX,qword ptr [RBP + -0x28]
	0000352b:MOV RDX,RAX
	0000352e:MOV RCX,qword ptr [RBP + -0x28]
	00003532:MOV RAX,qword ptr [RBP + -0x58]
	00003536:MOV RSI,RCX
	00003539:MOV RDI,RAX
	0000353c:CALL 0x00002680
END_OF_LINE
----------------------------------------------
129: s_local = s_local + 1;
	0000351f:LEA RDX,[RAX + 0x1]
	00003523:MOV qword ptr [RBP + -0x60],RDX
	00003527:SUB RAX,qword ptr [RBP + -0x28]
	0000352b:MOV RDX,RAX
	0000352e:MOV RCX,qword ptr [RBP + -0x28]
	00003532:MOV RAX,qword ptr [RBP + -0x58]
	00003536:MOV RSI,RCX
	00003539:MOV RDI,RAX
	0000353c:CALL 0x00002680
	00003541:JMP 0x00003588
END_OF_LINE
----------------------------------------------
132: else if (*s_local == '<') {
	00003547:MOVZX EAX,byte ptr [RAX]
	0000354a:CMP AL,0x3c
	0000354c:JNZ 0x00003565
END_OF_LINE
----------------------------------------------
133: s_local = strchr(s_local,0x3e);
	0000355a:CALL 0x000012f0
END_OF_LINE
----------------------------------------------
136: pcVar6 = s_local + 1;
	00003569:LEA RDX,[RAX + 0x1]
END_OF_LINE
----------------------------------------------
137: cVar1 = *s_local;
	00003571:MOVZX EAX,byte ptr [RAX]
END_OF_LINE
----------------------------------------------
138: s_local = pcVar6;
	00003576:JNZ 0x00003588
END_OF_LINE
----------------------------------------------
139: if ((cVar1 == '%') && (root->standalone == 0)) {
	00003574:CMP AL,0x25
	00003576:JNZ 0x00003588
	00003578:MOV RAX,qword ptr [RBP + -0x58]
	0000357c:MOVZX EAX,word ptr [RAX + 0x98]
	00003583:TEST AX,AX
	00003586:JZ 0x00003598
END_OF_LINE
----------------------------------------------
140: LAB_00003599:
	00003599:MOV RAX,qword ptr [RBP + -0x30]
END_OF_LINE
----------------------------------------------
141: free(pe);
	000035a0:CALL 0x00001250
END_OF_LINE
----------------------------------------------
142: return (short)(root->err[0] == '\0');
	000035a9:MOVZX EAX,byte ptr [RAX + 0x9a]
	000035b0:TEST AL,AL
	000035b2:SETZ AL
	000035b5:MOVZX EAX,AL
	000035b8:MOV RBX,qword ptr [RBP + -0x8]
	000035bc:LEAVE
	000035bd:RET
END_OF_LINE
----------------------------------------------
146: goto LAB_00003588;
	00003588:CMP qword ptr [RBP + -0x60],0x0
END_OF_LINE
----------------------------------------------
148: sVar3 = strspn(s_local + 8,"\t\r\n ");
	00002bab:ADD RAX,0x8
	00002baf:LEA RDX,[0x7043]
	00002bb6:MOV RSI,RDX
	00002bb9:MOV RDI,RAX
	00002bbc:CALL 0x00001330
END_OF_LINE
----------------------------------------------
149: pcVar5 = s_local + sVar3 + 8;
	00002bc1:ADD RAX,0x8
	00002bc5:ADD qword ptr [RBP + -0x60],RAX
END_OF_LINE
----------------------------------------------
150: sVar3 = strspn(pcVar5,"\t\r\n %");
	00002be2:CALL 0x00001330
END_OF_LINE
----------------------------------------------
151: n = pcVar5 + sVar3;
	00002beb:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
152: sVar3 = strcspn(n,"\t\r\n ");
	00002c03:CALL 0x00001340
END_OF_LINE
----------------------------------------------
153: pcVar4 = n + sVar3;
	00002c0c:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
154: *pcVar4 = ';';
	00002c17:MOV byte ptr [RAX],0x3b
END_OF_LINE
----------------------------------------------
155: sVar3 = strspn(pcVar4 + 1,"\t\r\n ");
	00002c1e:ADD RAX,0x1
	00002c22:LEA RDX,[0x7043]
	00002c29:MOV RSI,RDX
	00002c2c:MOV RDI,RAX
	00002c2f:CALL 0x00001330
END_OF_LINE
----------------------------------------------
156: pcVar6 = pcVar4 + sVar3 + 1 + 1;
	00002c34:LEA RDX,[RAX + 0x1]
	00002c38:MOV RAX,qword ptr [RBP + -0x60]
	00002c3c:ADD RAX,RDX
	00002c3f:MOV qword ptr [RBP + -0x38],RAX
	00002c43:MOV RAX,qword ptr [RBP + -0x38]
	00002c47:LEA RDX,[RAX + 0x1]
END_OF_LINE
----------------------------------------------
157: cVar1 = pcVar4[sVar3 + 1];
	00002c34:LEA RDX,[RAX + 0x1]
	00002c38:MOV RAX,qword ptr [RBP + -0x60]
	00002c3c:ADD RAX,RDX
	00002c3f:MOV qword ptr [RBP + -0x38],RAX
	00002c43:MOV RAX,qword ptr [RBP + -0x38]
	00002c47:LEA RDX,[RAX + 0x1]
	00002c4b:MOV qword ptr [RBP + -0x38],RDX
	00002c4f:MOVZX EAX,byte ptr [RAX]
END_OF_LINE
----------------------------------------------
158: if ((cVar1 == '\"') || (cVar1 == '\'')) {
	00002c55:CMP byte ptr [RBP + -0x49],0x22
	00002c59:JZ 0x00002c7b
	00002c5b:CMP byte ptr [RBP + -0x49],0x27
	00002c5f:JZ 0x00002c7b
END_OF_LINE
----------------------------------------------
159: i = 0;
	00002c7b:MOV dword ptr [RBP + -0x48],0x0
END_OF_LINE
----------------------------------------------
160: ppcVar8 = pe;
	00002c8b:JZ 0x00002c9a
END_OF_LINE
----------------------------------------------
161: if (*pcVar5 != '%') {
	00002c86:MOVZX EAX,byte ptr [RAX]
	00002c89:CMP AL,0x25
	00002c8b:JZ 0x00002c9a
END_OF_LINE
----------------------------------------------
162: ppcVar8 = root->ent;
	00002c91:MOV RAX,qword ptr [RAX + 0x80]
	00002c98:JMP 0x00002c9e
END_OF_LINE
----------------------------------------------
164: for (; ppcVar8[i] != (char *)0x0; i = i + 1) {
	00002ca4:ADD dword ptr [RBP + -0x48],0x1
	00002ca8:MOV EAX,dword ptr [RBP + -0x48]
	00002cab:CDQE
	00002cad:LEA RDX,[RAX*0x8]
	00002cb5:MOV RAX,qword ptr [RBP + -0x18]
	00002cb9:ADD RAX,RDX
	00002cbc:MOV RAX,qword ptr [RAX]
	00002cbf:TEST RAX,RAX
	00002cc2:JNZ 0x00002ca4
END_OF_LINE
----------------------------------------------
166: ent_00 = (char **)realloc(ppcVar8,(long)(i + 3) * 8);
	00002cc7:ADD EAX,0x3
	00002cca:CDQE
	00002ccc:LEA RDX,[RAX*0x8]
	00002cd4:MOV RAX,qword ptr [RBP + -0x18]
	00002cd8:MOV RSI,RDX
	00002cdb:MOV RDI,RAX
	00002cde:CALL 0x000013b0
END_OF_LINE
----------------------------------------------
167: ppcVar8 = ent_00;
	00002cf0:JNZ 0x00002cfc
END_OF_LINE
----------------------------------------------
168: if (*pcVar5 != '%') {
	00002ceb:MOVZX EAX,byte ptr [RAX]
	00002cee:CMP AL,0x25
	00002cf0:JNZ 0x00002cfc
END_OF_LINE
----------------------------------------------
169: root->ent = ent_00;
	00002d04:MOV qword ptr [RAX + 0x80],RDX
END_OF_LINE
----------------------------------------------
170: ppcVar8 = pe;
	00002d04:MOV qword ptr [RAX + 0x80],RDX
END_OF_LINE
----------------------------------------------
172: pe = ppcVar8;
	00002d0b:ADD qword ptr [RBP + -0x60],0x1
END_OF_LINE
----------------------------------------------
173: pcVar4[1] = '\0';
	00002d0b:ADD qword ptr [RBP + -0x60],0x1
	00002d10:MOV RAX,qword ptr [RBP + -0x60]
	00002d14:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
174: pcVar5 = strchr(pcVar6,(int)cVar1);
	00002d17:MOVSX EDX,byte ptr [RBP + -0x49]
	00002d1b:MOV RAX,qword ptr [RBP + -0x38]
	00002d1f:MOV ESI,EDX
	00002d21:MOV RDI,RAX
	00002d24:CALL 0x000012f0
END_OF_LINE
----------------------------------------------
175: s_local = pcVar5;
	00002d32:JZ 0x00002d43
END_OF_LINE
----------------------------------------------
176: if (pcVar5 != (char *)0x0) {
	00002d2d:CMP qword ptr [RBP + -0x60],0x0
	00002d32:JZ 0x00002d43
END_OF_LINE
----------------------------------------------
177: s_local = pcVar5 + 1;
	00002d38:LEA RDX,[RAX + 0x1]
END_OF_LINE
----------------------------------------------
178: *pcVar5 = '\0';
	00002d40:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
180: pcVar5 = ezxml_decode(pcVar6,pe,'%');
	00002d6f:CALL 0x00001c55
END_OF_LINE
----------------------------------------------
181: ent_00[(long)i + 1] = pcVar5;
	00002d46:CDQE
	00002d48:ADD RAX,0x1
	00002d4c:LEA RDX,[RAX*0x8]
	00002d54:MOV RAX,qword ptr [RBP + -0x18]
	00002d58:LEA RBX,[RDX + RAX*0x1]
	00002d5c:MOV RCX,qword ptr [RBP + -0x30]
	00002d60:MOV RAX,qword ptr [RBP + -0x38]
	00002d64:MOV EDX,0x25
	00002d69:MOV RSI,RCX
	00002d6c:MOV RDI,RAX
	00002d6f:CALL 0x00001c55
	00002d74:MOV qword ptr [RBX],RAX
END_OF_LINE
----------------------------------------------
182: ent_00[(long)i + 2] = (char *)0x0;
	00002d7a:CDQE
	00002d7c:ADD RAX,0x2
	00002d80:LEA RDX,[RAX*0x8]
	00002d88:MOV RAX,qword ptr [RBP + -0x18]
	00002d8c:ADD RAX,RDX
	00002d8f:MOV qword ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
183: iVar2 = ezxml_ent_ok(n,ent_00[(long)i + 1],ent_00);
	00002d99:CDQE
	00002d9b:ADD RAX,0x1
	00002d9f:LEA RDX,[RAX*0x8]
	00002da7:MOV RAX,qword ptr [RBP + -0x18]
	00002dab:ADD RAX,RDX
	00002dae:MOV RCX,qword ptr [RAX]
	00002db1:MOV RDX,qword ptr [RBP + -0x18]
	00002db5:MOV RAX,qword ptr [RBP + -0x40]
	00002db9:MOV RSI,RCX
	00002dbc:MOV RDI,RAX
	00002dbf:CALL 0x00002528
END_OF_LINE
----------------------------------------------
184: if (iVar2 == 0) {
	00002dc4:TEST EAX,EAX
	00002dc6:JNZ 0x00002e34
END_OF_LINE
----------------------------------------------
185: if (pcVar6 != ent_00[(long)i + 1]) {
	00002dcb:CDQE
	00002dcd:ADD RAX,0x1
	00002dd1:LEA RDX,[RAX*0x8]
	00002dd9:MOV RAX,qword ptr [RBP + -0x18]
	00002ddd:ADD RAX,RDX
	00002de0:MOV RAX,qword ptr [RAX]
	00002de3:CMP qword ptr [RBP + -0x38],RAX
	00002de7:JZ 0x00002e0c
END_OF_LINE
----------------------------------------------
186: free(ent_00[(long)i + 1]);
	00002dec:CDQE
	00002dee:ADD RAX,0x1
	00002df2:LEA RDX,[RAX*0x8]
	00002dfa:MOV RAX,qword ptr [RBP + -0x18]
	00002dfe:ADD RAX,RDX
	00002e01:MOV RAX,qword ptr [RAX]
	00002e04:MOV RDI,RAX
	00002e07:CALL 0x00001250
END_OF_LINE
----------------------------------------------
188: ezxml_err(root,pcVar6,"circular entity declaration &%s",n);
	00002e2a:CALL 0x00001af0
END_OF_LINE
----------------------------------------------
189: goto LAB_00003599;
	00003599:MOV RAX,qword ptr [RBP + -0x30]
END_OF_LINE
----------------------------------------------
191: ent_00[i] = n;
	00002e37:CDQE
	00002e39:LEA RDX,[RAX*0x8]
	00002e41:MOV RAX,qword ptr [RBP + -0x18]
	00002e45:ADD RDX,RAX
	00002e48:MOV RAX,qword ptr [RBP + -0x40]
	00002e4c:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
194: s_local = strchr(pcVar4,0x3e);
	00002c6d:CALL 0x000012f0
END_OF_LINE
----------------------------------------------
197: sVar3 = strcspn(s_local,"\t\r\n >");
	0000313c:CALL 0x00001340
END_OF_LINE
----------------------------------------------
198: s_local = s_local + (sVar3 - 1);
	00003141:SUB RAX,0x1
	00003145:ADD qword ptr [RBP + -0x60],RAX
END_OF_LINE
----------------------------------------------
199: if (*pcVar5 != ' ') {
	0000314d:MOVZX EAX,byte ptr [RAX]
	00003150:CMP AL,0x20
	00003152:JNZ 0x00003159
END_OF_LINE
----------------------------------------------
200: v = (char *)0x0;
	00003159:MOV qword ptr [RBP + -0x38],0x0
END_OF_LINE
----------------------------------------------
201: LAB_000031d5:
	000031d5:MOV RAX,qword ptr [RBP + -0x58]
END_OF_LINE
----------------------------------------------
202: if (root->attr[i] == (char **)0x0) {
	000031d9:MOV RDX,qword ptr [RAX + 0x88]
	000031e0:MOV EAX,dword ptr [RBP + -0x48]
	000031e3:CDQE
	000031e5:SHL RAX,0x3
	000031e9:ADD RAX,RDX
	000031ec:MOV RAX,qword ptr [RAX]
	000031ef:TEST RAX,RAX
	000031f2:JNZ 0x000032c8
END_OF_LINE
----------------------------------------------
203: if (i == 0) {
	000031f8:CMP dword ptr [RBP + -0x48],0x0
	000031fc:JNZ 0x0000320a
END_OF_LINE
----------------------------------------------
204: pppcVar7 = (char ***)malloc(0x10);
	00003203:CALL 0x000013a0
END_OF_LINE
----------------------------------------------
207: pppcVar7 = (char ***)realloc(root->attr,(long)(i + 2) * 8);
	0000320d:ADD EAX,0x2
	00003210:CDQE
	00003212:LEA RDX,[RAX*0x8]
	0000321a:MOV RAX,qword ptr [RBP + -0x58]
	0000321e:MOV RAX,qword ptr [RAX + 0x88]
	00003225:MOV RSI,RDX
	00003228:MOV RDI,RAX
	0000322b:CALL 0x000013b0
END_OF_LINE
----------------------------------------------
209: root->attr = pppcVar7;
	00003234:MOV qword ptr [RDX + 0x88],RAX
END_OF_LINE
----------------------------------------------
210: pppcVar7 = root->attr;
	0000323f:MOV RDX,qword ptr [RAX + 0x88]
END_OF_LINE
----------------------------------------------
211: ppcVar8 = (char **)malloc(0x10);
	00003258:CALL 0x000013a0
END_OF_LINE
----------------------------------------------
212: pppcVar7[i] = ppcVar8;
	00003249:CDQE
	0000324b:SHL RAX,0x3
	0000324f:LEA RBX,[RDX + RAX*0x1]
	00003253:MOV EDI,0x10
	00003258:CALL 0x000013a0
	0000325d:MOV qword ptr [RBX],RAX
END_OF_LINE
----------------------------------------------
213: *root->attr[i] = pcVar6;
	00003264:MOV RDX,qword ptr [RAX + 0x88]
	0000326b:MOV EAX,dword ptr [RBP + -0x48]
	0000326e:CDQE
	00003270:SHL RAX,0x3
	00003274:ADD RAX,RDX
	00003277:MOV RAX,qword ptr [RAX]
	0000327a:MOV RDX,qword ptr [RBP + -0x20]
	0000327e:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
214: root->attr[(long)i + 1] = (char **)0x0;
	00003285:MOV RDX,qword ptr [RAX + 0x88]
	0000328c:MOV EAX,dword ptr [RBP + -0x48]
	0000328f:CDQE
	00003291:ADD RAX,0x1
	00003295:SHL RAX,0x3
	00003299:ADD RAX,RDX
	0000329c:MOV qword ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
215: root->attr[i][1] = (char *)0x0;
	000032a7:MOV RDX,qword ptr [RAX + 0x88]
	000032ae:MOV EAX,dword ptr [RBP + -0x48]
	000032b1:CDQE
	000032b3:SHL RAX,0x3
	000032b7:ADD RAX,RDX
	000032ba:MOV RAX,qword ptr [RAX]
	000032bd:ADD RAX,0x8
	000032c1:MOV qword ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
217: for (j = 1; root->attr[i][j] != (char *)0x0; j = j + 3) {
	000032c8:MOV dword ptr [RBP + -0x44],0x1
	000032cf:JMP 0x000032d5
	000032d1:ADD dword ptr [RBP + -0x44],0x3
	000032d5:MOV RAX,qword ptr [RBP + -0x58]
	000032d9:MOV RDX,qword ptr [RAX + 0x88]
	000032e0:MOV EAX,dword ptr [RBP + -0x48]
	000032e3:CDQE
	000032e5:SHL RAX,0x3
	000032e9:ADD RAX,RDX
	000032ec:MOV RDX,qword ptr [RAX]
	000032ef:MOV EAX,dword ptr [RBP + -0x44]
	000032f2:CDQE
	000032f4:SHL RAX,0x3
	000032f8:ADD RAX,RDX
	000032fb:MOV RAX,qword ptr [RAX]
	000032fe:TEST RAX,RAX
	00003301:JNZ 0x000032d1
END_OF_LINE
----------------------------------------------
219: pppcVar7 = root->attr;
	00003331:MOV RSI,qword ptr [RCX + 0x88]
END_OF_LINE
----------------------------------------------
220: ppcVar8 = (char **)realloc(root->attr[i],(long)(j + 4) * 8);
	00003306:ADD EAX,0x4
	00003309:CDQE
	0000330b:LEA RDX,[RAX*0x8]
	00003313:MOV RAX,qword ptr [RBP + -0x58]
	00003317:MOV RCX,qword ptr [RAX + 0x88]
	0000331e:MOV EAX,dword ptr [RBP + -0x48]
	00003321:CDQE
	00003323:SHL RAX,0x3
	00003327:ADD RAX,RCX
	0000332a:MOV RAX,qword ptr [RAX]
	0000332d:MOV RCX,qword ptr [RBP + -0x58]
	00003331:MOV RSI,qword ptr [RCX + 0x88]
	00003338:MOV ECX,dword ptr [RBP + -0x48]
	0000333b:MOVSXD RCX,ECX
	0000333e:SHL RCX,0x3
	00003342:LEA RBX,[RSI + RCX*0x1]
	00003346:MOV RSI,RDX
	00003349:MOV RDI,RAX
	0000334c:CALL 0x000013b0
END_OF_LINE
----------------------------------------------
221: pppcVar7[i] = ppcVar8;
	0000333b:MOVSXD RCX,ECX
	0000333e:SHL RCX,0x3
	00003342:LEA RBX,[RSI + RCX*0x1]
	00003346:MOV RSI,RDX
	00003349:MOV RDI,RAX
	0000334c:CALL 0x000013b0
	00003351:MOV qword ptr [RBX],RAX
END_OF_LINE
----------------------------------------------
222: root->attr[i][(long)j + 3] = (char *)0x0;
	00003358:MOV RDX,qword ptr [RAX + 0x88]
	0000335f:MOV EAX,dword ptr [RBP + -0x48]
	00003362:CDQE
	00003364:SHL RAX,0x3
	00003368:ADD RAX,RDX
	0000336b:MOV RDX,qword ptr [RAX]
	0000336e:MOV EAX,dword ptr [RBP + -0x44]
	00003371:CDQE
	00003373:ADD RAX,0x3
	00003377:SHL RAX,0x3
	0000337b:ADD RAX,RDX
	0000337e:MOV qword ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
223: root->attr[i][(long)j + 2] = pcVar5;
	00003389:MOV RDX,qword ptr [RAX + 0x88]
	00003390:MOV EAX,dword ptr [RBP + -0x48]
	00003393:CDQE
	00003395:SHL RAX,0x3
	00003399:ADD RAX,RDX
	0000339c:MOV RDX,qword ptr [RAX]
	0000339f:MOV EAX,dword ptr [RBP + -0x44]
	000033a2:CDQE
	000033a4:ADD RAX,0x2
	000033a8:SHL RAX,0x3
	000033ac:ADD RDX,RAX
	000033af:MOV RAX,qword ptr [RBP + -0x28]
	000033b3:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
224: if (v == (char *)0x0) {
	000033b6:CMP qword ptr [RBP + -0x38],0x0
	000033bb:JZ 0x000033e3
END_OF_LINE
----------------------------------------------
225: pcVar5 = (char *)0x0;
	000033e3:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
228: pcVar5 = ezxml_decode(v,root->ent,*pcVar5);
	000033c1:MOVZX EAX,byte ptr [RAX]
	000033c4:MOVSX EDX,AL
	000033c7:MOV RAX,qword ptr [RBP + -0x58]
	000033cb:MOV RCX,qword ptr [RAX + 0x80]
	000033d2:MOV RAX,qword ptr [RBP + -0x38]
	000033d6:MOV RSI,RCX
	000033d9:MOV RDI,RAX
	000033dc:CALL 0x00001c55
END_OF_LINE
----------------------------------------------
230: root->attr[i][(long)j + 1] = pcVar5;
	000033ec:MOV RCX,qword ptr [RDX + 0x88]
	000033f3:MOV EDX,dword ptr [RBP + -0x48]
	000033f6:MOVSXD RDX,EDX
	000033f9:SHL RDX,0x3
	000033fd:ADD RDX,RCX
	00003400:MOV RCX,qword ptr [RDX]
	00003403:MOV EDX,dword ptr [RBP + -0x44]
	00003406:MOVSXD RDX,EDX
	00003409:ADD RDX,0x1
	0000340d:SHL RDX,0x3
	00003411:ADD RDX,RCX
	00003414:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
231: root->attr[i][j] = n;
	0000341b:MOV RDX,qword ptr [RAX + 0x88]
	00003422:MOV EAX,dword ptr [RBP + -0x48]
	00003425:CDQE
	00003427:SHL RAX,0x3
	0000342b:ADD RAX,RDX
	0000342e:MOV RDX,qword ptr [RAX]
	00003431:MOV EAX,dword ptr [RBP + -0x44]
	00003434:CDQE
	00003436:SHL RAX,0x3
	0000343a:ADD RDX,RAX
	0000343d:MOV RAX,qword ptr [RBP + -0x40]
	00003441:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
233: goto LAB_00003444;
	00003444:ADD qword ptr [RBP + -0x60],0x1
END_OF_LINE



Function: ezxml_str2utf8
----------------------------------------------
20: l = 0;
	000035d2:MOV qword ptr [RBP + -0x28],0x0
END_OF_LINE
----------------------------------------------
21: max = *len;
	000035de:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
22: if (**s == -2) {
	000035e9:MOV RAX,qword ptr [RAX]
	000035ec:MOVZX EAX,byte ptr [RAX]
	000035ef:CMP AL,0xfe
	000035f1:JZ 0x0000360f
END_OF_LINE
----------------------------------------------
23: iVar3 = 1;
	0000360f:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
25: else if (**s == -1) {
	000035f7:MOV RAX,qword ptr [RAX]
	000035fa:MOVZX EAX,byte ptr [RAX]
	000035fd:CMP AL,0xff
	000035ff:JNZ 0x00003608
END_OF_LINE
----------------------------------------------
26: iVar3 = 0;
	00003601:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
29: iVar3 = -1;
	00003608:MOV EAX,0xffffffff
END_OF_LINE
----------------------------------------------
31: if (iVar3 == -1) {
	00003617:CMP dword ptr [RBP + -0x34],-0x1
	0000361b:JNZ 0x00003627
END_OF_LINE
----------------------------------------------
32: pcVar4 = (char *)0x0;
	0000361d:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
35: u = (char *)malloc(max);
	0000362e:CALL 0x000013a0
END_OF_LINE
----------------------------------------------
36: for (sl = 2; sl < *len - 1; sl = sl + 2) {
	00003637:MOV qword ptr [RBP + -0x20],0x2
	0000363f:JMP 0x000038cf
	00003644:CMP dword ptr [RBP + -0x34],0x0
	00003648:JZ 0x00003685
	0000364a:MOV RAX,qword ptr [RBP + -0x48]
	0000364e:MOV RDX,qword ptr [RAX]
	00003651:MOV RAX,qword ptr [RBP + -0x20]
	00003655:ADD RAX,RDX
	00003658:MOVZX EAX,byte ptr [RAX]
	0000365b:MOVSX EAX,AL
	0000365e:SHL EAX,0x8
	00003661:MOVZX EDX,AX
	00003664:MOV RAX,qword ptr [RBP + -0x48]
	00003668:MOV RCX,qword ptr [RAX]
	0000366b:MOV RAX,qword ptr [RBP + -0x20]
	0000366f:ADD RAX,0x1
	00003673:ADD RAX,RCX
	00003676:MOVZX EAX,byte ptr [RAX]
	00003679:MOVSX EAX,AL
	0000367c:MOVZX EAX,AL
	0000367f:OR EAX,EDX
	00003681:CDQE
	00003683:JMP 0x000036be
	00003685:MOV RAX,qword ptr [RBP + -0x48]
	00003689:MOV RDX,qword ptr [RAX]
	0000368c:MOV RAX,qword ptr [RBP + -0x20]
	00003690:ADD RAX,0x1
	00003694:ADD RAX,RDX
	00003697:MOVZX EAX,byte ptr [RAX]
	0000369a:MOVSX EAX,AL
	0000369d:SHL EAX,0x8
	000036a0:MOVZX EDX,AX
	000036a3:MOV RAX,qword ptr [RBP + -0x48]
	000036a7:MOV RCX,qword ptr [RAX]
	000036aa:MOV RAX,qword ptr [RBP + -0x20]
	000036ae:ADD RAX,RCX
	000036b1:MOVZX EAX,byte ptr [RAX]
	000036b4:MOVSX EAX,AL
	000036b7:MOVZX EAX,AL
	000036ba:OR EAX,EDX
	000036bc:CDQE
	000036be:MOV qword ptr [RBP + -0x10],RAX
	000036c2:CMP qword ptr [RBP + -0x10],0xd7ff
	000036ca:JLE 0x000037bd
	000036d0:CMP qword ptr [RBP + -0x10],0xdfff
	000036d8:JG 0x000037bd
	000036de:ADD qword ptr [RBP + -0x20],0x2
	000036e3:MOV RAX,qword ptr [RBP + -0x50]
	000036e7:MOV RAX,qword ptr [RAX]
	000036ea:SUB RAX,0x1
	000036ee:CMP qword ptr [RBP + -0x20],RAX
	000036f2:JNC 0x000037bd
	000036f8:CMP dword ptr [RBP + -0x34],0x0
	000036fc:JZ 0x00003739
	000036fe:MOV RAX,qword ptr [RBP + -0x48]
	00003702:MOV RDX,qword ptr [RAX]
	00003705:MOV RAX,qword ptr [RBP + -0x20]
	00003709:ADD RAX,RDX
	0000370c:MOVZX EAX,byte ptr [RAX]
	0000370f:MOVSX EAX,AL
	00003712:SHL EAX,0x8
	00003715:MOVZX EDX,AX
	00003718:MOV RAX,qword ptr [RBP + -0x48]
	0000371c:MOV RCX,qword ptr [RAX]
	0000371f:MOV RAX,qword ptr [RBP + -0x20]
	00003723:ADD RAX,0x1
	00003727:ADD RAX,RCX
	0000372a:MOVZX EAX,byte ptr [RAX]
	0000372d:MOVSX EAX,AL
	00003730:MOVZX EAX,AL
	00003733:OR EAX,EDX
	00003735:CDQE
	00003737:JMP 0x00003772
	00003739:MOV RAX,qword ptr [RBP + -0x48]
	0000373d:MOV RDX,qword ptr [RAX]
	00003740:MOV RAX,qword ptr [RBP + -0x20]
	00003744:ADD RAX,0x1
	00003748:ADD RAX,RDX
	0000374b:MOVZX EAX,byte ptr [RAX]
	0000374e:MOVSX EAX,AL
	00003751:SHL EAX,0x8
	00003754:MOVZX EDX,AX
	00003757:MOV RAX,qword ptr [RBP + -0x48]
	0000375b:MOV RCX,qword ptr [RAX]
	0000375e:MOV RAX,qword ptr [RBP + -0x20]
	00003762:ADD RAX,RCX
	00003765:MOVZX EAX,byte ptr [RAX]
	00003768:MOVSX EAX,AL
	0000376b:MOVZX EAX,AL
	0000376e:OR EAX,EDX
	00003770:CDQE
	00003772:MOV qword ptr [RBP + -0x8],RAX
	00003776:MOV RAX,qword ptr [RBP + -0x10]
	0000377a:SHL RAX,0xa
	0000377e:AND EAX,0xffc00
	00003783:MOV RDX,RAX
	00003786:MOV RAX,qword ptr [RBP + -0x8]
	0000378a:AND EAX,0x3ff
	0000378f:OR RAX,RDX
	00003792:ADD RAX,0x10000
	00003798:MOV qword ptr [RBP + -0x10],RAX
	0000379c:JMP 0x000037bd
	0000379e:ADD qword ptr [RBP + -0x18],0x400
	000037a6:MOV RDX,qword ptr [RBP + -0x18]
	000037aa:MOV RAX,qword ptr [RBP + -0x30]
	000037ae:MOV RSI,RDX
	000037b1:MOV RDI,RAX
	000037b4:CALL 0x000013b0
	000037b9:MOV qword ptr [RBP + -0x30],RAX
	000037bd:MOV RAX,qword ptr [RBP + -0x28]
	000037c1:ADD RAX,0x6
	000037c5:CMP qword ptr [RBP + -0x18],RAX
	000037c9:JC 0x0000379e
	000037cb:CMP qword ptr [RBP + -0x10],0x7f
	000037d0:JG 0x000037f0
	000037d2:MOV RAX,qword ptr [RBP + -0x28]
	000037d6:LEA RDX,[RAX + 0x1]
	000037da:MOV qword ptr [RBP + -0x28],RDX
	000037de:MOV RDX,qword ptr [RBP + -0x30]
	000037e2:ADD RAX,RDX
	000037e5:MOV RDX,qword ptr [RBP + -0x10]
	000037e9:MOV byte ptr [RAX],DL
	000037eb:JMP 0x000038ca
	000037f0:MOV dword ptr [RBP + -0x38],0x0
	000037f7:MOV RAX,qword ptr [RBP + -0x10]
	000037fb:MOV qword ptr [RBP + -0x8],RAX
	000037ff:JMP 0x0000381a
	00003801:ADD dword ptr [RBP + -0x38],0x1
	00003805:MOV RAX,qword ptr [RBP + -0x8]
	00003809:MOV RDX,RAX
	0000380c:SHR RDX,0x3f
	00003810:ADD RAX,RDX
	00003813:SAR RAX,0x1
	00003816:MOV qword ptr [RBP + -0x8],RAX
	0000381a:CMP qword ptr [RBP + -0x8],0x0
	0000381f:JNZ 0x00003801
	00003821:MOV EAX,dword ptr [RBP + -0x38]
	00003824:SUB EAX,0x2
	00003827:MOVSXD RDX,EAX
	0000382a:IMUL RDX,RDX,0x66666667
	00003831:SHR RDX,0x20
	00003835:SAR EDX,0x1
	00003837:SAR EAX,0x1f
	0000383a:MOV ECX,EAX
	0000383c:MOV EAX,EDX
	0000383e:SUB EAX,ECX
	00003840:MOV dword ptr [RBP + -0x38],EAX
	00003843:MOV EAX,0x7
	00003848:SUB EAX,dword ptr [RBP + -0x38]
	0000384b:MOV EDX,0xff
	00003850:MOV ECX,EAX
	00003852:SHL EDX,CL
	00003854:MOV EAX,EDX
	00003856:MOV ESI,EAX
	00003858:MOV EDX,dword ptr [RBP + -0x38]
	0000385b:MOV EAX,EDX
	0000385d:ADD EAX,EAX
	0000385f:ADD EAX,EDX
	00003861:ADD EAX,EAX
	00003863:MOV EDX,EAX
	00003865:MOV RAX,qword ptr [RBP + -0x10]
	00003869:MOV ECX,EDX
	0000386b:SAR RAX,CL
	0000386e:MOV ECX,EAX
	00003870:MOV RAX,qword ptr [RBP + -0x28]
	00003874:LEA RDX,[RAX + 0x1]
	00003878:MOV qword ptr [RBP + -0x28],RDX
	0000387c:MOV RDX,qword ptr [RBP + -0x30]
	00003880:ADD RAX,RDX
	00003883:OR ESI,ECX
	00003885:MOV EDX,ESI
	00003887:MOV byte ptr [RAX],DL
	00003889:JMP 0x000038c4
	0000388b:SUB dword ptr [RBP + -0x38],0x1
	0000388f:MOV EDX,dword ptr [RBP + -0x38]
	00003892:MOV EAX,EDX
	00003894:ADD EAX,EAX
	00003896:ADD EAX,EDX
	00003898:ADD EAX,EAX
	0000389a:MOV EDX,EAX
	0000389c:MOV RAX,qword ptr [RBP + -0x10]
	000038a0:MOV ECX,EDX
	000038a2:SAR RAX,CL
	000038a5:AND EAX,0x3f
	000038a8:MOV ECX,EAX
	000038aa:MOV RAX,qword ptr [RBP + -0x28]
	000038ae:LEA RDX,[RAX + 0x1]
	000038b2:MOV qword ptr [RBP + -0x28],RDX
	000038b6:MOV RDX,qword ptr [RBP + -0x30]
	000038ba:ADD RAX,RDX
	000038bd:OR ECX,0xffffff80
	000038c0:MOV EDX,ECX
	000038c2:MOV byte ptr [RAX],DL
	000038c4:CMP dword ptr [RBP + -0x38],0x0
	000038c8:JNZ 0x0000388b
	000038ca:ADD qword ptr [RBP + -0x20],0x2
	000038cf:MOV RAX,qword ptr [RBP + -0x50]
	000038d3:MOV RAX,qword ptr [RAX]
	000038d6:SUB RAX,0x1
	000038da:CMP qword ptr [RBP + -0x20],RAX
	000038de:JC 0x00003644
END_OF_LINE
----------------------------------------------
37: if (iVar3 == 0) {
	00003644:CMP dword ptr [RBP + -0x34],0x0
	00003648:JZ 0x00003685
END_OF_LINE
----------------------------------------------
38: uVar2 = CONCAT11((*s)[sl + 1],(*s)[sl]);
	00003689:MOV RDX,qword ptr [RAX]
	0000368c:MOV RAX,qword ptr [RBP + -0x20]
	00003690:ADD RAX,0x1
	00003694:ADD RAX,RDX
	00003697:MOVZX EAX,byte ptr [RAX]
	0000369a:MOVSX EAX,AL
	0000369d:SHL EAX,0x8
	000036a0:MOVZX EDX,AX
	000036a3:MOV RAX,qword ptr [RBP + -0x48]
	000036a7:MOV RCX,qword ptr [RAX]
	000036aa:MOV RAX,qword ptr [RBP + -0x20]
	000036ae:ADD RAX,RCX
	000036b1:MOVZX EAX,byte ptr [RAX]
	000036b4:MOVSX EAX,AL
	000036b7:MOVZX EAX,AL
	000036ba:OR EAX,EDX
END_OF_LINE
----------------------------------------------
41: uVar2 = CONCAT11((*s)[sl],(*s)[sl + 1]);
	0000364e:MOV RDX,qword ptr [RAX]
	00003651:MOV RAX,qword ptr [RBP + -0x20]
	00003655:ADD RAX,RDX
	00003658:MOVZX EAX,byte ptr [RAX]
	0000365b:MOVSX EAX,AL
	0000365e:SHL EAX,0x8
	00003661:MOVZX EDX,AX
	00003664:MOV RAX,qword ptr [RBP + -0x48]
	00003668:MOV RCX,qword ptr [RAX]
	0000366b:MOV RAX,qword ptr [RBP + -0x20]
	0000366f:ADD RAX,0x1
	00003673:ADD RAX,RCX
	00003676:MOVZX EAX,byte ptr [RAX]
	00003679:MOVSX EAX,AL
	0000367c:MOVZX EAX,AL
	0000367f:OR EAX,EDX
END_OF_LINE
----------------------------------------------
43: c = (long)(int)(uint)uVar2;
	0000367f:OR EAX,EDX
	00003681:CDQE
END_OF_LINE
----------------------------------------------
44: uVar1 = sl;
	000036ca:JLE 0x000037bd
END_OF_LINE
----------------------------------------------
45: if (((0xd7ff < (ulong)c) && ((ulong)c < 0xe000)) && (uVar1 = sl + 2, uVar1 < *len - 1)) {
	000036ca:JLE 0x000037bd
	000036d0:CMP qword ptr [RBP + -0x10],0xdfff
	000036d8:JG 0x000037bd
	000036de:ADD qword ptr [RBP + -0x20],0x2
	000036e3:MOV RAX,qword ptr [RBP + -0x50]
	000036e7:MOV RAX,qword ptr [RAX]
	000036ea:SUB RAX,0x1
	000036ee:CMP qword ptr [RBP + -0x20],RAX
	000036f2:JNC 0x000037bd
END_OF_LINE
----------------------------------------------
46: if (iVar3 == 0) {
	000036f8:CMP dword ptr [RBP + -0x34],0x0
	000036fc:JZ 0x00003739
END_OF_LINE
----------------------------------------------
47: uVar2 = CONCAT11((*s)[sl + 3],(*s)[uVar1]);
	0000373d:MOV RDX,qword ptr [RAX]
	00003740:MOV RAX,qword ptr [RBP + -0x20]
	00003744:ADD RAX,0x1
	00003748:ADD RAX,RDX
	0000374b:MOVZX EAX,byte ptr [RAX]
	0000374e:MOVSX EAX,AL
	00003751:SHL EAX,0x8
	00003754:MOVZX EDX,AX
	00003757:MOV RAX,qword ptr [RBP + -0x48]
	0000375b:MOV RCX,qword ptr [RAX]
	0000375e:MOV RAX,qword ptr [RBP + -0x20]
	00003762:ADD RAX,RCX
	00003765:MOVZX EAX,byte ptr [RAX]
	00003768:MOVSX EAX,AL
	0000376b:MOVZX EAX,AL
	0000376e:OR EAX,EDX
END_OF_LINE
----------------------------------------------
50: uVar2 = CONCAT11((*s)[uVar1],(*s)[sl + 3]);
	00003702:MOV RDX,qword ptr [RAX]
	00003705:MOV RAX,qword ptr [RBP + -0x20]
	00003709:ADD RAX,RDX
	0000370c:MOVZX EAX,byte ptr [RAX]
	0000370f:MOVSX EAX,AL
	00003712:SHL EAX,0x8
	00003715:MOVZX EDX,AX
	00003718:MOV RAX,qword ptr [RBP + -0x48]
	0000371c:MOV RCX,qword ptr [RAX]
	0000371f:MOV RAX,qword ptr [RBP + -0x20]
	00003723:ADD RAX,0x1
	00003727:ADD RAX,RCX
	0000372a:MOVZX EAX,byte ptr [RAX]
	0000372d:MOVSX EAX,AL
	00003730:MOVZX EAX,AL
	00003733:OR EAX,EDX
END_OF_LINE
----------------------------------------------
52: c = (ulong)(uVar2 & 0x3ff | (uint)(c << 10) & 0xffc00) + 0x10000;
	00003733:OR EAX,EDX
	00003735:CDQE
	00003737:JMP 0x00003772
	00003739:MOV RAX,qword ptr [RBP + -0x48]
	0000373d:MOV RDX,qword ptr [RAX]
	00003740:MOV RAX,qword ptr [RBP + -0x20]
	00003744:ADD RAX,0x1
	00003748:ADD RAX,RDX
	0000374b:MOVZX EAX,byte ptr [RAX]
	0000374e:MOVSX EAX,AL
	00003751:SHL EAX,0x8
	00003754:MOVZX EDX,AX
	00003757:MOV RAX,qword ptr [RBP + -0x48]
	0000375b:MOV RCX,qword ptr [RAX]
	0000375e:MOV RAX,qword ptr [RBP + -0x20]
	00003762:ADD RAX,RCX
	00003765:MOVZX EAX,byte ptr [RAX]
	00003768:MOVSX EAX,AL
	0000376b:MOVZX EAX,AL
	0000376e:OR EAX,EDX
	00003770:CDQE
	00003772:MOV qword ptr [RBP + -0x8],RAX
	00003776:MOV RAX,qword ptr [RBP + -0x10]
	0000377a:SHL RAX,0xa
	0000377e:AND EAX,0xffc00
	00003783:MOV RDX,RAX
	00003786:MOV RAX,qword ptr [RBP + -0x8]
	0000378a:AND EAX,0x3ff
	0000378f:OR RAX,RDX
	00003792:ADD RAX,0x10000
END_OF_LINE
----------------------------------------------
54: while (sl = uVar1, max < l + 6) {
	000037bd:MOV RAX,qword ptr [RBP + -0x28]
	000037c1:ADD RAX,0x6
	000037c5:CMP qword ptr [RBP + -0x18],RAX
	000037c9:JC 0x0000379e
END_OF_LINE
----------------------------------------------
55: max = max + 0x400;
	0000379e:ADD qword ptr [RBP + -0x18],0x400
END_OF_LINE
----------------------------------------------
56: u = (char *)realloc(u,max);
	000037b4:CALL 0x000013b0
END_OF_LINE
----------------------------------------------
57: uVar1 = sl;
	000037b9:MOV qword ptr [RBP + -0x30],RAX
END_OF_LINE
----------------------------------------------
59: if ((ulong)c < 0x80) {
	000037d0:JG 0x000037f0
END_OF_LINE
----------------------------------------------
60: u[l] = (char)c;
	000037e2:ADD RAX,RDX
	000037e5:MOV RDX,qword ptr [RBP + -0x10]
	000037e9:MOV byte ptr [RAX],DL
END_OF_LINE
----------------------------------------------
61: l = l + 1;
	000037d6:LEA RDX,[RAX + 0x1]
	000037da:MOV qword ptr [RBP + -0x28],RDX
	000037de:MOV RDX,qword ptr [RBP + -0x30]
	000037e2:ADD RAX,RDX
	000037e5:MOV RDX,qword ptr [RBP + -0x10]
	000037e9:MOV byte ptr [RAX],DL
	000037eb:JMP 0x000038ca
END_OF_LINE
----------------------------------------------
64: b = 0;
	000037f0:MOV dword ptr [RBP + -0x38],0x0
END_OF_LINE
----------------------------------------------
65: for (d = c; d != 0; d = d / 2) {
	000037fb:MOV qword ptr [RBP + -0x8],RAX
	000037ff:JMP 0x0000381a
	00003801:ADD dword ptr [RBP + -0x38],0x1
	00003805:MOV RAX,qword ptr [RBP + -0x8]
	00003809:MOV RDX,RAX
	0000380c:SHR RDX,0x3f
	00003810:ADD RAX,RDX
	00003813:SAR RAX,0x1
	00003816:MOV qword ptr [RBP + -0x8],RAX
	0000381a:CMP qword ptr [RBP + -0x8],0x0
	0000381f:JNZ 0x00003801
END_OF_LINE
----------------------------------------------
66: b = b + 1;
	00003801:ADD dword ptr [RBP + -0x38],0x1
END_OF_LINE
----------------------------------------------
68: b = (b + -2) / 5;
	00003824:SUB EAX,0x2
	00003827:MOVSXD RDX,EAX
	0000382a:IMUL RDX,RDX,0x66666667
	00003831:SHR RDX,0x20
	00003835:SAR EDX,0x1
END_OF_LINE
----------------------------------------------
69: u[l] = (byte)(0xff << (7U - (char)b & 0x1f)) | (byte)(c >> ((char)b * '\x06' & 0x3fU));
	00003848:SUB EAX,dword ptr [RBP + -0x38]
	0000384b:MOV EDX,0xff
	00003850:MOV ECX,EAX
	00003852:SHL EDX,CL
	00003854:MOV EAX,EDX
	00003856:MOV ESI,EAX
	00003858:MOV EDX,dword ptr [RBP + -0x38]
	0000385b:MOV EAX,EDX
	0000385d:ADD EAX,EAX
	0000385f:ADD EAX,EDX
	00003861:ADD EAX,EAX
	00003863:MOV EDX,EAX
	00003865:MOV RAX,qword ptr [RBP + -0x10]
	00003869:MOV ECX,EDX
	0000386b:SAR RAX,CL
	0000386e:MOV ECX,EAX
	00003870:MOV RAX,qword ptr [RBP + -0x28]
	00003874:LEA RDX,[RAX + 0x1]
	00003878:MOV qword ptr [RBP + -0x28],RDX
	0000387c:MOV RDX,qword ptr [RBP + -0x30]
	00003880:ADD RAX,RDX
	00003883:OR ESI,ECX
	00003885:MOV EDX,ESI
	00003887:MOV byte ptr [RAX],DL
END_OF_LINE
----------------------------------------------
70: while (l = l + 1, b != 0) {
	00003874:LEA RDX,[RAX + 0x1]
	00003878:MOV qword ptr [RBP + -0x28],RDX
	0000387c:MOV RDX,qword ptr [RBP + -0x30]
	00003880:ADD RAX,RDX
	00003883:OR ESI,ECX
	00003885:MOV EDX,ESI
	00003887:MOV byte ptr [RAX],DL
	00003889:JMP 0x000038c4
	0000388b:SUB dword ptr [RBP + -0x38],0x1
	0000388f:MOV EDX,dword ptr [RBP + -0x38]
	00003892:MOV EAX,EDX
	00003894:ADD EAX,EAX
	00003896:ADD EAX,EDX
	00003898:ADD EAX,EAX
	0000389a:MOV EDX,EAX
	0000389c:MOV RAX,qword ptr [RBP + -0x10]
	000038a0:MOV ECX,EDX
	000038a2:SAR RAX,CL
	000038a5:AND EAX,0x3f
	000038a8:MOV ECX,EAX
	000038aa:MOV RAX,qword ptr [RBP + -0x28]
	000038ae:LEA RDX,[RAX + 0x1]
	000038b2:MOV qword ptr [RBP + -0x28],RDX
	000038b6:MOV RDX,qword ptr [RBP + -0x30]
	000038ba:ADD RAX,RDX
	000038bd:OR ECX,0xffffff80
	000038c0:MOV EDX,ECX
	000038c2:MOV byte ptr [RAX],DL
	000038c4:CMP dword ptr [RBP + -0x38],0x0
	000038c8:JNZ 0x0000388b
END_OF_LINE
----------------------------------------------
71: b = b + -1;
	0000388b:SUB dword ptr [RBP + -0x38],0x1
END_OF_LINE
----------------------------------------------
72: u[l] = (byte)(c >> ((char)b * '\x06' & 0x3fU)) & 0x3f | 0x80;
	00003898:ADD EAX,EAX
	0000389a:MOV EDX,EAX
	0000389c:MOV RAX,qword ptr [RBP + -0x10]
	000038a0:MOV ECX,EDX
	000038a2:SAR RAX,CL
	000038a5:AND EAX,0x3f
	000038a8:MOV ECX,EAX
	000038aa:MOV RAX,qword ptr [RBP + -0x28]
	000038ae:LEA RDX,[RAX + 0x1]
	000038b2:MOV qword ptr [RBP + -0x28],RDX
	000038b6:MOV RDX,qword ptr [RBP + -0x30]
	000038ba:ADD RAX,RDX
	000038bd:OR ECX,0xffffff80
	000038c0:MOV EDX,ECX
	000038c2:MOV byte ptr [RAX],DL
END_OF_LINE
----------------------------------------------
76: *len = l;
	000038ec:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
77: pcVar4 = (char *)realloc(u,*len);
	000038f3:MOV RDX,qword ptr [RAX]
	000038f6:MOV RAX,qword ptr [RBP + -0x30]
	000038fa:MOV RSI,RDX
	000038fd:MOV RDI,RAX
	00003900:CALL 0x000013b0
END_OF_LINE
----------------------------------------------
78: *s = pcVar4;
	00003909:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
79: pcVar4 = *s;
	00003910:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
81: return pcVar4;
	00003914:RET
END_OF_LINE



Function: ezxml_free_attr
----------------------------------------------
10: i = 0;
	00003925:MOV dword ptr [RBP + -0xc],0x0
END_OF_LINE
----------------------------------------------
11: if ((attr != (char **)0x0) && (attr != EZXML_NIL)) {
	0000392c:CMP qword ptr [RBP + -0x18],0x0
	00003931:JZ 0x00003a3c
	00003937:LEA RAX,[0x9090]
	0000393e:CMP qword ptr [RBP + -0x18],RAX
	00003942:JZ 0x00003a3c
END_OF_LINE
----------------------------------------------
12: for (; attr[i] != (char *)0x0; i = i + 2) {
	0000394a:ADD dword ptr [RBP + -0xc],0x2
	0000394e:MOV EAX,dword ptr [RBP + -0xc]
	00003951:CDQE
	00003953:LEA RDX,[RAX*0x8]
	0000395b:MOV RAX,qword ptr [RBP + -0x18]
	0000395f:ADD RAX,RDX
	00003962:MOV RAX,qword ptr [RAX]
	00003965:TEST RAX,RAX
	00003968:JNZ 0x0000394a
END_OF_LINE
----------------------------------------------
14: __ptr = attr[(long)i + 1];
	0000396d:CDQE
	0000396f:ADD RAX,0x1
	00003973:LEA RDX,[RAX*0x8]
	0000397b:MOV RAX,qword ptr [RBP + -0x18]
	0000397f:ADD RAX,RDX
	00003982:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
15: for (i = 0; __ptr[i] != '\0'; i = i + 1) {
	00003989:MOV dword ptr [RBP + -0xc],0x0
	00003990:JMP 0x00003a0a
	00003992:MOV EAX,dword ptr [RBP + -0xc]
	00003995:MOVSXD RDX,EAX
	00003998:MOV RAX,qword ptr [RBP + -0x8]
	0000399c:ADD RAX,RDX
	0000399f:MOVZX EAX,byte ptr [RAX]
	000039a2:TEST AL,AL
	000039a4:JNS 0x000039c7
	000039a6:MOV EAX,dword ptr [RBP + -0xc]
	000039a9:ADD EAX,EAX
	000039ab:CDQE
	000039ad:LEA RDX,[RAX*0x8]
	000039b5:MOV RAX,qword ptr [RBP + -0x18]
	000039b9:ADD RAX,RDX
	000039bc:MOV RAX,qword ptr [RAX]
	000039bf:MOV RDI,RAX
	000039c2:CALL 0x00001250
	000039c7:MOV EAX,dword ptr [RBP + -0xc]
	000039ca:MOVSXD RDX,EAX
	000039cd:MOV RAX,qword ptr [RBP + -0x8]
	000039d1:ADD RAX,RDX
	000039d4:MOVZX EAX,byte ptr [RAX]
	000039d7:MOVSX EAX,AL
	000039da:AND EAX,0x40
	000039dd:TEST EAX,EAX
	000039df:JZ 0x00003a06
	000039e1:MOV EAX,dword ptr [RBP + -0xc]
	000039e4:ADD EAX,EAX
	000039e6:CDQE
	000039e8:ADD RAX,0x1
	000039ec:LEA RDX,[RAX*0x8]
	000039f4:MOV RAX,qword ptr [RBP + -0x18]
	000039f8:ADD RAX,RDX
	000039fb:MOV RAX,qword ptr [RAX]
	000039fe:MOV RDI,RAX
	00003a01:CALL 0x00001250
	00003a06:ADD dword ptr [RBP + -0xc],0x1
	00003a0a:MOV EAX,dword ptr [RBP + -0xc]
	00003a0d:MOVSXD RDX,EAX
	00003a10:MOV RAX,qword ptr [RBP + -0x8]
	00003a14:ADD RAX,RDX
	00003a17:MOVZX EAX,byte ptr [RAX]
	00003a1a:TEST AL,AL
	00003a1c:JNZ 0x00003992
END_OF_LINE
----------------------------------------------
16: if (__ptr[i] < '\0') {
	00003995:MOVSXD RDX,EAX
	00003998:MOV RAX,qword ptr [RBP + -0x8]
	0000399c:ADD RAX,RDX
	0000399f:MOVZX EAX,byte ptr [RAX]
	000039a2:TEST AL,AL
	000039a4:JNS 0x000039c7
END_OF_LINE
----------------------------------------------
17: free(attr[i * 2]);
	000039a9:ADD EAX,EAX
	000039ab:CDQE
	000039ad:LEA RDX,[RAX*0x8]
	000039b5:MOV RAX,qword ptr [RBP + -0x18]
	000039b9:ADD RAX,RDX
	000039bc:MOV RAX,qword ptr [RAX]
	000039bf:MOV RDI,RAX
	000039c2:CALL 0x00001250
END_OF_LINE
----------------------------------------------
19: if ((__ptr[i] & 0x40U) != 0) {
	000039ca:MOVSXD RDX,EAX
	000039cd:MOV RAX,qword ptr [RBP + -0x8]
	000039d1:ADD RAX,RDX
	000039d4:MOVZX EAX,byte ptr [RAX]
	000039d7:MOVSX EAX,AL
	000039da:AND EAX,0x40
	000039dd:TEST EAX,EAX
	000039df:JZ 0x00003a06
END_OF_LINE
----------------------------------------------
20: free(attr[(long)(i * 2) + 1]);
	000039e4:ADD EAX,EAX
	000039e6:CDQE
	000039e8:ADD RAX,0x1
	000039ec:LEA RDX,[RAX*0x8]
	000039f4:MOV RAX,qword ptr [RBP + -0x18]
	000039f8:ADD RAX,RDX
	000039fb:MOV RAX,qword ptr [RAX]
	000039fe:MOV RDI,RAX
	00003a01:CALL 0x00001250
END_OF_LINE
----------------------------------------------
23: free(__ptr);
	00003a29:CALL 0x00001250
END_OF_LINE
----------------------------------------------
24: free(attr);
	00003a35:CALL 0x00001250
END_OF_LINE
----------------------------------------------
26: return;
	00003a3e:RET
END_OF_LINE



Function: ezxml_parse_str
----------------------------------------------
28: len_local = len;
	00003a59:CALL 0x00005e52
END_OF_LINE
----------------------------------------------
29: s_local = s;
	00003a59:CALL 0x00005e52
END_OF_LINE
----------------------------------------------
30: root = (ezxml_root_t)ezxml_new((char *)0x0);
	00003a59:CALL 0x00005e52
END_OF_LINE
----------------------------------------------
31: a = (char **)0x0;
	00003a62:MOV qword ptr [RBP + -0x20],0x0
END_OF_LINE
----------------------------------------------
32: root->m = s_local;
	00003a72:MOV qword ptr [RAX + 0x58],RDX
END_OF_LINE
----------------------------------------------
33: if (len_local == 0) {
	00003a7a:TEST RAX,RAX
	00003a7d:JNZ 0x00003aa1
END_OF_LINE
----------------------------------------------
34: root = (ezxml_root_t)ezxml_err(root,(char *)0x0,"root tag missing");
	00003a97:CALL 0x00001af0
END_OF_LINE
----------------------------------------------
37: pcVar6 = ezxml_str2utf8(&s_local,&len_local);
	00003aa1:LEA RDX,[RBP + -0x50]
	00003aa5:LEA RAX,[RBP + -0x48]
	00003aa9:MOV RSI,RDX
	00003aac:MOV RDI,RAX
	00003aaf:CALL 0x000035be
END_OF_LINE
----------------------------------------------
38: root->u = pcVar6;
	00003ab8:MOV qword ptr [RDX + 0x68],RAX
END_OF_LINE
----------------------------------------------
39: root->s = s_local;
	00003ac4:MOV qword ptr [RAX + 0x70],RDX
END_OF_LINE
----------------------------------------------
40: root->e = root->s + len_local;
	00003acc:MOV RDX,qword ptr [RAX + 0x70]
	00003ad0:MOV RAX,qword ptr [RBP + -0x50]
	00003ad4:ADD RDX,RAX
	00003ad7:MOV RAX,qword ptr [RBP + -0x18]
	00003adb:MOV qword ptr [RAX + 0x78],RDX
END_OF_LINE
----------------------------------------------
41: e = s_local[len_local - 1];
	00003ae7:SUB RAX,0x1
	00003aeb:ADD RAX,RDX
	00003aee:MOVZX EAX,byte ptr [RAX]
END_OF_LINE
----------------------------------------------
42: s_local[len_local - 1] = '\0';
	00003afc:SUB RAX,0x1
	00003b00:ADD RAX,RDX
	00003b03:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
43: for (; (*s_local != '\0' && (*s_local != '<')); s_local = s_local + 1) {
	00003b0c:ADD RAX,0x1
	00003b10:MOV qword ptr [RBP + -0x48],RAX
	00003b14:MOV RAX,qword ptr [RBP + -0x48]
	00003b18:MOVZX EAX,byte ptr [RAX]
	00003b1b:TEST AL,AL
	00003b1d:JZ 0x00003b2a
	00003b1f:MOV RAX,qword ptr [RBP + -0x48]
	00003b23:MOVZX EAX,byte ptr [RAX]
	00003b26:CMP AL,0x3c
	00003b28:JNZ 0x00003b08
END_OF_LINE
----------------------------------------------
45: if (*s_local == '\0') {
	00003b2e:MOVZX EAX,byte ptr [RAX]
	00003b31:TEST AL,AL
	00003b33:JNZ 0x00003b59
END_OF_LINE
----------------------------------------------
46: root = (ezxml_root_t)ezxml_err(root,s_local,"root tag missing");
	00003b4f:CALL 0x00001af0
END_OF_LINE
----------------------------------------------
49: LAB_00003b59:
	00003b59:LEA RAX,[0x9090]
END_OF_LINE
----------------------------------------------
51: attr = EZXML_NIL;
	00003b60:MOV qword ptr [RBP + -0x28],RAX
END_OF_LINE
----------------------------------------------
52: s_local = s_local + 1;
	00003b68:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
53: d = s_local;
	00003b78:CALL 0x00001450
END_OF_LINE
----------------------------------------------
54: ppuVar7 = __ctype_b_loc();
	00003b78:CALL 0x00001450
END_OF_LINE
----------------------------------------------
55: pcVar6 = s_local;
	00003b78:CALL 0x00001450
END_OF_LINE
----------------------------------------------
56: if ((((((*ppuVar7)[*s_local] & 0x400) == 0) && (*s_local != '_')) && (*s_local != ':')) &&
	00003b7d:MOV RDX,qword ptr [RAX]
	00003b80:MOV RAX,qword ptr [RBP + -0x48]
	00003b84:MOVZX EAX,byte ptr [RAX]
	00003b87:MOVSX RAX,AL
	00003b8b:ADD RAX,RAX
	00003b8e:ADD RAX,RDX
	00003b91:MOVZX EAX,word ptr [RAX]
	00003b94:MOVZX EAX,AX
	00003b97:AND EAX,0x400
	00003b9c:TEST EAX,EAX
	00003b9e:JNZ 0x00003bc5
	00003ba0:MOV RAX,qword ptr [RBP + -0x48]
	00003ba4:MOVZX EAX,byte ptr [RAX]
	00003ba7:CMP AL,0x5f
	00003ba9:JZ 0x00003bc5
	00003bab:MOV RAX,qword ptr [RBP + -0x48]
	00003baf:MOVZX EAX,byte ptr [RAX]
	00003bb2:CMP AL,0x3a
	00003bb4:JZ 0x00003bc5
	00003bb6:MOV RAX,qword ptr [RBP + -0x48]
	00003bba:MOVZX EAX,byte ptr [RAX]
	00003bbd:TEST AL,AL
	00003bbf:JNS 0x0000423b
END_OF_LINE
----------------------------------------------
57: (-1 < *s_local)) {
	00003bba:MOVZX EAX,byte ptr [RAX]
	00003bbd:TEST AL,AL
END_OF_LINE
----------------------------------------------
58: if (*s_local == '/') {
	0000423f:MOVZX EAX,byte ptr [RAX]
	00004242:CMP AL,0x2f
	00004244:JNZ 0x00004339
END_OF_LINE
----------------------------------------------
59: d = s_local + 1;
	0000424e:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
60: sVar9 = strcspn(d,"\t\r\n >");
	00004267:CALL 0x00001340
END_OF_LINE
----------------------------------------------
61: s_local = s_local + sVar9 + 1;
	0000426c:LEA RDX,[RAX + 0x1]
	00004270:MOV RAX,qword ptr [RBP + -0x48]
	00004274:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
62: q = *s_local;
	0000427f:MOVZX EAX,byte ptr [RAX]
END_OF_LINE
----------------------------------------------
63: if ((q == '\0') && (e != '>')) {
	00004285:CMP byte ptr [RBP + -0x3d],0x0
	00004289:JNZ 0x000042b5
	0000428b:CMP byte ptr [RBP + -0x3e],0x3e
	0000428f:JZ 0x000042b5
END_OF_LINE
----------------------------------------------
64: peVar8 = ezxml_err(root,d,"missing >");
	000042ab:CALL 0x00001af0
END_OF_LINE
----------------------------------------------
65: return peVar8;
	000047e4:MOV RBX,qword ptr [RBP + -0x8]
	000047e8:LEAVE
	000047e9:RET
END_OF_LINE
----------------------------------------------
67: *s_local = '\0';
	000042b9:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
68: peVar8 = ezxml_close_tag(root,d,s_local);
	000042ce:CALL 0x00002495
END_OF_LINE
----------------------------------------------
69: if (peVar8 != (ezxml_t.conflict)0x0) {
	000042d3:TEST RAX,RAX
	000042d6:JZ 0x000042e1
END_OF_LINE
----------------------------------------------
70: return &root->xml;
	000047e4:MOV RBX,qword ptr [RBP + -0x8]
	000047e8:LEAVE
	000047e9:RET
END_OF_LINE
----------------------------------------------
72: ppuVar7 = __ctype_b_loc();
	000042e1:CALL 0x00001450
END_OF_LINE
----------------------------------------------
73: pcVar6 = s_local;
	000042e1:CALL 0x00001450
END_OF_LINE
----------------------------------------------
74: puVar2 = *ppuVar7;
	000042e6:MOV RCX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
75: *s_local = q;
	000042f1:MOV byte ptr [RAX],DL
END_OF_LINE
----------------------------------------------
76: if ((puVar2[*s_local] & 0x2000) != 0) {
	000042f3:MOVZX EAX,byte ptr [RAX]
	000042f6:MOVSX RAX,AL
	000042fa:ADD RAX,RAX
	000042fd:ADD RAX,RCX
	00004300:MOVZX EAX,word ptr [RAX]
	00004303:MOVZX EAX,AX
	00004306:AND EAX,0x2000
	0000430b:TEST EAX,EAX
	0000430d:JZ 0x000046c4
END_OF_LINE
----------------------------------------------
77: sVar9 = strspn(s_local,"\t\r\n ");
	00004328:CALL 0x00001330
END_OF_LINE
----------------------------------------------
78: s_local = pcVar6 + sVar9;
	0000432d:ADD RAX,RBX
END_OF_LINE
----------------------------------------------
82: iVar5 = strncmp(s_local,"!--",3);
	0000434f:CALL 0x00001270
END_OF_LINE
----------------------------------------------
83: if (iVar5 == 0) {
	00004354:TEST EAX,EAX
	00004356:JNZ 0x000043e2
END_OF_LINE
----------------------------------------------
84: s_local = strstr(s_local + 3,"--");
	00004360:ADD RAX,0x3
	00004364:LEA RDX,[0x715d]
	0000436b:MOV RSI,RDX
	0000436e:MOV RDI,RAX
	00004371:CALL 0x00001440
END_OF_LINE
----------------------------------------------
85: if (((s_local == (char *)0x0) ||
	0000437e:TEST RAX,RAX
	00004381:JZ 0x000043be
	00004383:MOV RAX,qword ptr [RBP + -0x48]
	00004387:ADD RAX,0x2
	0000438b:MOV qword ptr [RBP + -0x48],RAX
	0000438f:MOV RAX,qword ptr [RBP + -0x48]
	00004393:MOVZX EAX,byte ptr [RAX]
	00004396:CMP AL,0x3e
	00004398:JZ 0x000043a5
	0000439a:MOV RAX,qword ptr [RBP + -0x48]
	0000439e:MOVZX EAX,byte ptr [RAX]
	000043a1:TEST AL,AL
	000043a3:JNZ 0x000043be
	000043a5:MOV RAX,qword ptr [RBP + -0x48]
	000043a9:MOVZX EAX,byte ptr [RAX]
	000043ac:TEST AL,AL
	000043ae:JNZ 0x000046c4
	000043b4:CMP byte ptr [RBP + -0x3e],0x3e
	000043b8:JZ 0x000046c4
END_OF_LINE
----------------------------------------------
86: ((s_local = s_local + 2, *s_local != '>' && (*s_local != '\0')))) ||
	00004387:ADD RAX,0x2
	0000438b:MOV qword ptr [RBP + -0x48],RAX
	0000438f:MOV RAX,qword ptr [RBP + -0x48]
	00004393:MOVZX EAX,byte ptr [RAX]
	00004396:CMP AL,0x3e
	00004398:JZ 0x000043a5
	0000439a:MOV RAX,qword ptr [RBP + -0x48]
	0000439e:MOVZX EAX,byte ptr [RAX]
	000043a1:TEST AL,AL
END_OF_LINE
----------------------------------------------
87: ((*s_local == '\0' && (e != '>')))) {
	000043a9:MOVZX EAX,byte ptr [RAX]
	000043ac:TEST AL,AL
	000043ae:JNZ 0x000046c4
	000043b4:CMP byte ptr [RBP + -0x3e],0x3e
END_OF_LINE
----------------------------------------------
88: peVar8 = ezxml_err(root,d,"unclosed <!--");
	000043d8:CALL 0x00001af0
END_OF_LINE
----------------------------------------------
89: return peVar8;
	000047e4:MOV RBX,qword ptr [RBP + -0x8]
	000047e8:LEAVE
	000047e9:RET
END_OF_LINE
----------------------------------------------
93: iVar5 = strncmp(s_local,"![CDATA[",8);
	000043f8:CALL 0x00001270
END_OF_LINE
----------------------------------------------
94: if (iVar5 == 0) {
	000043fd:TEST EAX,EAX
	000043ff:JNZ 0x00004485
END_OF_LINE
----------------------------------------------
95: s_local = strstr(s_local,"]]>");
	00004416:CALL 0x00001440
END_OF_LINE
----------------------------------------------
96: if (s_local == (char *)0x0) {
	00004423:TEST RAX,RAX
	00004426:JZ 0x00004461
END_OF_LINE
----------------------------------------------
97: peVar8 = ezxml_err(root,d,"unclosed <![CDATA[");
	0000447b:CALL 0x00001af0
END_OF_LINE
----------------------------------------------
98: return peVar8;
	000047e4:MOV RBX,qword ptr [RBP + -0x8]
	000047e8:LEAVE
	000047e9:RET
END_OF_LINE
----------------------------------------------
100: s_local = s_local + 2;
	0000442c:ADD RAX,0x2
END_OF_LINE
----------------------------------------------
101: ezxml_char_content(root,d + 8,(size_t)(s_local + (-10 - (long)d)),'c');
	0000443c:SUB RAX,0xa
	00004440:MOV RDX,RAX
	00004443:MOV RAX,qword ptr [RBP + -0x30]
	00004447:LEA RSI,[RAX + 0x8]
	0000444b:MOV RAX,qword ptr [RBP + -0x18]
	0000444f:MOV ECX,0x63
	00004454:MOV RDI,RAX
	00004457:CALL 0x000022f7
END_OF_LINE
----------------------------------------------
104: iVar5 = strncmp(s_local,"!DOCTYPE",8);
	0000449b:CALL 0x00001270
END_OF_LINE
----------------------------------------------
105: if (iVar5 == 0) {
	000044a0:TEST EAX,EAX
	000044a2:JNZ 0x000045eb
END_OF_LINE
----------------------------------------------
106: l = 0;
	000044a8:MOV dword ptr [RBP + -0x3c],0x0
END_OF_LINE
----------------------------------------------
107: while ((pcVar6 = s_local, *s_local != '\0' &&
	000044f2:MOV RAX,qword ptr [RBP + -0x48]
	000044f6:MOVZX EAX,byte ptr [RAX]
	000044f9:TEST AL,AL
	000044fb:JZ 0x0000454f
	000044fd:CMP dword ptr [RBP + -0x3c],0x0
	00004501:JNZ 0x0000450e
	00004503:MOV RAX,qword ptr [RBP + -0x48]
	00004507:MOVZX EAX,byte ptr [RAX]
	0000450a:CMP AL,0x3e
	0000450c:JNZ 0x000044b1
	0000450e:CMP dword ptr [RBP + -0x3c],0x0
	00004512:JZ 0x0000454f
	00004514:MOV RAX,qword ptr [RBP + -0x48]
	00004518:MOVZX EAX,byte ptr [RAX]
	0000451b:CMP AL,0x5d
	0000451d:JNZ 0x000044b1
	0000451f:MOV RBX,qword ptr [RBP + -0x48]
	00004523:MOV RAX,qword ptr [RBP + -0x48]
	00004527:ADD RAX,0x1
	0000452b:LEA RDX,[0x7043]
	00004532:MOV RSI,RDX
	00004535:MOV RDI,RAX
	00004538:CALL 0x00001330
	0000453d:ADD RAX,0x1
	00004541:ADD RAX,RBX
	00004544:MOVZX EAX,byte ptr [RAX]
	00004547:CMP AL,0x3e
	00004549:JNZ 0x000044b1
END_OF_LINE
----------------------------------------------
108: (((l == 0 && (*s_local != '>')) ||
	000044fd:CMP dword ptr [RBP + -0x3c],0x0
	00004501:JNZ 0x0000450e
	00004503:MOV RAX,qword ptr [RBP + -0x48]
	00004507:MOVZX EAX,byte ptr [RAX]
	0000450a:CMP AL,0x3e
END_OF_LINE
----------------------------------------------
109: ((l != 0 &&
	0000450e:CMP dword ptr [RBP + -0x3c],0x0
END_OF_LINE
----------------------------------------------
110: ((*s_local != ']' ||
	00004518:MOVZX EAX,byte ptr [RAX]
	0000451b:CMP AL,0x5d
END_OF_LINE
----------------------------------------------
111: (sVar9 = strspn(s_local + 1,"\t\r\n "), pcVar6[sVar9 + 1] != '>'))))))))
	00004527:ADD RAX,0x1
	0000452b:LEA RDX,[0x7043]
	00004532:MOV RSI,RDX
	00004535:MOV RDI,RAX
	00004538:CALL 0x00001330
	0000453d:ADD RAX,0x1
	00004541:ADD RAX,RBX
	00004544:MOVZX EAX,byte ptr [RAX]
	00004547:CMP AL,0x3e
END_OF_LINE
----------------------------------------------
113: pcVar6 = s_local;
	000044b1:MOV RBX,qword ptr [RBP + -0x48]
END_OF_LINE
----------------------------------------------
114: sVar9 = strcspn(s_local + 1,"[]>");
	000044b9:ADD RAX,0x1
	000044bd:LEA RDX,[0x7197]
	000044c4:MOV RSI,RDX
	000044c7:MOV RDI,RAX
	000044ca:CALL 0x00001340
END_OF_LINE
----------------------------------------------
115: s_local = pcVar6 + sVar9 + 1;
	000044cf:ADD RAX,0x1
	000044d3:ADD RAX,RBX
END_OF_LINE
----------------------------------------------
116: if (*s_local == '[') {
	000044de:MOVZX EAX,byte ptr [RAX]
	000044e1:CMP AL,0x5b
	000044e3:JZ 0x000044ea
END_OF_LINE
----------------------------------------------
117: l = 1;
	000044ea:MOV EAX,0x1
END_OF_LINE
----------------------------------------------
120: if ((*s_local == '\0') && (e != '>')) {
	00004553:MOVZX EAX,byte ptr [RAX]
	00004556:TEST AL,AL
	00004558:JNZ 0x00004584
	0000455a:CMP byte ptr [RBP + -0x3e],0x3e
	0000455e:JZ 0x00004584
END_OF_LINE
----------------------------------------------
121: peVar8 = ezxml_err(root,d,"unclosed <!DOCTYPE");
	0000457a:CALL 0x00001af0
END_OF_LINE
----------------------------------------------
122: return peVar8;
	000047e4:MOV RBX,qword ptr [RBP + -0x8]
	000047e8:LEAVE
	000047e9:RET
END_OF_LINE
----------------------------------------------
124: if (l != 0) {
	00004584:CMP dword ptr [RBP + -0x3c],0x0
	00004588:JZ 0x000045a1
END_OF_LINE
----------------------------------------------
125: pcVar6 = strchr(d,0x5b);
	00004596:CALL 0x000012f0
END_OF_LINE
----------------------------------------------
126: d = pcVar6 + 1;
	0000459b:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
128: if (l != 0) {
	000045a9:CMP dword ptr [RBP + -0x3c],0x0
	000045ad:JZ 0x000046c4
END_OF_LINE
----------------------------------------------
129: len_00 = (long)s_local - (long)d;
	000045bf:SUB RAX,qword ptr [RBP + -0x30]
END_OF_LINE
----------------------------------------------
130: s_local = s_local + 1;
	000045b7:LEA RDX,[RAX + 0x1]
	000045bb:MOV qword ptr [RBP + -0x48],RDX
	000045bf:SUB RAX,qword ptr [RBP + -0x30]
	000045c3:MOV RDX,RAX
	000045c6:MOV RCX,qword ptr [RBP + -0x30]
	000045ca:MOV RAX,qword ptr [RBP + -0x18]
	000045ce:MOV RSI,RCX
	000045d1:MOV RDI,RAX
	000045d4:CALL 0x00002b03
END_OF_LINE
----------------------------------------------
131: sVar4 = ezxml_internal_dtd(root,d,len_00);
	000045d4:CALL 0x00002b03
END_OF_LINE
----------------------------------------------
132: if (sVar4 == 0) {
	000045d9:TEST AX,AX
	000045dc:JNZ 0x000046c4
END_OF_LINE
----------------------------------------------
133: return &root->xml;
	000047e4:MOV RBX,qword ptr [RBP + -0x8]
	000047e8:LEAVE
	000047e9:RET
END_OF_LINE
----------------------------------------------
138: if (*s_local != '?') {
	000045ef:MOVZX EAX,byte ptr [RAX]
	000045f2:CMP AL,0x3f
	000045f4:JNZ 0x000046a0
END_OF_LINE
----------------------------------------------
139: peVar8 = ezxml_err(root,d,"unexpected <");
	000046ba:CALL 0x00001af0
END_OF_LINE
----------------------------------------------
140: return peVar8;
	000047e4:MOV RBX,qword ptr [RBP + -0x8]
	000047e8:LEAVE
	000047e9:RET
END_OF_LINE
----------------------------------------------
143: s_local = strchr(s_local,0x3f);
	00004606:CALL 0x000012f0
END_OF_LINE
----------------------------------------------
144: if ((s_local == (char *)0x0) || (s_local = s_local + 1, *s_local == '\0'))
	00004613:TEST RAX,RAX
	00004616:JZ 0x0000463a
	00004618:MOV RAX,qword ptr [RBP + -0x48]
	0000461c:ADD RAX,0x1
	00004620:MOV qword ptr [RBP + -0x48],RAX
	00004624:MOV RAX,qword ptr [RBP + -0x48]
	00004628:MOVZX EAX,byte ptr [RAX]
	0000462b:TEST AL,AL
	0000462d:JZ 0x0000463a
END_OF_LINE
----------------------------------------------
146: } while (*s_local != '>');
	00004633:MOVZX EAX,byte ptr [RAX]
	00004636:CMP AL,0x3e
	00004638:JNZ 0x000045fa
END_OF_LINE
----------------------------------------------
147: if ((s_local == (char *)0x0) || ((*s_local == '\0' && (e != '>')))) {
	0000463e:TEST RAX,RAX
	00004641:JZ 0x00004654
	00004643:MOV RAX,qword ptr [RBP + -0x48]
	00004647:MOVZX EAX,byte ptr [RAX]
	0000464a:TEST AL,AL
	0000464c:JNZ 0x00004678
	0000464e:CMP byte ptr [RBP + -0x3e],0x3e
	00004652:JZ 0x00004678
END_OF_LINE
----------------------------------------------
148: peVar8 = ezxml_err(root,d,"unclosed <?");
	0000466e:CALL 0x00001af0
END_OF_LINE
----------------------------------------------
149: return peVar8;
	000047e4:MOV RBX,qword ptr [RBP + -0x8]
	000047e8:LEAVE
	000047e9:RET
END_OF_LINE
----------------------------------------------
151: ezxml_proc_inst(root,d + 1,(size_t)(s_local + (-2 - (long)d)));
	00004680:SUB RAX,0x2
	00004684:MOV RDX,RAX
	00004687:MOV RAX,qword ptr [RBP + -0x30]
	0000468b:LEA RCX,[RAX + 0x1]
	0000468f:MOV RAX,qword ptr [RBP + -0x18]
	00004693:MOV RSI,RCX
	00004696:MOV RDI,RAX
	00004699:CALL 0x00002680
END_OF_LINE
----------------------------------------------
158: if (root->cur == (ezxml_t.conflict)0x0) {
	00003bc9:MOV RAX,qword ptr [RAX + 0x50]
	00003bcd:TEST RAX,RAX
	00003bd0:JNZ 0x00003bf6
END_OF_LINE
----------------------------------------------
159: peVar8 = ezxml_err(root,d,"markup outside of root element");
	00003bec:CALL 0x00001af0
END_OF_LINE
----------------------------------------------
160: return peVar8;
	000047e4:MOV RBX,qword ptr [RBP + -0x8]
	000047e8:LEAVE
	000047e9:RET
END_OF_LINE
----------------------------------------------
162: sVar9 = strcspn(s_local,"\t\r\n />");
	00003c0b:CALL 0x00001340
END_OF_LINE
----------------------------------------------
163: s_local = pcVar6 + sVar9;
	00003c10:ADD RAX,RBX
	00003c13:MOV qword ptr [RBP + -0x48],RAX
	00003c17:JMP 0x00003c28
END_OF_LINE
----------------------------------------------
164: while (ppuVar7 = __ctype_b_loc(), ((*ppuVar7)[*s_local] & 0x2000) != 0) {
	00003c28:CALL 0x00001450
	00003c2d:MOV RDX,qword ptr [RAX]
	00003c30:MOV RAX,qword ptr [RBP + -0x48]
	00003c34:MOVZX EAX,byte ptr [RAX]
	00003c37:MOVSX RAX,AL
	00003c3b:ADD RAX,RAX
	00003c3e:ADD RAX,RDX
	00003c41:MOVZX EAX,word ptr [RAX]
	00003c44:MOVZX EAX,AX
	00003c47:AND EAX,0x2000
	00003c4c:TEST EAX,EAX
	00003c4e:JNZ 0x00003c19
END_OF_LINE
----------------------------------------------
165: *s_local = '\0';
	00003c25:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
166: s_local = s_local + 1;
	00003c1d:LEA RDX,[RAX + 0x1]
	00003c21:MOV qword ptr [RBP + -0x48],RDX
	00003c25:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
168: if (((*s_local != '\0') && (*s_local != '/')) && (*s_local != '>')) {
	00003c54:MOVZX EAX,byte ptr [RAX]
	00003c57:TEST AL,AL
	00003c59:JZ 0x00003cbd
	00003c5b:MOV RAX,qword ptr [RBP + -0x48]
	00003c5f:MOVZX EAX,byte ptr [RAX]
	00003c62:CMP AL,0x2f
	00003c64:JZ 0x00003cbd
	00003c66:MOV RAX,qword ptr [RBP + -0x48]
	00003c6a:MOVZX EAX,byte ptr [RAX]
	00003c6d:CMP AL,0x3e
	00003c6f:JZ 0x00003cbd
END_OF_LINE
----------------------------------------------
169: i = 0;
	00003c71:MOV dword ptr [RBP + -0x38],0x0
END_OF_LINE
----------------------------------------------
170: while ((a = root->attr[i], a != (char **)0x0 && (iVar5 = strcmp(*a,d), iVar5 != 0))) {
	00003c82:MOV RDX,qword ptr [RAX + 0x88]
	00003c89:MOV EAX,dword ptr [RBP + -0x38]
	00003c8c:CDQE
	00003c8e:SHL RAX,0x3
	00003c92:ADD RAX,RDX
	00003c95:MOV RAX,qword ptr [RAX]
	00003c98:MOV qword ptr [RBP + -0x20],RAX
	00003c9c:CMP qword ptr [RBP + -0x20],0x0
	00003ca1:JZ 0x00003cbd
	00003ca3:MOV RAX,qword ptr [RBP + -0x20]
	00003ca7:MOV RAX,qword ptr [RAX]
	00003caa:MOV RDX,qword ptr [RBP + -0x30]
	00003cae:MOV RSI,RDX
	00003cb1:MOV RDI,RAX
	00003cb4:CALL 0x00001360
	00003cb9:TEST EAX,EAX
	00003cbb:JNZ 0x00003c7a
END_OF_LINE
----------------------------------------------
171: i = i + 1;
	00003c7a:ADD dword ptr [RBP + -0x38],0x1
END_OF_LINE
----------------------------------------------
174: l = 0;
	00003cbd:MOV dword ptr [RBP + -0x3c],0x0
END_OF_LINE
----------------------------------------------
175: while (((*s_local != '\0' && (*s_local != '/')) && (*s_local != '>'))) {
	000040e8:MOVZX EAX,byte ptr [RAX]
	000040eb:TEST AL,AL
	000040ed:JZ 0x00004109
	000040ef:MOV RAX,qword ptr [RBP + -0x48]
	000040f3:MOVZX EAX,byte ptr [RAX]
	000040f6:CMP AL,0x2f
	000040f8:JZ 0x00004109
	000040fa:MOV RAX,qword ptr [RBP + -0x48]
	000040fe:MOVZX EAX,byte ptr [RAX]
	00004101:CMP AL,0x3e
	00004103:JNZ 0x00003cc9
END_OF_LINE
----------------------------------------------
176: if (l == 0) {
	00003cc9:CMP dword ptr [RBP + -0x3c],0x0
	00003ccd:JZ 0x00003cf0
END_OF_LINE
----------------------------------------------
177: attr = (char **)malloc(0x20);
	00003cf5:CALL 0x000013a0
END_OF_LINE
----------------------------------------------
180: attr = (char **)realloc(attr,(long)(l + 4) * 8);
	00003cd2:ADD EAX,0x4
	00003cd5:CDQE
	00003cd7:LEA RDX,[RAX*0x8]
	00003cdf:MOV RAX,qword ptr [RBP + -0x28]
	00003ce3:MOV RSI,RDX
	00003ce6:MOV RDI,RAX
	00003ce9:CALL 0x000013b0
END_OF_LINE
----------------------------------------------
182: if (l == 0) {
	00003cfe:CMP dword ptr [RBP + -0x3c],0x0
	00003d02:JZ 0x00003d3e
END_OF_LINE
----------------------------------------------
183: pcVar6 = (char *)malloc(2);
	00003d43:CALL 0x000013a0
END_OF_LINE
----------------------------------------------
186: pcVar6 = (char *)realloc(attr[(long)l + 1],(long)(l / 2 + 2));
	00003d0e:SAR EAX,0x1
	00003d10:ADD EAX,0x2
	00003d13:MOVSXD RDX,EAX
	00003d16:MOV EAX,dword ptr [RBP + -0x3c]
	00003d19:CDQE
	00003d1b:ADD RAX,0x1
	00003d1f:LEA RCX,[RAX*0x8]
	00003d27:MOV RAX,qword ptr [RBP + -0x28]
	00003d2b:ADD RAX,RCX
	00003d2e:MOV RAX,qword ptr [RAX]
	00003d31:MOV RSI,RDX
	00003d34:MOV RDI,RAX
	00003d37:CALL 0x000013b0
END_OF_LINE
----------------------------------------------
188: pcVar3 = s_local;
	00003d48:MOV EDX,dword ptr [RBP + -0x3c]
END_OF_LINE
----------------------------------------------
189: attr[(long)l + 3] = pcVar6;
	00003d4b:MOVSXD RDX,EDX
	00003d4e:ADD RDX,0x3
	00003d52:LEA RCX,[RDX*0x8]
	00003d5a:MOV RDX,qword ptr [RBP + -0x28]
	00003d5e:ADD RDX,RCX
	00003d61:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
190: *(undefined2 *)(attr[(long)l + 3] + l / 2) = 0x20;
	00003d67:CDQE
	00003d69:ADD RAX,0x3
	00003d6d:LEA RDX,[RAX*0x8]
	00003d75:MOV RAX,qword ptr [RBP + -0x28]
	00003d79:ADD RAX,RDX
	00003d7c:MOV RDX,qword ptr [RAX]
	00003d7f:MOV EAX,dword ptr [RBP + -0x3c]
	00003d82:MOV ECX,EAX
	00003d84:SHR ECX,0x1f
	00003d87:ADD EAX,ECX
	00003d89:SAR EAX,0x1
	00003d8b:CDQE
	00003d8d:ADD RAX,RDX
	00003d90:MOV word ptr [RAX],0x20
END_OF_LINE
----------------------------------------------
191: attr[(long)l + 2] = (char *)0x0;
	00003d98:CDQE
	00003d9a:ADD RAX,0x2
	00003d9e:LEA RDX,[RAX*0x8]
	00003da6:MOV RAX,qword ptr [RBP + -0x28]
	00003daa:ADD RAX,RDX
	00003dad:MOV qword ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
192: attr[(long)l + 1] = "";
	00003db7:CDQE
	00003db9:ADD RAX,0x1
	00003dbd:LEA RDX,[RAX*0x8]
	00003dc5:MOV RAX,qword ptr [RBP + -0x28]
	00003dc9:ADD RAX,RDX
	00003dcc:LEA RDX,[0x7063]
	00003dd3:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
193: attr[l] = s_local;
	00003dd9:CDQE
	00003ddb:LEA RDX,[RAX*0x8]
	00003de3:MOV RAX,qword ptr [RBP + -0x28]
	00003de7:ADD RDX,RAX
	00003dea:MOV RAX,qword ptr [RBP + -0x48]
	00003dee:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
194: sVar9 = strcspn(s_local,"\t\r\n =/>");
	00003e06:CALL 0x00001340
END_OF_LINE
----------------------------------------------
195: s_local = pcVar3 + sVar9;
	00003e0b:ADD RAX,RBX
END_OF_LINE
----------------------------------------------
196: if ((*s_local == '=') ||
	00003e16:MOVZX EAX,byte ptr [RAX]
	00003e19:CMP AL,0x3d
	00003e1b:JZ 0x00003e49
	00003e1d:CALL 0x00001450
	00003e22:MOV RDX,qword ptr [RAX]
	00003e25:MOV RAX,qword ptr [RBP + -0x48]
	00003e29:MOVZX EAX,byte ptr [RAX]
	00003e2c:MOVSX RAX,AL
	00003e30:ADD RAX,RAX
	00003e33:ADD RAX,RDX
	00003e36:MOVZX EAX,word ptr [RAX]
	00003e39:MOVZX EAX,AX
	00003e3c:AND EAX,0x2000
	00003e41:TEST EAX,EAX
	00003e43:JZ 0x000040b8
END_OF_LINE
----------------------------------------------
197: (ppuVar7 = __ctype_b_loc(), ((*ppuVar7)[*s_local] & 0x2000) != 0)) {
	00003e1d:CALL 0x00001450
	00003e22:MOV RDX,qword ptr [RAX]
	00003e25:MOV RAX,qword ptr [RBP + -0x48]
	00003e29:MOVZX EAX,byte ptr [RAX]
	00003e2c:MOVSX RAX,AL
	00003e30:ADD RAX,RAX
	00003e33:ADD RAX,RDX
	00003e36:MOVZX EAX,word ptr [RAX]
	00003e39:MOVZX EAX,AX
	00003e3c:AND EAX,0x2000
	00003e41:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
198: pcVar6 = s_local + 1;
	00003e4d:LEA RDX,[RAX + 0x1]
END_OF_LINE
----------------------------------------------
199: *s_local = '\0';
	00003e55:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
200: s_local = pcVar6;
	00003e6d:CALL 0x00001330
END_OF_LINE
----------------------------------------------
201: sVar9 = strspn(pcVar6,"\t\r\n =");
	00003e6d:CALL 0x00001330
END_OF_LINE
----------------------------------------------
202: s_local = pcVar6 + sVar9;
	00003e72:ADD RAX,RBX
END_OF_LINE
----------------------------------------------
203: q = *s_local;
	00003e7d:MOVZX EAX,byte ptr [RAX]
END_OF_LINE
----------------------------------------------
204: if ((q == '\"') || (q == '\'')) {
	00003e83:CMP byte ptr [RBP + -0x3d],0x22
	00003e87:JZ 0x00003e93
	00003e89:CMP byte ptr [RBP + -0x3d],0x27
	00003e8d:JNZ 0x000040b8
END_OF_LINE
----------------------------------------------
205: s_local = s_local + 1;
	00003e97:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
206: attr[(long)l + 1] = s_local;
	00003ea2:CDQE
	00003ea4:ADD RAX,0x1
	00003ea8:LEA RDX,[RAX*0x8]
	00003eb0:MOV RAX,qword ptr [RBP + -0x28]
	00003eb4:ADD RDX,RAX
	00003eb7:MOV RAX,qword ptr [RBP + -0x48]
	00003ebb:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
207: for (; (*s_local != '\0' && (q != *s_local)); s_local = s_local + 1) {
	00003ec4:ADD RAX,0x1
	00003ec8:MOV qword ptr [RBP + -0x48],RAX
	00003ecc:MOV RAX,qword ptr [RBP + -0x48]
	00003ed0:MOVZX EAX,byte ptr [RAX]
	00003ed3:TEST AL,AL
	00003ed5:JZ 0x00003ee3
	00003ed7:MOV RAX,qword ptr [RBP + -0x48]
	00003edb:MOVZX EAX,byte ptr [RAX]
	00003ede:CMP byte ptr [RBP + -0x3d],AL
	00003ee1:JNZ 0x00003ec0
END_OF_LINE
----------------------------------------------
209: if (*s_local == '\0') {
	00003ee7:MOVZX EAX,byte ptr [RAX]
	00003eea:TEST AL,AL
	00003eec:JZ 0x00003f06
END_OF_LINE
----------------------------------------------
210: ezxml_free_attr(attr);
	00003f0d:CALL 0x00003915
END_OF_LINE
----------------------------------------------
211: peVar8 = ezxml_err(root,d,"missing %c",(ulong)(uint)(int)q);
	00003f12:MOVSX EDX,byte ptr [RBP + -0x3d]
	00003f16:MOV RSI,qword ptr [RBP + -0x30]
	00003f1a:MOV RAX,qword ptr [RBP + -0x18]
	00003f1e:MOV ECX,EDX
	00003f20:LEA RDX,[0x7144]
	00003f27:MOV RDI,RAX
	00003f2a:MOV EAX,0x0
	00003f2f:CALL 0x00001af0
END_OF_LINE
----------------------------------------------
212: return peVar8;
	000047e4:MOV RBX,qword ptr [RBP + -0x8]
	000047e8:LEAVE
	000047e9:RET
END_OF_LINE
----------------------------------------------
214: *s_local = '\0';
	00003efa:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
215: j = 1;
	00003efd:MOV dword ptr [RBP + -0x34],0x1
END_OF_LINE
----------------------------------------------
216: s_local = s_local + 1;
	00003ef2:LEA RDX,[RAX + 0x1]
	00003ef6:MOV qword ptr [RBP + -0x48],RDX
	00003efa:MOV byte ptr [RAX],0x0
	00003efd:MOV dword ptr [RBP + -0x34],0x1
	00003f04:JMP 0x00003f3d
END_OF_LINE
----------------------------------------------
217: while (((a != (char **)0x0 && (a[j] != (char *)0x0)) &&
	00003f3d:CMP qword ptr [RBP + -0x20],0x0
	00003f42:JZ 0x00003f9d
	00003f44:MOV EAX,dword ptr [RBP + -0x34]
	00003f47:CDQE
	00003f49:LEA RDX,[RAX*0x8]
	00003f51:MOV RAX,qword ptr [RBP + -0x20]
	00003f55:ADD RAX,RDX
	00003f58:MOV RAX,qword ptr [RAX]
	00003f5b:TEST RAX,RAX
	00003f5e:JZ 0x00003f9d
	00003f60:MOV EAX,dword ptr [RBP + -0x3c]
	00003f63:CDQE
	00003f65:LEA RDX,[RAX*0x8]
	00003f6d:MOV RAX,qword ptr [RBP + -0x28]
	00003f71:ADD RAX,RDX
	00003f74:MOV RDX,qword ptr [RAX]
	00003f77:MOV EAX,dword ptr [RBP + -0x34]
	00003f7a:CDQE
	00003f7c:LEA RCX,[RAX*0x8]
	00003f84:MOV RAX,qword ptr [RBP + -0x20]
	00003f88:ADD RAX,RCX
	00003f8b:MOV RAX,qword ptr [RAX]
	00003f8e:MOV RSI,RDX
	00003f91:MOV RDI,RAX
	00003f94:CALL 0x00001360
	00003f99:TEST EAX,EAX
	00003f9b:JNZ 0x00003f39
END_OF_LINE
----------------------------------------------
218: (iVar5 = strcmp(a[j],attr[l]), iVar5 != 0))) {
	00003f63:CDQE
	00003f65:LEA RDX,[RAX*0x8]
	00003f6d:MOV RAX,qword ptr [RBP + -0x28]
	00003f71:ADD RAX,RDX
	00003f74:MOV RDX,qword ptr [RAX]
	00003f77:MOV EAX,dword ptr [RBP + -0x34]
	00003f7a:CDQE
	00003f7c:LEA RCX,[RAX*0x8]
	00003f84:MOV RAX,qword ptr [RBP + -0x20]
	00003f88:ADD RAX,RCX
	00003f8b:MOV RAX,qword ptr [RAX]
	00003f8e:MOV RSI,RDX
	00003f91:MOV RDI,RAX
	00003f94:CALL 0x00001360
	00003f99:TEST EAX,EAX
END_OF_LINE
----------------------------------------------
219: j = j + 3;
	00003f39:ADD dword ptr [RBP + -0x34],0x3
END_OF_LINE
----------------------------------------------
221: if ((a == (char **)0x0) || (a[j] == (char *)0x0)) {
	00003f9d:CMP qword ptr [RBP + -0x20],0x0
	00003fa2:JZ 0x00003fe3
	00003fa4:MOV EAX,dword ptr [RBP + -0x34]
	00003fa7:CDQE
	00003fa9:LEA RDX,[RAX*0x8]
	00003fb1:MOV RAX,qword ptr [RBP + -0x20]
	00003fb5:ADD RAX,RDX
	00003fb8:MOV RAX,qword ptr [RAX]
	00003fbb:TEST RAX,RAX
	00003fbe:JZ 0x00003fe3
END_OF_LINE
----------------------------------------------
222: t = ' ';
	00003fe3:MOV EAX,0x20
END_OF_LINE
----------------------------------------------
225: t = *a[(long)j + 2];
	00003fc3:CDQE
	00003fc5:ADD RAX,0x2
	00003fc9:LEA RDX,[RAX*0x8]
	00003fd1:MOV RAX,qword ptr [RBP + -0x20]
	00003fd5:ADD RAX,RDX
	00003fd8:MOV RAX,qword ptr [RAX]
	00003fdb:MOVZX EAX,byte ptr [RAX]
END_OF_LINE
----------------------------------------------
227: ppcVar1 = attr + (long)l + 1;
	00004012:MOVSXD RDX,EDX
	00004015:ADD RDX,0x1
	00004019:LEA RDI,[RDX*0x8]
	00004021:MOV RDX,qword ptr [RBP + -0x28]
	00004025:LEA RBX,[RDI + RDX*0x1]
END_OF_LINE
----------------------------------------------
228: pcVar6 = ezxml_decode(attr[(long)l + 1],root->ent,t);
	00003fec:MOV RSI,qword ptr [RDX + 0x80]
	00003ff3:MOV EDX,dword ptr [RBP + -0x3c]
	00003ff6:MOVSXD RDX,EDX
	00003ff9:ADD RDX,0x1
	00003ffd:LEA RCX,[RDX*0x8]
	00004005:MOV RDX,qword ptr [RBP + -0x28]
	00004009:ADD RDX,RCX
	0000400c:MOV RCX,qword ptr [RDX]
	0000400f:MOV EDX,dword ptr [RBP + -0x3c]
	00004012:MOVSXD RDX,EDX
	00004015:ADD RDX,0x1
	00004019:LEA RDI,[RDX*0x8]
	00004021:MOV RDX,qword ptr [RBP + -0x28]
	00004025:LEA RBX,[RDI + RDX*0x1]
	00004029:MOV EDX,EAX
	0000402b:MOV RDI,RCX
	0000402e:CALL 0x00001c55
END_OF_LINE
----------------------------------------------
229: *ppcVar1 = pcVar6;
	00004033:MOV qword ptr [RBX],RAX
END_OF_LINE
----------------------------------------------
230: if ((attr[(long)l + 1] < d) || (s_local < attr[(long)l + 1])) {
	00004039:CDQE
	0000403b:ADD RAX,0x1
	0000403f:LEA RDX,[RAX*0x8]
	00004047:MOV RAX,qword ptr [RBP + -0x28]
	0000404b:ADD RAX,RDX
	0000404e:MOV RAX,qword ptr [RAX]
	00004051:CMP qword ptr [RBP + -0x30],RAX
	00004055:JA 0x0000407b
	00004057:MOV EAX,dword ptr [RBP + -0x3c]
	0000405a:CDQE
	0000405c:ADD RAX,0x1
	00004060:LEA RDX,[RAX*0x8]
	00004068:MOV RAX,qword ptr [RBP + -0x28]
	0000406c:ADD RAX,RDX
	0000406f:MOV RDX,qword ptr [RAX]
	00004072:MOV RAX,qword ptr [RBP + -0x48]
	00004076:CMP RDX,RAX
	00004079:JBE 0x000040b8
END_OF_LINE
----------------------------------------------
231: attr[(long)l + 3][l / 2] = '@';
	0000407e:CDQE
	00004080:ADD RAX,0x3
	00004084:LEA RDX,[RAX*0x8]
	0000408c:MOV RAX,qword ptr [RBP + -0x28]
	00004090:ADD RAX,RDX
	00004093:MOV RDX,qword ptr [RAX]
	00004096:MOV EAX,dword ptr [RBP + -0x3c]
	00004099:MOV ECX,EAX
	0000409b:SHR ECX,0x1f
	0000409e:ADD EAX,ECX
	000040a0:SAR EAX,0x1
	000040a2:CDQE
	000040a4:ADD RAX,RDX
	000040a7:MOV byte ptr [RAX],0x40
END_OF_LINE
----------------------------------------------
235: while (ppuVar7 = __ctype_b_loc(), ((*ppuVar7)[*s_local] & 0x2000) != 0) {
	000040b8:CALL 0x00001450
	000040bd:MOV RDX,qword ptr [RAX]
	000040c0:MOV RAX,qword ptr [RBP + -0x48]
	000040c4:MOVZX EAX,byte ptr [RAX]
	000040c7:MOVSX RAX,AL
	000040cb:ADD RAX,RAX
	000040ce:ADD RAX,RDX
	000040d1:MOVZX EAX,word ptr [RAX]
	000040d4:MOVZX EAX,AX
	000040d7:AND EAX,0x2000
	000040dc:TEST EAX,EAX
	000040de:JNZ 0x000040ac
END_OF_LINE
----------------------------------------------
236: s_local = s_local + 1;
	000040b0:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
238: l = l + 2;
	000040e0:ADD dword ptr [RBP + -0x3c],0x2
END_OF_LINE
----------------------------------------------
240: if (*s_local == '/') {
	0000410d:MOVZX EAX,byte ptr [RAX]
	00004110:CMP AL,0x2f
	00004112:JNZ 0x000041b7
END_OF_LINE
----------------------------------------------
241: pcVar6 = s_local + 1;
	0000411c:LEA RDX,[RAX + 0x1]
END_OF_LINE
----------------------------------------------
242: *s_local = '\0';
	00004124:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
243: s_local = pcVar6;
	00004130:JZ 0x0000413d
END_OF_LINE
----------------------------------------------
244: if (((*pcVar6 != '\0') && (*pcVar6 != '>')) || ((*pcVar6 == '\0' && (e != '>')))) {
	0000412b:MOVZX EAX,byte ptr [RAX]
	0000412e:TEST AL,AL
	00004130:JZ 0x0000413d
	00004132:MOV RAX,qword ptr [RBP + -0x48]
	00004136:MOVZX EAX,byte ptr [RAX]
	00004139:CMP AL,0x3e
	0000413b:JNZ 0x0000414e
	0000413d:MOV RAX,qword ptr [RBP + -0x48]
	00004141:MOVZX EAX,byte ptr [RAX]
	00004144:TEST AL,AL
	00004146:JNZ 0x00004184
	00004148:CMP byte ptr [RBP + -0x3e],0x3e
	0000414c:JZ 0x00004184
END_OF_LINE
----------------------------------------------
245: if (l != 0) {
	0000414e:CMP dword ptr [RBP + -0x3c],0x0
	00004152:JZ 0x00004160
END_OF_LINE
----------------------------------------------
246: ezxml_free_attr(attr);
	0000415b:CALL 0x00003915
END_OF_LINE
----------------------------------------------
248: peVar8 = ezxml_err(root,d,"missing >");
	0000417a:CALL 0x00001af0
END_OF_LINE
----------------------------------------------
249: return peVar8;
	000047e4:MOV RBX,qword ptr [RBP + -0x8]
	000047e8:LEAVE
	000047e9:RET
END_OF_LINE
----------------------------------------------
251: ezxml_open_tag(root,d,attr);
	00004196:CALL 0x00002275
END_OF_LINE
----------------------------------------------
252: ezxml_close_tag(root,d,s_local);
	000041ad:CALL 0x00002495
END_OF_LINE
----------------------------------------------
255: q = *s_local;
	000041bb:MOVZX EAX,byte ptr [RAX]
END_OF_LINE
----------------------------------------------
256: if ((q != '>') && ((*s_local != '\0' || (e != '>')))) {
	000041c1:CMP byte ptr [RBP + -0x3d],0x3e
	000041c5:JZ 0x000041d8
	000041c7:MOV RAX,qword ptr [RBP + -0x48]
	000041cb:MOVZX EAX,byte ptr [RAX]
	000041ce:TEST AL,AL
	000041d0:JNZ 0x00004205
	000041d2:CMP byte ptr [RBP + -0x3e],0x3e
	000041d6:JNZ 0x00004205
END_OF_LINE
----------------------------------------------
257: if (l != 0) {
	00004205:CMP dword ptr [RBP + -0x3c],0x0
	00004209:JZ 0x00004217
END_OF_LINE
----------------------------------------------
258: ezxml_free_attr(attr);
	00004212:CALL 0x00003915
END_OF_LINE
----------------------------------------------
260: peVar8 = ezxml_err(root,d,"missing >");
	00004231:CALL 0x00001af0
END_OF_LINE
----------------------------------------------
261: return peVar8;
	000047e4:MOV RBX,qword ptr [RBP + -0x8]
	000047e8:LEAVE
	000047e9:RET
END_OF_LINE
----------------------------------------------
263: *s_local = '\0';
	000041dc:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
264: ezxml_open_tag(root,d,attr);
	000041f1:CALL 0x00002275
END_OF_LINE
----------------------------------------------
265: *s_local = q;
	000041fe:MOV byte ptr [RAX],DL
END_OF_LINE
----------------------------------------------
268: if ((s_local == (char *)0x0) || (*s_local == '\0')) break;
	000046c8:TEST RAX,RAX
	000046cb:JZ 0x00004776
	000046d1:MOV RAX,qword ptr [RBP + -0x48]
	000046d5:MOVZX EAX,byte ptr [RAX]
	000046d8:TEST AL,AL
	000046da:JZ 0x00004776
END_OF_LINE
----------------------------------------------
269: *s_local = '\0';
	000046e4:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
270: d = s_local + 1;
	000046eb:ADD RAX,0x1
END_OF_LINE
----------------------------------------------
271: s_local = d;
	00004704:JZ 0x00004762
END_OF_LINE
----------------------------------------------
272: if ((*d != '\0') && (*d != '<')) {
	000046ff:MOVZX EAX,byte ptr [RAX]
	00004702:TEST AL,AL
	00004704:JZ 0x00004762
	00004706:MOV RAX,qword ptr [RBP + -0x48]
	0000470a:MOVZX EAX,byte ptr [RAX]
	0000470d:CMP AL,0x3c
	0000470f:JZ 0x00004762
END_OF_LINE
----------------------------------------------
273: for (; (*s_local != '\0' && (*s_local != '<')); s_local = s_local + 1) {
	00004717:ADD RAX,0x1
	0000471b:MOV qword ptr [RBP + -0x48],RAX
	0000471f:MOV RAX,qword ptr [RBP + -0x48]
	00004723:MOVZX EAX,byte ptr [RAX]
	00004726:TEST AL,AL
	00004728:JZ 0x00004735
	0000472a:MOV RAX,qword ptr [RBP + -0x48]
	0000472e:MOVZX EAX,byte ptr [RAX]
	00004731:CMP AL,0x3c
	00004733:JNZ 0x00004713
END_OF_LINE
----------------------------------------------
275: if (*s_local == '\0') break;
	00004739:MOVZX EAX,byte ptr [RAX]
	0000473c:TEST AL,AL
	0000473e:JZ 0x00004772
END_OF_LINE
----------------------------------------------
276: ezxml_char_content(root,d,(long)s_local - (long)d,'&');
	00004744:SUB RAX,qword ptr [RBP + -0x30]
	00004748:MOV RDX,RAX
	0000474b:MOV RSI,qword ptr [RBP + -0x30]
	0000474f:MOV RAX,qword ptr [RBP + -0x18]
	00004753:MOV ECX,0x26
	00004758:MOV RDI,RAX
	0000475b:CALL 0x000022f7
END_OF_LINE
----------------------------------------------
277: goto LAB_00003b59;
	00003b59:LEA RAX,[0x9090]
END_OF_LINE
----------------------------------------------
279: } while (*d != '\0');
	00004766:MOVZX EAX,byte ptr [RAX]
	00004769:TEST AL,AL
	0000476b:JZ 0x00004775
END_OF_LINE
----------------------------------------------
280: if (root->cur != (ezxml_t.conflict)0x0) {
	0000477a:MOV RAX,qword ptr [RAX + 0x50]
	0000477e:TEST RAX,RAX
	00004781:JNZ 0x00004789
END_OF_LINE
----------------------------------------------
281: if (root->cur->name == (char *)0x0) {
	0000478d:MOV RAX,qword ptr [RAX + 0x50]
	00004791:MOV RAX,qword ptr [RAX]
	00004794:TEST RAX,RAX
	00004797:JNZ 0x000047ba
END_OF_LINE
----------------------------------------------
282: root = (ezxml_root_t)ezxml_err(root,d,"root tag missing");
	000047b3:CALL 0x00001af0
END_OF_LINE
----------------------------------------------
285: root = (ezxml_root_t)ezxml_err(root,d,"unclosed tag <%s>",root->cur->name);
	000047be:MOV RAX,qword ptr [RAX + 0x50]
	000047c2:MOV RDX,qword ptr [RAX]
	000047c5:MOV RSI,qword ptr [RBP + -0x30]
	000047c9:MOV RAX,qword ptr [RBP + -0x18]
	000047cd:MOV RCX,RDX
	000047d0:LEA RDX,[0x71c7]
	000047d7:MOV RDI,RAX
	000047da:MOV EAX,0x0
	000047df:CALL 0x00001af0
END_OF_LINE
----------------------------------------------
290: return &root->xml;
	000047e9:RET
END_OF_LINE



Function: ezxml_parse_fp
----------------------------------------------
13: len = 0;
	000047fa:MOV qword ptr [RBP + -0x20],0x0
END_OF_LINE
----------------------------------------------
14: s = (char *)malloc(0x400);
	00004807:CALL 0x000013a0
END_OF_LINE
----------------------------------------------
15: if (s == (char *)0x0) {
	00004810:CMP qword ptr [RBP + -0x18],0x0
	00004815:JNZ 0x00004821
END_OF_LINE
----------------------------------------------
16: peVar1 = (ezxml_t.conflict)0x0;
	00004817:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
20: sVar2 = fread(s + len,1,0x400,(FILE *)fp);
	00004829:LEA RDI,[RDX + RAX*0x1]
	0000482d:MOV RAX,qword ptr [RBP + -0x28]
	00004831:MOV RCX,RAX
	00004834:MOV EDX,0x400
	00004839:MOV ESI,0x1
	0000483e:CALL 0x000012a0
END_OF_LINE
----------------------------------------------
21: len = len + sVar2;
	0000484b:ADD qword ptr [RBP + -0x20],RAX
END_OF_LINE
----------------------------------------------
22: if (sVar2 == 0x400) {
	0000484f:CMP qword ptr [RBP + -0x10],0x400
	00004857:JNZ 0x00004877
END_OF_LINE
----------------------------------------------
23: s = (char *)realloc(s,len + 0x400);
	0000485d:LEA RDX,[RAX + 0x400]
	00004864:MOV RAX,qword ptr [RBP + -0x18]
	00004868:MOV RSI,RDX
	0000486b:MOV RDI,RAX
	0000486e:CALL 0x000013b0
END_OF_LINE
----------------------------------------------
25: } while ((s != (char *)0x0) && (sVar2 == 0x400));
	00004877:CMP qword ptr [RBP + -0x18],0x0
	0000487c:JZ 0x00004888
	0000487e:CMP qword ptr [RBP + -0x10],0x400
	00004886:JZ 0x00004821
END_OF_LINE
----------------------------------------------
26: if (s == (char *)0x0) {
	00004888:CMP qword ptr [RBP + -0x18],0x0
	0000488d:JNZ 0x00004896
END_OF_LINE
----------------------------------------------
27: peVar1 = (ezxml_t.conflict)0x0;
	0000488f:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
30: peVar1 = ezxml_parse_str(s,len);
	000048a4:CALL 0x00003a3f
END_OF_LINE
----------------------------------------------
31: peVar1[1].txt = (char *)0xffffffffffffffff;
	000048b1:MOV qword ptr [RAX + 0x60],-0x1
END_OF_LINE
----------------------------------------------
34: return peVar1;
	000048be:RET
END_OF_LINE



Function: ezxml_parse_fd
----------------------------------------------
20: lVar1 = *(long *)(in_FS_OFFSET + 0x28);
	000048d5:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
21: if (fd < 0) {
	000048e4:CMP dword ptr [RBP + -0xd4],0x0
	000048eb:JNS 0x000048f7
END_OF_LINE
----------------------------------------------
22: peVar3 = (ezxml_t.conflict)0x0;
	000048ed:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
25: fstat(fd,(stat *)&st);
	000048f7:LEA RDX,[RBP + -0xb0]
	000048fe:MOV EAX,dword ptr [RBP + -0xd4]
	00004904:MOV RSI,RDX
	00004907:MOV EDI,EAX
	00004909:CALL 0x00001430
END_OF_LINE
----------------------------------------------
26: _Var2 = st.st_size;
	00004909:CALL 0x00001430
END_OF_LINE
----------------------------------------------
27: lVar4 = sysconf(0x1e);
	00004917:CALL 0x00001400
END_OF_LINE
----------------------------------------------
28: lVar5 = sysconf(0x1e);
	00004928:CALL 0x00001400
END_OF_LINE
----------------------------------------------
29: pcVar6 = (char *)(-lVar5 & (lVar4 + _Var2) - 1U);
	0000491c:ADD RAX,RBX
	0000491f:LEA RBX,[RAX + -0x1]
	00004923:MOV EDI,0x1e
	00004928:CALL 0x00001400
	0000492d:NEG RAX
	00004930:AND RAX,RBX
END_OF_LINE
----------------------------------------------
30: s = (char *)mmap((void *)0x0,(size_t)pcVar6,3,2,fd,0);
	00004962:CALL 0x000012e0
END_OF_LINE
----------------------------------------------
31: if (s == (char *)0xffffffffffffffff) {
	0000496e:CMP qword ptr [RBP + -0xb8],-0x1
	00004976:JZ 0x000049ec
END_OF_LINE
----------------------------------------------
32: pcVar6 = (char *)malloc(st.st_size);
	000049fa:CALL 0x000013a0
END_OF_LINE
----------------------------------------------
33: len = read(fd,pcVar6,st.st_size);
	00004a1b:CALL 0x00001350
END_OF_LINE
----------------------------------------------
34: peVar3 = ezxml_parse_str(pcVar6,len);
	00004a3b:CALL 0x00003a3f
END_OF_LINE
----------------------------------------------
35: peVar3[1].txt = (char *)0xffffffffffffffff;
	00004a4e:MOV qword ptr [RAX + 0x60],-0x1
END_OF_LINE
----------------------------------------------
38: madvise(s,(size_t)pcVar6,2);
	00004991:CALL 0x000013d0
END_OF_LINE
----------------------------------------------
39: peVar3 = ezxml_parse_str(s,st.st_size);
	000049aa:CALL 0x00003a3f
END_OF_LINE
----------------------------------------------
40: peVar3[1].txt = pcVar6;
	000049c4:MOV qword ptr [RAX + 0x60],RDX
END_OF_LINE
----------------------------------------------
41: madvise(s,(size_t)peVar3[1].txt,0);
	000049cf:MOV RCX,qword ptr [RAX + 0x60]
	000049d3:MOV RAX,qword ptr [RBP + -0xb8]
	000049da:MOV EDX,0x0
	000049df:MOV RSI,RCX
	000049e2:MOV RDI,RAX
	000049e5:CALL 0x000013d0
END_OF_LINE
----------------------------------------------
44: if (lVar1 == *(long *)(in_FS_OFFSET + 0x28)) {
	00004a61:SUB RDX,qword ptr FS:[0x28]
	00004a6a:JZ 0x00004a71
END_OF_LINE
----------------------------------------------
45: return peVar3;
	00004a76:RET
END_OF_LINE
----------------------------------------------
48: __stack_chk_fail();
	00004a6c:CALL 0x000012d0
END_OF_LINE



Function: ezxml_parse_file
----------------------------------------------
11: fd_00 = open(file,0,0);
	00004a9d:CALL 0x000013f0
END_OF_LINE
----------------------------------------------
12: peVar1 = ezxml_parse_fd(fd_00);
	00004aaa:CALL 0x000048bf
END_OF_LINE
----------------------------------------------
13: if (-1 < fd_00) {
	00004ab3:CMP dword ptr [RBP + -0xc],0x0
	00004ab7:JS 0x00004ac3
END_OF_LINE
----------------------------------------------
14: close(fd_00);
	00004abe:CALL 0x00001320
END_OF_LINE
----------------------------------------------
16: return peVar1;
	00004ac3:MOV RAX,qword ptr [RBP + -0x8]
	00004ac7:LEAVE
	00004ac8:RET
END_OF_LINE



Function: ezxml_ampencode
----------------------------------------------
16: for (s_local = s; s_local != s + len; s_local = s_local + 1) {
	00004af8:ADD RAX,RDX
	00004afb:MOV qword ptr [RBP + -0x8],RAX
	00004aff:JMP 0x00004da7
	00004b04:MOV RAX,qword ptr [RBP + -0x38]
	00004b08:MOV RAX,qword ptr [RAX]
	00004b0b:LEA RDX,[RAX + 0x400]
	00004b12:MOV RAX,qword ptr [RBP + -0x38]
	00004b16:MOV qword ptr [RAX],RDX
	00004b19:MOV RAX,qword ptr [RBP + -0x38]
	00004b1d:MOV RDX,qword ptr [RAX]
	00004b20:MOV RAX,qword ptr [RBP + -0x28]
	00004b24:MOV RAX,qword ptr [RAX]
	00004b27:MOV RSI,RDX
	00004b2a:MOV RDI,RAX
	00004b2d:CALL 0x000013b0
	00004b32:MOV RDX,qword ptr [RBP + -0x28]
	00004b36:MOV qword ptr [RDX],RAX
	00004b39:MOV RAX,qword ptr [RBP + -0x30]
	00004b3d:MOV RAX,qword ptr [RAX]
	00004b40:LEA RDX,[RAX + 0xa]
	00004b44:MOV RAX,qword ptr [RBP + -0x38]
	00004b48:MOV RAX,qword ptr [RAX]
	00004b4b:CMP RDX,RAX
	00004b4e:JA 0x00004b04
	00004b50:MOV RAX,qword ptr [RBP + -0x18]
	00004b54:MOVZX EAX,byte ptr [RAX]
	00004b57:MOVSX EAX,AL
	00004b5a:CMP EAX,0x3e
	00004b5d:JA 0x00004d7c
	00004b63:MOV EAX,EAX
	00004b65:LEA RDX,[RAX*0x4]
	00004b6d:LEA RAX,[0x7208]
	00004b74:MOV EAX,dword ptr [RDX + RAX*0x1]
	00004b77:CDQE
	00004b79:LEA RDX,[0x7208]
	00004b80:ADD RAX,RDX
	00004b83:JMP RAX
	00004b86:MOV RAX,qword ptr [RBP + -0x28]
	00004b8a:MOV RAX,qword ptr [RAX]
	00004b8d:JMP 0x00004dbc
	00004b92:MOV RAX,qword ptr [RBP + -0x28]
	00004b96:MOV RDX,qword ptr [RAX]
	00004b99:MOV RAX,qword ptr [RBP + -0x30]
	00004b9d:MOV RAX,qword ptr [RAX]
	00004ba0:ADD RAX,RDX
	00004ba3:LEA RDX,[0x71d9]
	00004baa:MOV RSI,RDX
	00004bad:MOV RDI,RAX
	00004bb0:MOV EAX,0x0
	00004bb5:CALL 0x00001410
	00004bba:MOV RDX,qword ptr [RBP + -0x30]
	00004bbe:MOV RDX,qword ptr [RDX]
	00004bc1:CDQE
	00004bc3:ADD RDX,RAX
	00004bc6:MOV RAX,qword ptr [RBP + -0x30]
	00004bca:MOV qword ptr [RAX],RDX
	00004bcd:JMP 0x00004da2
	00004bd2:MOV RAX,qword ptr [RBP + -0x28]
	00004bd6:MOV RDX,qword ptr [RAX]
	00004bd9:MOV RAX,qword ptr [RBP + -0x30]
	00004bdd:MOV RAX,qword ptr [RAX]
	00004be0:ADD RAX,RDX
	00004be3:LEA RDX,[0x71df]
	00004bea:MOV RSI,RDX
	00004bed:MOV RDI,RAX
	00004bf0:MOV EAX,0x0
	00004bf5:CALL 0x00001410
	00004bfa:MOV RDX,qword ptr [RBP + -0x30]
	00004bfe:MOV RDX,qword ptr [RDX]
	00004c01:CDQE
	00004c03:ADD RDX,RAX
	00004c06:MOV RAX,qword ptr [RBP + -0x30]
	00004c0a:MOV qword ptr [RAX],RDX
	00004c0d:JMP 0x00004da2
	00004c12:MOV RAX,qword ptr [RBP + -0x28]
	00004c16:MOV RDX,qword ptr [RAX]
	00004c19:MOV RAX,qword ptr [RBP + -0x30]
	00004c1d:MOV RAX,qword ptr [RAX]
	00004c20:ADD RAX,RDX
	00004c23:LEA RDX,[0x71e4]
	00004c2a:MOV RSI,RDX
	00004c2d:MOV RDI,RAX
	00004c30:MOV EAX,0x0
	00004c35:CALL 0x00001410
	00004c3a:MOV RDX,qword ptr [RBP + -0x30]
	00004c3e:MOV RDX,qword ptr [RDX]
	00004c41:CDQE
	00004c43:ADD RDX,RAX
	00004c46:MOV RAX,qword ptr [RBP + -0x30]
	00004c4a:MOV qword ptr [RAX],RDX
	00004c4d:JMP 0x00004da2
	00004c52:CMP word ptr [RBP + -0x3c],0x0
	00004c57:JZ 0x00004c62
	00004c59:LEA RAX,[0x71e9]
	00004c60:JMP 0x00004c69
	00004c62:LEA RAX,[0x71f0]
	00004c69:MOV RDX,qword ptr [RBP + -0x28]
	00004c6d:MOV RCX,qword ptr [RDX]
	00004c70:MOV RDX,qword ptr [RBP + -0x30]
	00004c74:MOV RDX,qword ptr [RDX]
	00004c77:ADD RDX,RCX
	00004c7a:MOV RSI,RAX
	00004c7d:MOV RDI,RDX
	00004c80:MOV EAX,0x0
	00004c85:CALL 0x00001410
	00004c8a:MOV RDX,qword ptr [RBP + -0x30]
	00004c8e:MOV RDX,qword ptr [RDX]
	00004c91:CDQE
	00004c93:ADD RDX,RAX
	00004c96:MOV RAX,qword ptr [RBP + -0x30]
	00004c9a:MOV qword ptr [RAX],RDX
	00004c9d:JMP 0x00004da2
	00004ca2:CMP word ptr [RBP + -0x3c],0x0
	00004ca7:JZ 0x00004cb2
	00004ca9:LEA RAX,[0x71f2]
	00004cb0:JMP 0x00004cb9
	00004cb2:LEA RAX,[0x71f8]
	00004cb9:MOV RDX,qword ptr [RBP + -0x28]
	00004cbd:MOV RCX,qword ptr [RDX]
	00004cc0:MOV RDX,qword ptr [RBP + -0x30]
	00004cc4:MOV RDX,qword ptr [RDX]
	00004cc7:ADD RDX,RCX
	00004cca:MOV RSI,RAX
	00004ccd:MOV RDI,RDX
	00004cd0:MOV EAX,0x0
	00004cd5:CALL 0x00001410
	00004cda:MOV RDX,qword ptr [RBP + -0x30]
	00004cde:MOV RDX,qword ptr [RDX]
	00004ce1:CDQE
	00004ce3:ADD RDX,RAX
	00004ce6:MOV RAX,qword ptr [RBP + -0x30]
	00004cea:MOV qword ptr [RAX],RDX
	00004ced:JMP 0x00004da2
	00004cf2:CMP word ptr [RBP + -0x3c],0x0
	00004cf7:JZ 0x00004d02
	00004cf9:LEA RAX,[0x71fa]
	00004d00:JMP 0x00004d09
	00004d02:LEA RAX,[0x7200]
	00004d09:MOV RDX,qword ptr [RBP + -0x28]
	00004d0d:MOV RCX,qword ptr [RDX]
	00004d10:MOV RDX,qword ptr [RBP + -0x30]
	00004d14:MOV RDX,qword ptr [RDX]
	00004d17:ADD RDX,RCX
	00004d1a:MOV RSI,RAX
	00004d1d:MOV RDI,RDX
	00004d20:MOV EAX,0x0
	00004d25:CALL 0x00001410
	00004d2a:MOV RDX,qword ptr [RBP + -0x30]
	00004d2e:MOV RDX,qword ptr [RDX]
	00004d31:CDQE
	00004d33:ADD RDX,RAX
	00004d36:MOV RAX,qword ptr [RBP + -0x30]
	00004d3a:MOV qword ptr [RAX],RDX
	00004d3d:JMP 0x00004da2
	00004d3f:MOV RAX,qword ptr [RBP + -0x28]
	00004d43:MOV RDX,qword ptr [RAX]
	00004d46:MOV RAX,qword ptr [RBP + -0x30]
	00004d4a:MOV RAX,qword ptr [RAX]
	00004d4d:ADD RAX,RDX
	00004d50:LEA RDX,[0x7202]
	00004d57:MOV RSI,RDX
	00004d5a:MOV RDI,RAX
	00004d5d:MOV EAX,0x0
	00004d62:CALL 0x00001410
	00004d67:MOV RDX,qword ptr [RBP + -0x30]
	00004d6b:MOV RDX,qword ptr [RDX]
	00004d6e:CDQE
	00004d70:ADD RDX,RAX
	00004d73:MOV RAX,qword ptr [RBP + -0x30]
	00004d77:MOV qword ptr [RAX],RDX
	00004d7a:JMP 0x00004da2
	00004d7c:MOV RAX,qword ptr [RBP + -0x28]
	00004d80:MOV RSI,qword ptr [RAX]
	00004d83:MOV RAX,qword ptr [RBP + -0x30]
	00004d87:MOV RAX,qword ptr [RAX]
	00004d8a:LEA RCX,[RAX + 0x1]
	00004d8e:MOV RDX,qword ptr [RBP + -0x30]
	00004d92:MOV qword ptr [RDX],RCX
	00004d95:LEA RDX,[RSI + RAX*0x1]
	00004d99:MOV RAX,qword ptr [RBP + -0x18]
	00004d9d:MOVZX EAX,byte ptr [RAX]
	00004da0:MOV byte ptr [RDX],AL
	00004da2:ADD qword ptr [RBP + -0x18],0x1
	00004da7:MOV RAX,qword ptr [RBP + -0x18]
	00004dab:CMP RAX,qword ptr [RBP + -0x8]
	00004daf:JNZ 0x00004b39
END_OF_LINE
----------------------------------------------
17: while (*max < *dlen + 10) {
	00004b3d:MOV RAX,qword ptr [RAX]
	00004b40:LEA RDX,[RAX + 0xa]
	00004b44:MOV RAX,qword ptr [RBP + -0x38]
	00004b48:MOV RAX,qword ptr [RAX]
	00004b4b:CMP RDX,RAX
	00004b4e:JA 0x00004b04
END_OF_LINE
----------------------------------------------
18: *max = *max + 0x400;
	00004b08:MOV RAX,qword ptr [RAX]
	00004b0b:LEA RDX,[RAX + 0x400]
	00004b12:MOV RAX,qword ptr [RBP + -0x38]
	00004b16:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
19: pcVar3 = (char *)realloc(*dst,*max);
	00004b1d:MOV RDX,qword ptr [RAX]
	00004b20:MOV RAX,qword ptr [RBP + -0x28]
	00004b24:MOV RAX,qword ptr [RAX]
	00004b27:MOV RSI,RDX
	00004b2a:MOV RDI,RAX
	00004b2d:CALL 0x000013b0
END_OF_LINE
----------------------------------------------
20: *dst = pcVar3;
	00004b36:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
22: switch(*s_local) {
	00004b54:MOVZX EAX,byte ptr [RAX]
	00004b57:MOVSX EAX,AL
	00004b5a:CMP EAX,0x3e
	00004b5d:JA 0x00004d7c
	00004b63:MOV EAX,EAX
	00004b65:LEA RDX,[RAX*0x4]
	00004b6d:LEA RAX,[0x7208]
	00004b74:MOV EAX,dword ptr [RDX + RAX*0x1]
	00004b77:CDQE
	00004b79:LEA RDX,[0x7208]
	00004b80:ADD RAX,RDX
	00004b83:JMP RAX
END_OF_LINE
----------------------------------------------
23: case '\0':
	00004b8a:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
24: return *dst;
	00004b8a:MOV RAX,qword ptr [RAX]
	00004b8d:JMP 0x00004dbc
	00004b92:MOV RAX,qword ptr [RBP + -0x28]
	00004b96:MOV RDX,qword ptr [RAX]
	00004b99:MOV RAX,qword ptr [RBP + -0x30]
	00004b9d:MOV RAX,qword ptr [RAX]
	00004ba0:ADD RAX,RDX
	00004ba3:LEA RDX,[0x71d9]
	00004baa:MOV RSI,RDX
	00004bad:MOV RDI,RAX
	00004bb0:MOV EAX,0x0
	00004bb5:CALL 0x00001410
	00004bba:MOV RDX,qword ptr [RBP + -0x30]
	00004bbe:MOV RDX,qword ptr [RDX]
	00004bc1:CDQE
	00004bc3:ADD RDX,RAX
	00004bc6:MOV RAX,qword ptr [RBP + -0x30]
	00004bca:MOV qword ptr [RAX],RDX
	00004bcd:JMP 0x00004da2
	00004bd2:MOV RAX,qword ptr [RBP + -0x28]
	00004bd6:MOV RDX,qword ptr [RAX]
	00004bd9:MOV RAX,qword ptr [RBP + -0x30]
	00004bdd:MOV RAX,qword ptr [RAX]
	00004be0:ADD RAX,RDX
	00004be3:LEA RDX,[0x71df]
	00004bea:MOV RSI,RDX
	00004bed:MOV RDI,RAX
	00004bf0:MOV EAX,0x0
	00004bf5:CALL 0x00001410
	00004bfa:MOV RDX,qword ptr [RBP + -0x30]
	00004bfe:MOV RDX,qword ptr [RDX]
	00004c01:CDQE
	00004c03:ADD RDX,RAX
	00004c06:MOV RAX,qword ptr [RBP + -0x30]
	00004c0a:MOV qword ptr [RAX],RDX
	00004c0d:JMP 0x00004da2
	00004c12:MOV RAX,qword ptr [RBP + -0x28]
	00004c16:MOV RDX,qword ptr [RAX]
	00004c19:MOV RAX,qword ptr [RBP + -0x30]
	00004c1d:MOV RAX,qword ptr [RAX]
	00004c20:ADD RAX,RDX
	00004c23:LEA RDX,[0x71e4]
	00004c2a:MOV RSI,RDX
	00004c2d:MOV RDI,RAX
	00004c30:MOV EAX,0x0
	00004c35:CALL 0x00001410
	00004c3a:MOV RDX,qword ptr [RBP + -0x30]
	00004c3e:MOV RDX,qword ptr [RDX]
	00004c41:CDQE
	00004c43:ADD RDX,RAX
	00004c46:MOV RAX,qword ptr [RBP + -0x30]
	00004c4a:MOV qword ptr [RAX],RDX
	00004c4d:JMP 0x00004da2
	00004c52:CMP word ptr [RBP + -0x3c],0x0
	00004c57:JZ 0x00004c62
	00004c59:LEA RAX,[0x71e9]
	00004c60:JMP 0x00004c69
	00004c62:LEA RAX,[0x71f0]
	00004c69:MOV RDX,qword ptr [RBP + -0x28]
	00004c6d:MOV RCX,qword ptr [RDX]
	00004c70:MOV RDX,qword ptr [RBP + -0x30]
	00004c74:MOV RDX,qword ptr [RDX]
	00004c77:ADD RDX,RCX
	00004c7a:MOV RSI,RAX
	00004c7d:MOV RDI,RDX
	00004c80:MOV EAX,0x0
	00004c85:CALL 0x00001410
	00004c8a:MOV RDX,qword ptr [RBP + -0x30]
	00004c8e:MOV RDX,qword ptr [RDX]
	00004c91:CDQE
	00004c93:ADD RDX,RAX
	00004c96:MOV RAX,qword ptr [RBP + -0x30]
	00004c9a:MOV qword ptr [RAX],RDX
	00004c9d:JMP 0x00004da2
	00004ca2:CMP word ptr [RBP + -0x3c],0x0
	00004ca7:JZ 0x00004cb2
	00004ca9:LEA RAX,[0x71f2]
	00004cb0:JMP 0x00004cb9
	00004cb2:LEA RAX,[0x71f8]
	00004cb9:MOV RDX,qword ptr [RBP + -0x28]
	00004cbd:MOV RCX,qword ptr [RDX]
	00004cc0:MOV RDX,qword ptr [RBP + -0x30]
	00004cc4:MOV RDX,qword ptr [RDX]
	00004cc7:ADD RDX,RCX
	00004cca:MOV RSI,RAX
	00004ccd:MOV RDI,RDX
	00004cd0:MOV EAX,0x0
	00004cd5:CALL 0x00001410
	00004cda:MOV RDX,qword ptr [RBP + -0x30]
	00004cde:MOV RDX,qword ptr [RDX]
	00004ce1:CDQE
	00004ce3:ADD RDX,RAX
	00004ce6:MOV RAX,qword ptr [RBP + -0x30]
	00004cea:MOV qword ptr [RAX],RDX
	00004ced:JMP 0x00004da2
	00004cf2:CMP word ptr [RBP + -0x3c],0x0
	00004cf7:JZ 0x00004d02
	00004cf9:LEA RAX,[0x71fa]
	00004d00:JMP 0x00004d09
	00004d02:LEA RAX,[0x7200]
	00004d09:MOV RDX,qword ptr [RBP + -0x28]
	00004d0d:MOV RCX,qword ptr [RDX]
	00004d10:MOV RDX,qword ptr [RBP + -0x30]
	00004d14:MOV RDX,qword ptr [RDX]
	00004d17:ADD RDX,RCX
	00004d1a:MOV RSI,RAX
	00004d1d:MOV RDI,RDX
	00004d20:MOV EAX,0x0
	00004d25:CALL 0x00001410
	00004d2a:MOV RDX,qword ptr [RBP + -0x30]
	00004d2e:MOV RDX,qword ptr [RDX]
	00004d31:CDQE
	00004d33:ADD RDX,RAX
	00004d36:MOV RAX,qword ptr [RBP + -0x30]
	00004d3a:MOV qword ptr [RAX],RDX
	00004d3d:JMP 0x00004da2
	00004d3f:MOV RAX,qword ptr [RBP + -0x28]
	00004d43:MOV RDX,qword ptr [RAX]
	00004d46:MOV RAX,qword ptr [RBP + -0x30]
	00004d4a:MOV RAX,qword ptr [RAX]
	00004d4d:ADD RAX,RDX
	00004d50:LEA RDX,[0x7202]
	00004d57:MOV RSI,RDX
	00004d5a:MOV RDI,RAX
	00004d5d:MOV EAX,0x0
	00004d62:CALL 0x00001410
	00004d67:MOV RDX,qword ptr [RBP + -0x30]
	00004d6b:MOV RDX,qword ptr [RDX]
	00004d6e:CDQE
	00004d70:ADD RDX,RAX
	00004d73:MOV RAX,qword ptr [RBP + -0x30]
	00004d77:MOV qword ptr [RAX],RDX
	00004d7a:JMP 0x00004da2
	00004d7c:MOV RAX,qword ptr [RBP + -0x28]
	00004d80:MOV RSI,qword ptr [RAX]
	00004d83:MOV RAX,qword ptr [RBP + -0x30]
	00004d87:MOV RAX,qword ptr [RAX]
	00004d8a:LEA RCX,[RAX + 0x1]
	00004d8e:MOV RDX,qword ptr [RBP + -0x30]
	00004d92:MOV qword ptr [RDX],RCX
	00004d95:LEA RDX,[RSI + RAX*0x1]
	00004d99:MOV RAX,qword ptr [RBP + -0x18]
	00004d9d:MOVZX EAX,byte ptr [RAX]
	00004da0:MOV byte ptr [RDX],AL
	00004da2:ADD qword ptr [RBP + -0x18],0x1
	00004da7:MOV RAX,qword ptr [RBP + -0x18]
	00004dab:CMP RAX,qword ptr [RBP + -0x8]
	00004daf:JNZ 0x00004b39
	00004db5:MOV RAX,qword ptr [RBP + -0x28]
	00004db9:MOV RAX,qword ptr [RAX]
	00004dbc:LEAVE
	00004dbd:RET
END_OF_LINE
----------------------------------------------
25: default:
	00004d80:MOV RSI,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
26: pcVar3 = *dst;
	00004d80:MOV RSI,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
27: sVar1 = *dlen;
	00004d87:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
28: *dlen = sVar1 + 1;
	00004d8a:LEA RCX,[RAX + 0x1]
	00004d8e:MOV RDX,qword ptr [RBP + -0x30]
	00004d92:MOV qword ptr [RDX],RCX
END_OF_LINE
----------------------------------------------
29: pcVar3[sVar1] = *s_local;
	00004d95:LEA RDX,[RSI + RAX*0x1]
	00004d99:MOV RAX,qword ptr [RBP + -0x18]
	00004d9d:MOVZX EAX,byte ptr [RAX]
	00004da0:MOV byte ptr [RDX],AL
END_OF_LINE
----------------------------------------------
31: case '\t':
	00004cf2:CMP word ptr [RBP + -0x3c],0x0
END_OF_LINE
----------------------------------------------
32: if (a == 0) {
	00004cf2:CMP word ptr [RBP + -0x3c],0x0
	00004cf7:JZ 0x00004d02
END_OF_LINE
----------------------------------------------
33: pcVar3 = "\t";
	00004d02:LEA RAX,[0x7200]
END_OF_LINE
----------------------------------------------
36: pcVar3 = "&#x9;";
	00004cf9:LEA RAX,[0x71fa]
END_OF_LINE
----------------------------------------------
38: iVar2 = sprintf(*dst + *dlen,pcVar3);
	00004d0d:MOV RCX,qword ptr [RDX]
	00004d10:MOV RDX,qword ptr [RBP + -0x30]
	00004d14:MOV RDX,qword ptr [RDX]
	00004d17:ADD RDX,RCX
	00004d1a:MOV RSI,RAX
	00004d1d:MOV RDI,RDX
	00004d20:MOV EAX,0x0
	00004d25:CALL 0x00001410
END_OF_LINE
----------------------------------------------
39: *dlen = *dlen + (long)iVar2;
	00004d2e:MOV RDX,qword ptr [RDX]
	00004d31:CDQE
	00004d33:ADD RDX,RAX
	00004d36:MOV RAX,qword ptr [RBP + -0x30]
	00004d3a:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
41: case '\n':
	00004ca2:CMP word ptr [RBP + -0x3c],0x0
END_OF_LINE
----------------------------------------------
42: if (a == 0) {
	00004ca2:CMP word ptr [RBP + -0x3c],0x0
	00004ca7:JZ 0x00004cb2
END_OF_LINE
----------------------------------------------
43: pcVar3 = "\n";
	00004cb2:LEA RAX,[0x71f8]
END_OF_LINE
----------------------------------------------
46: pcVar3 = "&#xA;";
	00004ca9:LEA RAX,[0x71f2]
END_OF_LINE
----------------------------------------------
48: iVar2 = sprintf(*dst + *dlen,pcVar3);
	00004cbd:MOV RCX,qword ptr [RDX]
	00004cc0:MOV RDX,qword ptr [RBP + -0x30]
	00004cc4:MOV RDX,qword ptr [RDX]
	00004cc7:ADD RDX,RCX
	00004cca:MOV RSI,RAX
	00004ccd:MOV RDI,RDX
	00004cd0:MOV EAX,0x0
	00004cd5:CALL 0x00001410
END_OF_LINE
----------------------------------------------
49: *dlen = *dlen + (long)iVar2;
	00004cde:MOV RDX,qword ptr [RDX]
	00004ce1:CDQE
	00004ce3:ADD RDX,RAX
	00004ce6:MOV RAX,qword ptr [RBP + -0x30]
	00004cea:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
51: case '\r':
	00004d43:MOV RDX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
52: iVar2 = sprintf(*dst + *dlen,"&#xD;");
	00004d43:MOV RDX,qword ptr [RAX]
	00004d46:MOV RAX,qword ptr [RBP + -0x30]
	00004d4a:MOV RAX,qword ptr [RAX]
	00004d4d:ADD RAX,RDX
	00004d50:LEA RDX,[0x7202]
	00004d57:MOV RSI,RDX
	00004d5a:MOV RDI,RAX
	00004d5d:MOV EAX,0x0
	00004d62:CALL 0x00001410
END_OF_LINE
----------------------------------------------
53: *dlen = *dlen + (long)iVar2;
	00004d6b:MOV RDX,qword ptr [RDX]
	00004d6e:CDQE
	00004d70:ADD RDX,RAX
	00004d73:MOV RAX,qword ptr [RBP + -0x30]
	00004d77:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
55: case '\"':
	00004c52:CMP word ptr [RBP + -0x3c],0x0
END_OF_LINE
----------------------------------------------
56: if (a == 0) {
	00004c52:CMP word ptr [RBP + -0x3c],0x0
	00004c57:JZ 0x00004c62
END_OF_LINE
----------------------------------------------
57: pcVar3 = "\"";
	00004c62:LEA RAX,[0x71f0]
END_OF_LINE
----------------------------------------------
60: pcVar3 = "&quot;";
	00004c59:LEA RAX,[0x71e9]
END_OF_LINE
----------------------------------------------
62: iVar2 = sprintf(*dst + *dlen,pcVar3);
	00004c6d:MOV RCX,qword ptr [RDX]
	00004c70:MOV RDX,qword ptr [RBP + -0x30]
	00004c74:MOV RDX,qword ptr [RDX]
	00004c77:ADD RDX,RCX
	00004c7a:MOV RSI,RAX
	00004c7d:MOV RDI,RDX
	00004c80:MOV EAX,0x0
	00004c85:CALL 0x00001410
END_OF_LINE
----------------------------------------------
63: *dlen = *dlen + (long)iVar2;
	00004c8e:MOV RDX,qword ptr [RDX]
	00004c91:CDQE
	00004c93:ADD RDX,RAX
	00004c96:MOV RAX,qword ptr [RBP + -0x30]
	00004c9a:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
65: case '&':
	00004b96:MOV RDX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
66: iVar2 = sprintf(*dst + *dlen,"&amp;");
	00004b96:MOV RDX,qword ptr [RAX]
	00004b99:MOV RAX,qword ptr [RBP + -0x30]
	00004b9d:MOV RAX,qword ptr [RAX]
	00004ba0:ADD RAX,RDX
	00004ba3:LEA RDX,[0x71d9]
	00004baa:MOV RSI,RDX
	00004bad:MOV RDI,RAX
	00004bb0:MOV EAX,0x0
	00004bb5:CALL 0x00001410
END_OF_LINE
----------------------------------------------
67: *dlen = *dlen + (long)iVar2;
	00004bbe:MOV RDX,qword ptr [RDX]
	00004bc1:CDQE
	00004bc3:ADD RDX,RAX
	00004bc6:MOV RAX,qword ptr [RBP + -0x30]
	00004bca:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
69: case '<':
	00004bd6:MOV RDX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
70: iVar2 = sprintf(*dst + *dlen,"&lt;");
	00004bd6:MOV RDX,qword ptr [RAX]
	00004bd9:MOV RAX,qword ptr [RBP + -0x30]
	00004bdd:MOV RAX,qword ptr [RAX]
	00004be0:ADD RAX,RDX
	00004be3:LEA RDX,[0x71df]
	00004bea:MOV RSI,RDX
	00004bed:MOV RDI,RAX
	00004bf0:MOV EAX,0x0
	00004bf5:CALL 0x00001410
END_OF_LINE
----------------------------------------------
71: *dlen = *dlen + (long)iVar2;
	00004bfe:MOV RDX,qword ptr [RDX]
	00004c01:CDQE
	00004c03:ADD RDX,RAX
	00004c06:MOV RAX,qword ptr [RBP + -0x30]
	00004c0a:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
73: case '>':
	00004c16:MOV RDX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
74: iVar2 = sprintf(*dst + *dlen,"&gt;");
	00004c16:MOV RDX,qword ptr [RAX]
	00004c19:MOV RAX,qword ptr [RBP + -0x30]
	00004c1d:MOV RAX,qword ptr [RAX]
	00004c20:ADD RAX,RDX
	00004c23:LEA RDX,[0x71e4]
	00004c2a:MOV RSI,RDX
	00004c2d:MOV RDI,RAX
	00004c30:MOV EAX,0x0
	00004c35:CALL 0x00001410
END_OF_LINE
----------------------------------------------
75: *dlen = *dlen + (long)iVar2;
	00004c3e:MOV RDX,qword ptr [RDX]
	00004c41:CDQE
	00004c43:ADD RDX,RAX
	00004c46:MOV RAX,qword ptr [RBP + -0x30]
	00004c4a:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
78: return *dst;
	00004db9:MOV RAX,qword ptr [RAX]
	00004dbc:LEAVE
	00004dbd:RET
END_OF_LINE



Function: ezxml_toxml_r
----------------------------------------------
22: if (xml->parent == (ezxml_t)0x0) {
	00004de7:MOV RAX,qword ptr [RAX + 0x40]
	00004deb:TEST RAX,RAX
	00004dee:JZ 0x00004dfe
END_OF_LINE
----------------------------------------------
23: pcVar5 = "";
	00004dfe:LEA RAX,[0x7063]
END_OF_LINE
----------------------------------------------
26: pcVar5 = xml->parent->txt;
	00004df4:MOV RAX,qword ptr [RAX + 0x40]
	00004df8:MOV RAX,qword ptr [RAX + 0x10]
END_OF_LINE
----------------------------------------------
28: off = 0;
	00004e09:MOV qword ptr [RBP + -0x20],0x0
END_OF_LINE
----------------------------------------------
29: pcVar3 = ezxml_ampencode(pcVar5 + start,xml->off - start,s,len,max,0);
	00004e15:MOV RAX,qword ptr [RAX + 0x18]
	00004e19:SUB RAX,qword ptr [RBP + -0x58]
	00004e1d:MOV RCX,qword ptr [RBP + -0x18]
	00004e21:MOV RDX,qword ptr [RBP + -0x58]
	00004e25:LEA RDI,[RCX + RDX*0x1]
	00004e29:MOV RSI,qword ptr [RBP + -0x50]
	00004e2d:MOV RCX,qword ptr [RBP + -0x48]
	00004e31:MOV RDX,qword ptr [RBP + -0x40]
	00004e35:MOV R9D,0x0
	00004e3b:MOV R8,RSI
	00004e3e:MOV RSI,RAX
	00004e41:CALL 0x00004ac9
END_OF_LINE
----------------------------------------------
30: *s = pcVar3;
	00004e4a:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
31: while (sVar1 = *len, sVar4 = strlen(xml->name), *max < sVar4 + sVar1 + 4) {
	00004e88:MOV RBX,qword ptr [RAX]
	00004e8b:MOV RAX,qword ptr [RBP + -0x38]
	00004e8f:MOV RAX,qword ptr [RAX]
	00004e92:MOV RDI,RAX
	00004e95:CALL 0x000012c0
	00004e9a:ADD RAX,RBX
	00004e9d:LEA RDX,[RAX + 0x4]
	00004ea1:MOV RAX,qword ptr [RBP + -0x50]
	00004ea5:MOV RAX,qword ptr [RAX]
	00004ea8:CMP RDX,RAX
	00004eab:JA 0x00004e4f
END_OF_LINE
----------------------------------------------
32: *max = *max + 0x400;
	00004e53:MOV RAX,qword ptr [RAX]
	00004e56:LEA RDX,[RAX + 0x400]
	00004e5d:MOV RAX,qword ptr [RBP + -0x50]
	00004e61:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
33: pcVar3 = (char *)realloc(*s,*max);
	00004e68:MOV RDX,qword ptr [RAX]
	00004e6b:MOV RAX,qword ptr [RBP + -0x40]
	00004e6f:MOV RAX,qword ptr [RAX]
	00004e72:MOV RSI,RDX
	00004e75:MOV RDI,RAX
	00004e78:CALL 0x000013b0
END_OF_LINE
----------------------------------------------
34: *s = pcVar3;
	00004e81:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
36: iVar2 = sprintf(*s + *len,"<%s",xml->name);
	00004eb1:MOV RAX,qword ptr [RAX]
	00004eb4:MOV RDX,qword ptr [RBP + -0x40]
	00004eb8:MOV RCX,qword ptr [RDX]
	00004ebb:MOV RDX,qword ptr [RBP + -0x48]
	00004ebf:MOV RDX,qword ptr [RDX]
	00004ec2:ADD RCX,RDX
	00004ec5:MOV RDX,RAX
	00004ec8:LEA RAX,[0x7304]
	00004ecf:MOV RSI,RAX
	00004ed2:MOV RDI,RCX
	00004ed5:MOV EAX,0x0
	00004eda:CALL 0x00001410
END_OF_LINE
----------------------------------------------
37: *len = *len + (long)iVar2;
	00004ee3:MOV RDX,qword ptr [RDX]
	00004ee6:CDQE
	00004ee8:ADD RDX,RAX
	00004eeb:MOV RAX,qword ptr [RBP + -0x48]
	00004eef:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
38: for (i = 0; xml->attr[i] != (char *)0x0; i = i + 2) {
	00004ef2:MOV dword ptr [RBP + -0x28],0x0
	00004ef9:JMP 0x0000508f
	00004efe:MOV RAX,qword ptr [RBP + -0x38]
	00004f02:MOV RDX,qword ptr [RAX + 0x8]
	00004f06:MOV EAX,dword ptr [RBP + -0x28]
	00004f09:CDQE
	00004f0b:SHL RAX,0x3
	00004f0f:ADD RAX,RDX
	00004f12:MOV RDX,qword ptr [RAX]
	00004f15:MOV RAX,qword ptr [RBP + -0x38]
	00004f19:MOV RSI,RDX
	00004f1c:MOV RDI,RAX
	00004f1f:CALL 0x000015e0
	00004f24:MOV RDX,qword ptr [RBP + -0x38]
	00004f28:MOV RCX,qword ptr [RDX + 0x8]
	00004f2c:MOV EDX,dword ptr [RBP + -0x28]
	00004f2f:MOVSXD RDX,EDX
	00004f32:ADD RDX,0x1
	00004f36:SHL RDX,0x3
	00004f3a:ADD RDX,RCX
	00004f3d:MOV RDX,qword ptr [RDX]
	00004f40:CMP RAX,RDX
	00004f43:JNZ 0x0000508a
	00004f49:JMP 0x00004f80
	00004f4b:MOV RAX,qword ptr [RBP + -0x50]
	00004f4f:MOV RAX,qword ptr [RAX]
	00004f52:LEA RDX,[RAX + 0x400]
	00004f59:MOV RAX,qword ptr [RBP + -0x50]
	00004f5d:MOV qword ptr [RAX],RDX
	00004f60:MOV RAX,qword ptr [RBP + -0x50]
	00004f64:MOV RDX,qword ptr [RAX]
	00004f67:MOV RAX,qword ptr [RBP + -0x40]
	00004f6b:MOV RAX,qword ptr [RAX]
	00004f6e:MOV RSI,RDX
	00004f71:MOV RDI,RAX
	00004f74:CALL 0x000013b0
	00004f79:MOV RDX,qword ptr [RBP + -0x40]
	00004f7d:MOV qword ptr [RDX],RAX
	00004f80:MOV RAX,qword ptr [RBP + -0x48]
	00004f84:MOV RBX,qword ptr [RAX]
	00004f87:MOV RAX,qword ptr [RBP + -0x38]
	00004f8b:MOV RDX,qword ptr [RAX + 0x8]
	00004f8f:MOV EAX,dword ptr [RBP + -0x28]
	00004f92:CDQE
	00004f94:SHL RAX,0x3
	00004f98:ADD RAX,RDX
	00004f9b:MOV RAX,qword ptr [RAX]
	00004f9e:MOV RDI,RAX
	00004fa1:CALL 0x000012c0
	00004fa6:ADD RAX,RBX
	00004fa9:LEA RDX,[RAX + 0x7]
	00004fad:MOV RAX,qword ptr [RBP + -0x50]
	00004fb1:MOV RAX,qword ptr [RAX]
	00004fb4:CMP RDX,RAX
	00004fb7:JA 0x00004f4b
	00004fb9:MOV RAX,qword ptr [RBP + -0x38]
	00004fbd:MOV RDX,qword ptr [RAX + 0x8]
	00004fc1:MOV EAX,dword ptr [RBP + -0x28]
	00004fc4:CDQE
	00004fc6:SHL RAX,0x3
	00004fca:ADD RAX,RDX
	00004fcd:MOV RAX,qword ptr [RAX]
	00004fd0:MOV RDX,qword ptr [RBP + -0x40]
	00004fd4:MOV RCX,qword ptr [RDX]
	00004fd7:MOV RDX,qword ptr [RBP + -0x48]
	00004fdb:MOV RDX,qword ptr [RDX]
	00004fde:ADD RCX,RDX
	00004fe1:MOV RDX,RAX
	00004fe4:LEA RAX,[0x7308]
	00004feb:MOV RSI,RAX
	00004fee:MOV RDI,RCX
	00004ff1:MOV EAX,0x0
	00004ff6:CALL 0x00001410
	00004ffb:MOV RDX,qword ptr [RBP + -0x48]
	00004fff:MOV RDX,qword ptr [RDX]
	00005002:CDQE
	00005004:ADD RDX,RAX
	00005007:MOV RAX,qword ptr [RBP + -0x48]
	0000500b:MOV qword ptr [RAX],RDX
	0000500e:MOV RAX,qword ptr [RBP + -0x38]
	00005012:MOV RDX,qword ptr [RAX + 0x8]
	00005016:MOV EAX,dword ptr [RBP + -0x28]
	00005019:CDQE
	0000501b:ADD RAX,0x1
	0000501f:SHL RAX,0x3
	00005023:ADD RAX,RDX
	00005026:MOV RAX,qword ptr [RAX]
	00005029:MOV RSI,qword ptr [RBP + -0x50]
	0000502d:MOV RCX,qword ptr [RBP + -0x48]
	00005031:MOV RDX,qword ptr [RBP + -0x40]
	00005035:MOV R9D,0x1
	0000503b:MOV R8,RSI
	0000503e:MOV RSI,-0x1
	00005045:MOV RDI,RAX
	00005048:CALL 0x00004ac9
	0000504d:MOV RAX,qword ptr [RBP + -0x40]
	00005051:MOV RDX,qword ptr [RAX]
	00005054:MOV RAX,qword ptr [RBP + -0x48]
	00005058:MOV RAX,qword ptr [RAX]
	0000505b:ADD RAX,RDX
	0000505e:LEA RDX,[0x71f0]
	00005065:MOV RSI,RDX
	00005068:MOV RDI,RAX
	0000506b:MOV EAX,0x0
	00005070:CALL 0x00001410
	00005075:MOV RDX,qword ptr [RBP + -0x48]
	00005079:MOV RDX,qword ptr [RDX]
	0000507c:CDQE
	0000507e:ADD RDX,RAX
	00005081:MOV RAX,qword ptr [RBP + -0x48]
	00005085:MOV qword ptr [RAX],RDX
	00005088:JMP 0x0000508b
	0000508a:NOP
	0000508b:ADD dword ptr [RBP + -0x28],0x2
	0000508f:MOV RAX,qword ptr [RBP + -0x38]
	00005093:MOV RDX,qword ptr [RAX + 0x8]
	00005097:MOV EAX,dword ptr [RBP + -0x28]
	0000509a:CDQE
	0000509c:SHL RAX,0x3
	000050a0:ADD RAX,RDX
	000050a3:MOV RAX,qword ptr [RAX]
	000050a6:TEST RAX,RAX
	000050a9:JNZ 0x00004efe
END_OF_LINE
----------------------------------------------
39: pcVar3 = ezxml_attr(xml,xml->attr[i]);
	00004f02:MOV RDX,qword ptr [RAX + 0x8]
	00004f06:MOV EAX,dword ptr [RBP + -0x28]
	00004f09:CDQE
	00004f0b:SHL RAX,0x3
	00004f0f:ADD RAX,RDX
	00004f12:MOV RDX,qword ptr [RAX]
	00004f15:MOV RAX,qword ptr [RBP + -0x38]
	00004f19:MOV RSI,RDX
	00004f1c:MOV RDI,RAX
	00004f1f:CALL 0x000015e0
END_OF_LINE
----------------------------------------------
40: if (pcVar3 == xml->attr[(long)i + 1]) {
	00004f28:MOV RCX,qword ptr [RDX + 0x8]
	00004f2c:MOV EDX,dword ptr [RBP + -0x28]
	00004f2f:MOVSXD RDX,EDX
	00004f32:ADD RDX,0x1
	00004f36:SHL RDX,0x3
	00004f3a:ADD RDX,RCX
	00004f3d:MOV RDX,qword ptr [RDX]
	00004f40:CMP RAX,RDX
	00004f43:JNZ 0x0000508a
END_OF_LINE
----------------------------------------------
41: while (sVar1 = *len, sVar4 = strlen(xml->attr[i]), *max < sVar4 + sVar1 + 7) {
	00004f84:MOV RBX,qword ptr [RAX]
	00004f87:MOV RAX,qword ptr [RBP + -0x38]
	00004f8b:MOV RDX,qword ptr [RAX + 0x8]
	00004f8f:MOV EAX,dword ptr [RBP + -0x28]
	00004f92:CDQE
	00004f94:SHL RAX,0x3
	00004f98:ADD RAX,RDX
	00004f9b:MOV RAX,qword ptr [RAX]
	00004f9e:MOV RDI,RAX
	00004fa1:CALL 0x000012c0
	00004fa6:ADD RAX,RBX
	00004fa9:LEA RDX,[RAX + 0x7]
	00004fad:MOV RAX,qword ptr [RBP + -0x50]
	00004fb1:MOV RAX,qword ptr [RAX]
	00004fb4:CMP RDX,RAX
	00004fb7:JA 0x00004f4b
END_OF_LINE
----------------------------------------------
42: *max = *max + 0x400;
	00004f4f:MOV RAX,qword ptr [RAX]
	00004f52:LEA RDX,[RAX + 0x400]
	00004f59:MOV RAX,qword ptr [RBP + -0x50]
	00004f5d:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
43: pcVar3 = (char *)realloc(*s,*max);
	00004f64:MOV RDX,qword ptr [RAX]
	00004f67:MOV RAX,qword ptr [RBP + -0x40]
	00004f6b:MOV RAX,qword ptr [RAX]
	00004f6e:MOV RSI,RDX
	00004f71:MOV RDI,RAX
	00004f74:CALL 0x000013b0
END_OF_LINE
----------------------------------------------
44: *s = pcVar3;
	00004f7d:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
46: iVar2 = sprintf(*s + *len," %s=\"",xml->attr[i]);
	00004fbd:MOV RDX,qword ptr [RAX + 0x8]
	00004fc1:MOV EAX,dword ptr [RBP + -0x28]
	00004fc4:CDQE
	00004fc6:SHL RAX,0x3
	00004fca:ADD RAX,RDX
	00004fcd:MOV RAX,qword ptr [RAX]
	00004fd0:MOV RDX,qword ptr [RBP + -0x40]
	00004fd4:MOV RCX,qword ptr [RDX]
	00004fd7:MOV RDX,qword ptr [RBP + -0x48]
	00004fdb:MOV RDX,qword ptr [RDX]
	00004fde:ADD RCX,RDX
	00004fe1:MOV RDX,RAX
	00004fe4:LEA RAX,[0x7308]
	00004feb:MOV RSI,RAX
	00004fee:MOV RDI,RCX
	00004ff1:MOV EAX,0x0
	00004ff6:CALL 0x00001410
END_OF_LINE
----------------------------------------------
47: *len = *len + (long)iVar2;
	00004fff:MOV RDX,qword ptr [RDX]
	00005002:CDQE
	00005004:ADD RDX,RAX
	00005007:MOV RAX,qword ptr [RBP + -0x48]
	0000500b:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
48: ezxml_ampencode(xml->attr[(long)i + 1],0xffffffffffffffff,s,len,max,1);
	00005012:MOV RDX,qword ptr [RAX + 0x8]
	00005016:MOV EAX,dword ptr [RBP + -0x28]
	00005019:CDQE
	0000501b:ADD RAX,0x1
	0000501f:SHL RAX,0x3
	00005023:ADD RAX,RDX
	00005026:MOV RAX,qword ptr [RAX]
	00005029:MOV RSI,qword ptr [RBP + -0x50]
	0000502d:MOV RCX,qword ptr [RBP + -0x48]
	00005031:MOV RDX,qword ptr [RBP + -0x40]
	00005035:MOV R9D,0x1
	0000503b:MOV R8,RSI
	0000503e:MOV RSI,-0x1
	00005045:MOV RDI,RAX
	00005048:CALL 0x00004ac9
END_OF_LINE
----------------------------------------------
49: iVar2 = sprintf(*s + *len,"\"");
	00005051:MOV RDX,qword ptr [RAX]
	00005054:MOV RAX,qword ptr [RBP + -0x48]
	00005058:MOV RAX,qword ptr [RAX]
	0000505b:ADD RAX,RDX
	0000505e:LEA RDX,[0x71f0]
	00005065:MOV RSI,RDX
	00005068:MOV RDI,RAX
	0000506b:MOV EAX,0x0
	00005070:CALL 0x00001410
END_OF_LINE
----------------------------------------------
50: *len = *len + (long)iVar2;
	00005079:MOV RDX,qword ptr [RDX]
	0000507c:CDQE
	0000507e:ADD RDX,RAX
	00005081:MOV RAX,qword ptr [RBP + -0x48]
	00005085:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
53: i = 0;
	000050af:MOV dword ptr [RBP + -0x28],0x0
END_OF_LINE
----------------------------------------------
54: while ((attr[i] != (char **)0x0 && (iVar2 = strcmp(*attr[i],xml->name), iVar2 != 0))) {
	000050bf:CDQE
	000050c1:LEA RDX,[RAX*0x8]
	000050c9:MOV RAX,qword ptr [RBP + -0x60]
	000050cd:ADD RAX,RDX
	000050d0:MOV RAX,qword ptr [RAX]
	000050d3:TEST RAX,RAX
	000050d6:JZ 0x00005108
	000050d8:MOV RAX,qword ptr [RBP + -0x38]
	000050dc:MOV RDX,qword ptr [RAX]
	000050df:MOV EAX,dword ptr [RBP + -0x28]
	000050e2:CDQE
	000050e4:LEA RCX,[RAX*0x8]
	000050ec:MOV RAX,qword ptr [RBP + -0x60]
	000050f0:ADD RAX,RCX
	000050f3:MOV RAX,qword ptr [RAX]
	000050f6:MOV RAX,qword ptr [RAX]
	000050f9:MOV RSI,RDX
	000050fc:MOV RDI,RAX
	000050ff:CALL 0x00001360
	00005104:TEST EAX,EAX
	00005106:JNZ 0x000050b8
END_OF_LINE
----------------------------------------------
55: i = i + 1;
	000050b8:ADD dword ptr [RBP + -0x28],0x1
END_OF_LINE
----------------------------------------------
57: for (j = 1; (attr[i] != (char **)0x0 && (attr[i][j] != (char *)0x0)); j = j + 3) {
	00005108:MOV dword ptr [RBP + -0x24],0x1
	0000510f:JMP 0x00005324
	00005114:MOV EAX,dword ptr [RBP + -0x28]
	00005117:CDQE
	00005119:LEA RDX,[RAX*0x8]
	00005121:MOV RAX,qword ptr [RBP + -0x60]
	00005125:ADD RAX,RDX
	00005128:MOV RDX,qword ptr [RAX]
	0000512b:MOV EAX,dword ptr [RBP + -0x24]
	0000512e:CDQE
	00005130:ADD RAX,0x1
	00005134:SHL RAX,0x3
	00005138:ADD RAX,RDX
	0000513b:MOV RAX,qword ptr [RAX]
	0000513e:TEST RAX,RAX
	00005141:JZ 0x0000531f
	00005147:MOV EAX,dword ptr [RBP + -0x28]
	0000514a:CDQE
	0000514c:LEA RDX,[RAX*0x8]
	00005154:MOV RAX,qword ptr [RBP + -0x60]
	00005158:ADD RAX,RDX
	0000515b:MOV RDX,qword ptr [RAX]
	0000515e:MOV EAX,dword ptr [RBP + -0x24]
	00005161:CDQE
	00005163:SHL RAX,0x3
	00005167:ADD RAX,RDX
	0000516a:MOV RDX,qword ptr [RAX]
	0000516d:MOV RAX,qword ptr [RBP + -0x38]
	00005171:MOV RSI,RDX
	00005174:MOV RDI,RAX
	00005177:CALL 0x000015e0
	0000517c:MOV EDX,dword ptr [RBP + -0x28]
	0000517f:MOVSXD RDX,EDX
	00005182:LEA RCX,[RDX*0x8]
	0000518a:MOV RDX,qword ptr [RBP + -0x60]
	0000518e:ADD RDX,RCX
	00005191:MOV RCX,qword ptr [RDX]
	00005194:MOV EDX,dword ptr [RBP + -0x24]
	00005197:MOVSXD RDX,EDX
	0000519a:ADD RDX,0x1
	0000519e:SHL RDX,0x3
	000051a2:ADD RDX,RCX
	000051a5:MOV RDX,qword ptr [RDX]
	000051a8:CMP RAX,RDX
	000051ab:JNZ 0x0000531f
	000051b1:JMP 0x000051e8
	000051b3:MOV RAX,qword ptr [RBP + -0x50]
	000051b7:MOV RAX,qword ptr [RAX]
	000051ba:LEA RDX,[RAX + 0x400]
	000051c1:MOV RAX,qword ptr [RBP + -0x50]
	000051c5:MOV qword ptr [RAX],RDX
	000051c8:MOV RAX,qword ptr [RBP + -0x50]
	000051cc:MOV RDX,qword ptr [RAX]
	000051cf:MOV RAX,qword ptr [RBP + -0x40]
	000051d3:MOV RAX,qword ptr [RAX]
	000051d6:MOV RSI,RDX
	000051d9:MOV RDI,RAX
	000051dc:CALL 0x000013b0
	000051e1:MOV RDX,qword ptr [RBP + -0x40]
	000051e5:MOV qword ptr [RDX],RAX
	000051e8:MOV RAX,qword ptr [RBP + -0x48]
	000051ec:MOV RBX,qword ptr [RAX]
	000051ef:MOV EAX,dword ptr [RBP + -0x28]
	000051f2:CDQE
	000051f4:LEA RDX,[RAX*0x8]
	000051fc:MOV RAX,qword ptr [RBP + -0x60]
	00005200:ADD RAX,RDX
	00005203:MOV RDX,qword ptr [RAX]
	00005206:MOV EAX,dword ptr [RBP + -0x24]
	00005209:CDQE
	0000520b:SHL RAX,0x3
	0000520f:ADD RAX,RDX
	00005212:MOV RAX,qword ptr [RAX]
	00005215:MOV RDI,RAX
	00005218:CALL 0x000012c0
	0000521d:ADD RAX,RBX
	00005220:LEA RDX,[RAX + 0x7]
	00005224:MOV RAX,qword ptr [RBP + -0x50]
	00005228:MOV RAX,qword ptr [RAX]
	0000522b:CMP RDX,RAX
	0000522e:JA 0x000051b3
	00005230:MOV EAX,dword ptr [RBP + -0x28]
	00005233:CDQE
	00005235:LEA RDX,[RAX*0x8]
	0000523d:MOV RAX,qword ptr [RBP + -0x60]
	00005241:ADD RAX,RDX
	00005244:MOV RDX,qword ptr [RAX]
	00005247:MOV EAX,dword ptr [RBP + -0x24]
	0000524a:CDQE
	0000524c:SHL RAX,0x3
	00005250:ADD RAX,RDX
	00005253:MOV RAX,qword ptr [RAX]
	00005256:MOV RDX,qword ptr [RBP + -0x40]
	0000525a:MOV RCX,qword ptr [RDX]
	0000525d:MOV RDX,qword ptr [RBP + -0x48]
	00005261:MOV RDX,qword ptr [RDX]
	00005264:ADD RCX,RDX
	00005267:MOV RDX,RAX
	0000526a:LEA RAX,[0x7308]
	00005271:MOV RSI,RAX
	00005274:MOV RDI,RCX
	00005277:MOV EAX,0x0
	0000527c:CALL 0x00001410
	00005281:MOV RDX,qword ptr [RBP + -0x48]
	00005285:MOV RDX,qword ptr [RDX]
	00005288:CDQE
	0000528a:ADD RDX,RAX
	0000528d:MOV RAX,qword ptr [RBP + -0x48]
	00005291:MOV qword ptr [RAX],RDX
	00005294:MOV EAX,dword ptr [RBP + -0x28]
	00005297:CDQE
	00005299:LEA RDX,[RAX*0x8]
	000052a1:MOV RAX,qword ptr [RBP + -0x60]
	000052a5:ADD RAX,RDX
	000052a8:MOV RDX,qword ptr [RAX]
	000052ab:MOV EAX,dword ptr [RBP + -0x24]
	000052ae:CDQE
	000052b0:ADD RAX,0x1
	000052b4:SHL RAX,0x3
	000052b8:ADD RAX,RDX
	000052bb:MOV RAX,qword ptr [RAX]
	000052be:MOV RSI,qword ptr [RBP + -0x50]
	000052c2:MOV RCX,qword ptr [RBP + -0x48]
	000052c6:MOV RDX,qword ptr [RBP + -0x40]
	000052ca:MOV R9D,0x1
	000052d0:MOV R8,RSI
	000052d3:MOV RSI,-0x1
	000052da:MOV RDI,RAX
	000052dd:CALL 0x00004ac9
	000052e2:MOV RAX,qword ptr [RBP + -0x40]
	000052e6:MOV RDX,qword ptr [RAX]
	000052e9:MOV RAX,qword ptr [RBP + -0x48]
	000052ed:MOV RAX,qword ptr [RAX]
	000052f0:ADD RAX,RDX
	000052f3:LEA RDX,[0x71f0]
	000052fa:MOV RSI,RDX
	000052fd:MOV RDI,RAX
	00005300:MOV EAX,0x0
	00005305:CALL 0x00001410
	0000530a:MOV RDX,qword ptr [RBP + -0x48]
	0000530e:MOV RDX,qword ptr [RDX]
	00005311:CDQE
	00005313:ADD RDX,RAX
	00005316:MOV RAX,qword ptr [RBP + -0x48]
	0000531a:MOV qword ptr [RAX],RDX
	0000531d:JMP 0x00005320
	0000531f:NOP
	00005320:ADD dword ptr [RBP + -0x24],0x3
	00005324:MOV EAX,dword ptr [RBP + -0x28]
	00005327:CDQE
	00005329:LEA RDX,[RAX*0x8]
	00005331:MOV RAX,qword ptr [RBP + -0x60]
	00005335:ADD RAX,RDX
	00005338:MOV RAX,qword ptr [RAX]
	0000533b:TEST RAX,RAX
	0000533e:JZ 0x0000536f
	00005340:MOV EAX,dword ptr [RBP + -0x28]
	00005343:CDQE
	00005345:LEA RDX,[RAX*0x8]
	0000534d:MOV RAX,qword ptr [RBP + -0x60]
	00005351:ADD RAX,RDX
	00005354:MOV RDX,qword ptr [RAX]
	00005357:MOV EAX,dword ptr [RBP + -0x24]
	0000535a:CDQE
	0000535c:SHL RAX,0x3
	00005360:ADD RAX,RDX
	00005363:MOV RAX,qword ptr [RAX]
	00005366:TEST RAX,RAX
	00005369:JNZ 0x00005114
END_OF_LINE
----------------------------------------------
58: if ((attr[i][(long)j + 1] != (char *)0x0) &&
	00005117:CDQE
	00005119:LEA RDX,[RAX*0x8]
	00005121:MOV RAX,qword ptr [RBP + -0x60]
	00005125:ADD RAX,RDX
	00005128:MOV RDX,qword ptr [RAX]
	0000512b:MOV EAX,dword ptr [RBP + -0x24]
	0000512e:CDQE
	00005130:ADD RAX,0x1
	00005134:SHL RAX,0x3
	00005138:ADD RAX,RDX
	0000513b:MOV RAX,qword ptr [RAX]
	0000513e:TEST RAX,RAX
	00005141:JZ 0x0000531f
	00005147:MOV EAX,dword ptr [RBP + -0x28]
	0000514a:CDQE
	0000514c:LEA RDX,[RAX*0x8]
	00005154:MOV RAX,qword ptr [RBP + -0x60]
	00005158:ADD RAX,RDX
	0000515b:MOV RDX,qword ptr [RAX]
	0000515e:MOV EAX,dword ptr [RBP + -0x24]
	00005161:CDQE
	00005163:SHL RAX,0x3
	00005167:ADD RAX,RDX
	0000516a:MOV RDX,qword ptr [RAX]
	0000516d:MOV RAX,qword ptr [RBP + -0x38]
	00005171:MOV RSI,RDX
	00005174:MOV RDI,RAX
	00005177:CALL 0x000015e0
	0000517c:MOV EDX,dword ptr [RBP + -0x28]
	0000517f:MOVSXD RDX,EDX
	00005182:LEA RCX,[RDX*0x8]
	0000518a:MOV RDX,qword ptr [RBP + -0x60]
	0000518e:ADD RDX,RCX
	00005191:MOV RCX,qword ptr [RDX]
	00005194:MOV EDX,dword ptr [RBP + -0x24]
	00005197:MOVSXD RDX,EDX
	0000519a:ADD RDX,0x1
	0000519e:SHL RDX,0x3
	000051a2:ADD RDX,RCX
	000051a5:MOV RDX,qword ptr [RDX]
	000051a8:CMP RAX,RDX
	000051ab:JNZ 0x0000531f
END_OF_LINE
----------------------------------------------
59: (pcVar3 = ezxml_attr(xml,attr[i][j]), pcVar3 == attr[i][(long)j + 1])) {
	0000514a:CDQE
	0000514c:LEA RDX,[RAX*0x8]
	00005154:MOV RAX,qword ptr [RBP + -0x60]
	00005158:ADD RAX,RDX
	0000515b:MOV RDX,qword ptr [RAX]
	0000515e:MOV EAX,dword ptr [RBP + -0x24]
	00005161:CDQE
	00005163:SHL RAX,0x3
	00005167:ADD RAX,RDX
	0000516a:MOV RDX,qword ptr [RAX]
	0000516d:MOV RAX,qword ptr [RBP + -0x38]
	00005171:MOV RSI,RDX
	00005174:MOV RDI,RAX
	00005177:CALL 0x000015e0
	0000517c:MOV EDX,dword ptr [RBP + -0x28]
	0000517f:MOVSXD RDX,EDX
	00005182:LEA RCX,[RDX*0x8]
	0000518a:MOV RDX,qword ptr [RBP + -0x60]
	0000518e:ADD RDX,RCX
	00005191:MOV RCX,qword ptr [RDX]
	00005194:MOV EDX,dword ptr [RBP + -0x24]
	00005197:MOVSXD RDX,EDX
	0000519a:ADD RDX,0x1
	0000519e:SHL RDX,0x3
	000051a2:ADD RDX,RCX
	000051a5:MOV RDX,qword ptr [RDX]
	000051a8:CMP RAX,RDX
END_OF_LINE
----------------------------------------------
60: while (sVar1 = *len, sVar4 = strlen(attr[i][j]), *max < sVar4 + sVar1 + 7) {
	000051ec:MOV RBX,qword ptr [RAX]
	000051ef:MOV EAX,dword ptr [RBP + -0x28]
	000051f2:CDQE
	000051f4:LEA RDX,[RAX*0x8]
	000051fc:MOV RAX,qword ptr [RBP + -0x60]
	00005200:ADD RAX,RDX
	00005203:MOV RDX,qword ptr [RAX]
	00005206:MOV EAX,dword ptr [RBP + -0x24]
	00005209:CDQE
	0000520b:SHL RAX,0x3
	0000520f:ADD RAX,RDX
	00005212:MOV RAX,qword ptr [RAX]
	00005215:MOV RDI,RAX
	00005218:CALL 0x000012c0
	0000521d:ADD RAX,RBX
	00005220:LEA RDX,[RAX + 0x7]
	00005224:MOV RAX,qword ptr [RBP + -0x50]
	00005228:MOV RAX,qword ptr [RAX]
	0000522b:CMP RDX,RAX
	0000522e:JA 0x000051b3
END_OF_LINE
----------------------------------------------
61: *max = *max + 0x400;
	000051b7:MOV RAX,qword ptr [RAX]
	000051ba:LEA RDX,[RAX + 0x400]
	000051c1:MOV RAX,qword ptr [RBP + -0x50]
	000051c5:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
62: pcVar3 = (char *)realloc(*s,*max);
	000051cc:MOV RDX,qword ptr [RAX]
	000051cf:MOV RAX,qword ptr [RBP + -0x40]
	000051d3:MOV RAX,qword ptr [RAX]
	000051d6:MOV RSI,RDX
	000051d9:MOV RDI,RAX
	000051dc:CALL 0x000013b0
END_OF_LINE
----------------------------------------------
63: *s = pcVar3;
	000051e5:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
65: iVar2 = sprintf(*s + *len," %s=\"",attr[i][j]);
	00005233:CDQE
	00005235:LEA RDX,[RAX*0x8]
	0000523d:MOV RAX,qword ptr [RBP + -0x60]
	00005241:ADD RAX,RDX
	00005244:MOV RDX,qword ptr [RAX]
	00005247:MOV EAX,dword ptr [RBP + -0x24]
	0000524a:CDQE
	0000524c:SHL RAX,0x3
	00005250:ADD RAX,RDX
	00005253:MOV RAX,qword ptr [RAX]
	00005256:MOV RDX,qword ptr [RBP + -0x40]
	0000525a:MOV RCX,qword ptr [RDX]
	0000525d:MOV RDX,qword ptr [RBP + -0x48]
	00005261:MOV RDX,qword ptr [RDX]
	00005264:ADD RCX,RDX
	00005267:MOV RDX,RAX
	0000526a:LEA RAX,[0x7308]
	00005271:MOV RSI,RAX
	00005274:MOV RDI,RCX
	00005277:MOV EAX,0x0
	0000527c:CALL 0x00001410
END_OF_LINE
----------------------------------------------
66: *len = *len + (long)iVar2;
	00005285:MOV RDX,qword ptr [RDX]
	00005288:CDQE
	0000528a:ADD RDX,RAX
	0000528d:MOV RAX,qword ptr [RBP + -0x48]
	00005291:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
67: ezxml_ampencode(attr[i][(long)j + 1],0xffffffffffffffff,s,len,max,1);
	00005297:CDQE
	00005299:LEA RDX,[RAX*0x8]
	000052a1:MOV RAX,qword ptr [RBP + -0x60]
	000052a5:ADD RAX,RDX
	000052a8:MOV RDX,qword ptr [RAX]
	000052ab:MOV EAX,dword ptr [RBP + -0x24]
	000052ae:CDQE
	000052b0:ADD RAX,0x1
	000052b4:SHL RAX,0x3
	000052b8:ADD RAX,RDX
	000052bb:MOV RAX,qword ptr [RAX]
	000052be:MOV RSI,qword ptr [RBP + -0x50]
	000052c2:MOV RCX,qword ptr [RBP + -0x48]
	000052c6:MOV RDX,qword ptr [RBP + -0x40]
	000052ca:MOV R9D,0x1
	000052d0:MOV R8,RSI
	000052d3:MOV RSI,-0x1
	000052da:MOV RDI,RAX
	000052dd:CALL 0x00004ac9
END_OF_LINE
----------------------------------------------
68: iVar2 = sprintf(*s + *len,"\"");
	000052e6:MOV RDX,qword ptr [RAX]
	000052e9:MOV RAX,qword ptr [RBP + -0x48]
	000052ed:MOV RAX,qword ptr [RAX]
	000052f0:ADD RAX,RDX
	000052f3:LEA RDX,[0x71f0]
	000052fa:MOV RSI,RDX
	000052fd:MOV RDI,RAX
	00005300:MOV EAX,0x0
	00005305:CALL 0x00001410
END_OF_LINE
----------------------------------------------
69: *len = *len + (long)iVar2;
	0000530e:MOV RDX,qword ptr [RDX]
	00005311:CDQE
	00005313:ADD RDX,RAX
	00005316:MOV RAX,qword ptr [RBP + -0x48]
	0000531a:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
72: iVar2 = sprintf(*s + *len,">");
	00005373:MOV RDX,qword ptr [RAX]
	00005376:MOV RAX,qword ptr [RBP + -0x48]
	0000537a:MOV RAX,qword ptr [RAX]
	0000537d:ADD RAX,RDX
	00005380:LEA RDX,[0x7064]
	00005387:MOV RSI,RDX
	0000538a:MOV RDI,RAX
	0000538d:MOV EAX,0x0
	00005392:CALL 0x00001410
END_OF_LINE
----------------------------------------------
73: *len = *len + (long)iVar2;
	0000539b:MOV RDX,qword ptr [RDX]
	0000539e:CDQE
	000053a0:ADD RDX,RAX
	000053a3:MOV RAX,qword ptr [RBP + -0x48]
	000053a7:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
74: if (xml->child == (ezxml_t)0x0) {
	000053ae:MOV RAX,qword ptr [RAX + 0x38]
	000053b2:TEST RAX,RAX
	000053b5:JZ 0x000053e2
END_OF_LINE
----------------------------------------------
75: pcVar3 = ezxml_ampencode(xml->txt,0xffffffffffffffff,s,len,max,0);
	000053e6:MOV RAX,qword ptr [RAX + 0x10]
	000053ea:MOV RSI,qword ptr [RBP + -0x50]
	000053ee:MOV RCX,qword ptr [RBP + -0x48]
	000053f2:MOV RDX,qword ptr [RBP + -0x40]
	000053f6:MOV R9D,0x0
	000053fc:MOV R8,RSI
	000053ff:MOV RSI,-0x1
	00005406:MOV RDI,RAX
	00005409:CALL 0x00004ac9
END_OF_LINE
----------------------------------------------
78: pcVar3 = ezxml_toxml_r(xml->child,s,len,max,0,attr);
	000053bb:MOV RAX,qword ptr [RAX + 0x38]
	000053bf:MOV RDI,qword ptr [RBP + -0x60]
	000053c3:MOV RCX,qword ptr [RBP + -0x50]
	000053c7:MOV RDX,qword ptr [RBP + -0x48]
	000053cb:MOV RSI,qword ptr [RBP + -0x40]
	000053cf:MOV R9,RDI
	000053d2:MOV R8D,0x0
	000053d8:MOV RDI,RAX
	000053db:CALL 0x00004dbe
END_OF_LINE
----------------------------------------------
80: *s = pcVar3;
	00005412:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
81: while (sVar1 = *len, sVar4 = strlen(xml->name), *max < sVar4 + sVar1 + 4) {
	00005450:MOV RBX,qword ptr [RAX]
	00005453:MOV RAX,qword ptr [RBP + -0x38]
	00005457:MOV RAX,qword ptr [RAX]
	0000545a:MOV RDI,RAX
	0000545d:CALL 0x000012c0
	00005462:ADD RAX,RBX
	00005465:LEA RDX,[RAX + 0x4]
	00005469:MOV RAX,qword ptr [RBP + -0x50]
	0000546d:MOV RAX,qword ptr [RAX]
	00005470:CMP RDX,RAX
	00005473:JA 0x00005417
END_OF_LINE
----------------------------------------------
82: *max = *max + 0x400;
	0000541b:MOV RAX,qword ptr [RAX]
	0000541e:LEA RDX,[RAX + 0x400]
	00005425:MOV RAX,qword ptr [RBP + -0x50]
	00005429:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
83: pcVar3 = (char *)realloc(*s,*max);
	00005430:MOV RDX,qword ptr [RAX]
	00005433:MOV RAX,qword ptr [RBP + -0x40]
	00005437:MOV RAX,qword ptr [RAX]
	0000543a:MOV RSI,RDX
	0000543d:MOV RDI,RAX
	00005440:CALL 0x000013b0
END_OF_LINE
----------------------------------------------
84: *s = pcVar3;
	00005449:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
86: iVar2 = sprintf(*s + *len,"</%s>",xml->name);
	00005479:MOV RAX,qword ptr [RAX]
	0000547c:MOV RDX,qword ptr [RBP + -0x40]
	00005480:MOV RCX,qword ptr [RDX]
	00005483:MOV RDX,qword ptr [RBP + -0x48]
	00005487:MOV RDX,qword ptr [RDX]
	0000548a:ADD RCX,RDX
	0000548d:MOV RDX,RAX
	00005490:LEA RAX,[0x730e]
	00005497:MOV RSI,RAX
	0000549a:MOV RDI,RCX
	0000549d:MOV EAX,0x0
	000054a2:CALL 0x00001410
END_OF_LINE
----------------------------------------------
87: *len = *len + (long)iVar2;
	000054ab:MOV RDX,qword ptr [RDX]
	000054ae:CDQE
	000054b0:ADD RDX,RAX
	000054b3:MOV RAX,qword ptr [RBP + -0x48]
	000054b7:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
88: for (; (pcVar5[off] != '\0' && (off < xml->off)); off = off + 1) {
	000054bc:ADD qword ptr [RBP + -0x20],0x1
	000054c1:MOV RDX,qword ptr [RBP + -0x18]
	000054c5:MOV RAX,qword ptr [RBP + -0x20]
	000054c9:ADD RAX,RDX
	000054cc:MOVZX EAX,byte ptr [RAX]
	000054cf:TEST AL,AL
	000054d1:JZ 0x000054e1
	000054d3:MOV RAX,qword ptr [RBP + -0x38]
	000054d7:MOV RAX,qword ptr [RAX + 0x18]
	000054db:CMP qword ptr [RBP + -0x20],RAX
	000054df:JC 0x000054bc
END_OF_LINE
----------------------------------------------
90: if (xml->ordered == (ezxml_t)0x0) {
	000054e5:MOV RAX,qword ptr [RAX + 0x30]
	000054e9:TEST RAX,RAX
	000054ec:JZ 0x0000551a
END_OF_LINE
----------------------------------------------
91: pcVar5 = ezxml_ampencode(pcVar5 + off,0xffffffffffffffff,s,len,max,0);
	00005522:LEA RDI,[RDX + RAX*0x1]
	00005526:MOV RCX,qword ptr [RBP + -0x50]
	0000552a:MOV RDX,qword ptr [RBP + -0x48]
	0000552e:MOV RAX,qword ptr [RBP + -0x40]
	00005532:MOV R9D,0x0
	00005538:MOV R8,RCX
	0000553b:MOV RCX,RDX
	0000553e:MOV RDX,RAX
	00005541:MOV RSI,-0x1
	00005548:CALL 0x00004ac9
END_OF_LINE
----------------------------------------------
94: pcVar5 = ezxml_toxml_r(xml->ordered,s,len,max,off,attr);
	000054f2:MOV RAX,qword ptr [RAX + 0x30]
	000054f6:MOV R8,qword ptr [RBP + -0x60]
	000054fa:MOV RDI,qword ptr [RBP + -0x20]
	000054fe:MOV RCX,qword ptr [RBP + -0x50]
	00005502:MOV RDX,qword ptr [RBP + -0x48]
	00005506:MOV RSI,qword ptr [RBP + -0x40]
	0000550a:MOV R9,R8
	0000550d:MOV R8,RDI
	00005510:MOV RDI,RAX
	00005513:CALL 0x00004dbe
END_OF_LINE
----------------------------------------------
96: return pcVar5;
	00005552:RET
END_OF_LINE



Function: ezxml_toxml
----------------------------------------------
25: local_20 = *(long *)(in_FS_OFFSET + 0x28);
	00005564:MOV RAX,qword ptr FS:[0x28]
END_OF_LINE
----------------------------------------------
26: if (xml == (ezxml_t.conflict)0x0) {
	00005573:CMP qword ptr [RBP + -0x78],0x0
	00005578:JZ 0x00005584
END_OF_LINE
----------------------------------------------
27: p = (ezxml_t)0x0;
	00005584:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
28: o = (ezxml_t)0x0;
	0000559e:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
31: p = xml->parent;
	0000557e:MOV RAX,qword ptr [RAX + 0x40]
END_OF_LINE
----------------------------------------------
32: o = xml->ordered;
	00005598:MOV RAX,qword ptr [RAX + 0x30]
END_OF_LINE
----------------------------------------------
34: len = 0;
	000055af:MOV qword ptr [RBP + -0x58],0x0
END_OF_LINE
----------------------------------------------
35: max = 0x400;
	000055b7:MOV qword ptr [RBP + -0x50],0x400
END_OF_LINE
----------------------------------------------
36: root = (ezxml_root_t)xml;
	000055c6:CALL 0x000013a0
END_OF_LINE
----------------------------------------------
37: s = (char *)malloc(0x400);
	000055c6:CALL 0x000013a0
END_OF_LINE
----------------------------------------------
38: *s = '\0';
	000055cb:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
39: if ((xml == (ezxml_t.conflict)0x0) || (xml->name == (char *)0x0)) {
	000055d2:CMP qword ptr [RBP + -0x78],0x0
	000055d7:JZ 0x000055e5
	000055d9:MOV RAX,qword ptr [RBP + -0x78]
	000055dd:MOV RAX,qword ptr [RAX]
	000055e0:TEST RAX,RAX
	000055e3:JNZ 0x0000560d
END_OF_LINE
----------------------------------------------
40: pcVar3 = (char *)realloc(s,len + 1);
	000055e9:LEA RDX,[RAX + 0x1]
	000055ed:MOV RAX,qword ptr [RBP + -0x48]
	000055f1:MOV RSI,RDX
	000055f4:MOV RDI,RAX
	000055f7:CALL 0x000013b0
END_OF_LINE
----------------------------------------------
43: for (; (root->xml).parent != (ezxml_t)0x0; root = (ezxml_root_t)(root->xml).parent) {
	00005605:MOV RAX,qword ptr [RAX + 0x40]
	00005609:MOV qword ptr [RBP + -0x40],RAX
	0000560d:MOV RAX,qword ptr [RBP + -0x40]
	00005611:MOV RAX,qword ptr [RAX + 0x40]
	00005615:TEST RAX,RAX
	00005618:JNZ 0x00005601
END_OF_LINE
----------------------------------------------
45: for (i = 0; (p == (ezxml_t.conflict)0x0 && (root->pi[i] != (char **)0x0)); i = i + 1) {
	0000561a:MOV dword ptr [RBP + -0x64],0x0
	00005621:JMP 0x000057c3
	00005626:MOV dword ptr [RBP + -0x5c],0x2
	0000562d:JMP 0x00005633
	0000562f:ADD dword ptr [RBP + -0x5c],0x1
	00005633:MOV RAX,qword ptr [RBP + -0x40]
	00005637:MOV RDX,qword ptr [RAX + 0x90]
	0000563e:MOV EAX,dword ptr [RBP + -0x64]
	00005641:CDQE
	00005643:SHL RAX,0x3
	00005647:ADD RAX,RDX
	0000564a:MOV RDX,qword ptr [RAX]
	0000564d:MOV EAX,dword ptr [RBP + -0x5c]
	00005650:CDQE
	00005652:SHL RAX,0x3
	00005656:SUB RAX,0x8
	0000565a:ADD RAX,RDX
	0000565d:MOV RAX,qword ptr [RAX]
	00005660:TEST RAX,RAX
	00005663:JNZ 0x0000562f
	00005665:MOV dword ptr [RBP + -0x60],0x1
	0000566c:JMP 0x00005787
	00005671:MOV RAX,qword ptr [RBP + -0x40]
	00005675:MOV RDX,qword ptr [RAX + 0x90]
	0000567c:MOV EAX,dword ptr [RBP + -0x64]
	0000567f:CDQE
	00005681:SHL RAX,0x3
	00005685:ADD RAX,RDX
	00005688:MOV RDX,qword ptr [RAX]
	0000568b:MOV EAX,dword ptr [RBP + -0x5c]
	0000568e:CDQE
	00005690:SHL RAX,0x3
	00005694:ADD RAX,RDX
	00005697:MOV RDX,qword ptr [RAX]
	0000569a:MOV EAX,dword ptr [RBP + -0x60]
	0000569d:CDQE
	0000569f:SUB RAX,0x1
	000056a3:ADD RAX,RDX
	000056a6:MOVZX EAX,byte ptr [RAX]
	000056a9:CMP AL,0x3e
	000056ab:JZ 0x00005782
	000056b1:JMP 0x000056d8
	000056b3:MOV RAX,qword ptr [RBP + -0x50]
	000056b7:ADD RAX,0x400
	000056bd:MOV qword ptr [RBP + -0x50],RAX
	000056c1:MOV RDX,qword ptr [RBP + -0x50]
	000056c5:MOV RAX,qword ptr [RBP + -0x48]
	000056c9:MOV RSI,RDX
	000056cc:MOV RDI,RAX
	000056cf:CALL 0x000013b0
	000056d4:MOV qword ptr [RBP + -0x48],RAX
	000056d8:MOV RAX,qword ptr [RBP + -0x40]
	000056dc:MOV RDX,qword ptr [RAX + 0x90]
	000056e3:MOV EAX,dword ptr [RBP + -0x64]
	000056e6:CDQE
	000056e8:SHL RAX,0x3
	000056ec:ADD RAX,RDX
	000056ef:MOV RAX,qword ptr [RAX]
	000056f2:MOV RAX,qword ptr [RAX]
	000056f5:MOV qword ptr [RBP + -0x20],RAX
	000056f9:MOV RAX,qword ptr [RBP + -0x20]
	000056fd:MOV RDI,RAX
	00005700:CALL 0x000012c0
	00005705:MOV RDX,qword ptr [RBP + -0x58]
	00005709:LEA RBX,[RAX + RDX*0x1]
	0000570d:MOV RAX,qword ptr [RBP + -0x28]
	00005711:MOV RDI,RAX
	00005714:CALL 0x000012c0
	00005719:ADD RAX,RBX
	0000571c:LEA RDX,[RAX + 0x7]
	00005720:MOV RAX,qword ptr [RBP + -0x50]
	00005724:CMP RDX,RAX
	00005727:JA 0x000056b3
	00005729:MOV RAX,qword ptr [RBP + -0x28]
	0000572d:MOVZX EAX,byte ptr [RAX]
	00005730:TEST AL,AL
	00005732:JZ 0x0000573d
	00005734:LEA RAX,[0x7024]
	0000573b:JMP 0x00005744
	0000573d:LEA RAX,[0x7063]
	00005744:MOV RCX,qword ptr [RBP + -0x48]
	00005748:MOV RDX,qword ptr [RBP + -0x58]
	0000574c:LEA RDI,[RCX + RDX*0x1]
	00005750:MOV RCX,qword ptr [RBP + -0x28]
	00005754:MOV RDX,qword ptr [RBP + -0x20]
	00005758:MOV R8,RCX
	0000575b:MOV RCX,RAX
	0000575e:LEA RAX,[0x7314]
	00005765:MOV RSI,RAX
	00005768:MOV EAX,0x0
	0000576d:CALL 0x00001410
	00005772:MOVSXD RDX,EAX
	00005775:MOV RAX,qword ptr [RBP + -0x58]
	00005779:ADD RAX,RDX
	0000577c:MOV qword ptr [RBP + -0x58],RAX
	00005780:JMP 0x00005783
	00005782:NOP
	00005783:ADD dword ptr [RBP + -0x60],0x1
	00005787:MOV RAX,qword ptr [RBP + -0x40]
	0000578b:MOV RDX,qword ptr [RAX + 0x90]
	00005792:MOV EAX,dword ptr [RBP + -0x64]
	00005795:CDQE
	00005797:SHL RAX,0x3
	0000579b:ADD RAX,RDX
	0000579e:MOV RDX,qword ptr [RAX]
	000057a1:MOV EAX,dword ptr [RBP + -0x60]
	000057a4:CDQE
	000057a6:SHL RAX,0x3
	000057aa:ADD RAX,RDX
	000057ad:MOV RAX,qword ptr [RAX]
	000057b0:MOV qword ptr [RBP + -0x28],RAX
	000057b4:CMP qword ptr [RBP + -0x28],0x0
	000057b9:JNZ 0x00005671
	000057bf:ADD dword ptr [RBP + -0x64],0x1
	000057c3:CMP qword ptr [RBP + -0x38],0x0
	000057c8:JNZ 0x000057ed
	000057ca:MOV RAX,qword ptr [RBP + -0x40]
	000057ce:MOV RDX,qword ptr [RAX + 0x90]
	000057d5:MOV EAX,dword ptr [RBP + -0x64]
	000057d8:CDQE
	000057da:SHL RAX,0x3
	000057de:ADD RAX,RDX
	000057e1:MOV RAX,qword ptr [RAX]
	000057e4:TEST RAX,RAX
	000057e7:JNZ 0x00005626
END_OF_LINE
----------------------------------------------
46: k = 2;
	00005626:MOV dword ptr [RBP + -0x5c],0x2
END_OF_LINE
----------------------------------------------
47: while (root->pi[i][(long)k + -1] != (char *)0x0) {
	00005637:MOV RDX,qword ptr [RAX + 0x90]
	0000563e:MOV EAX,dword ptr [RBP + -0x64]
	00005641:CDQE
	00005643:SHL RAX,0x3
	00005647:ADD RAX,RDX
	0000564a:MOV RDX,qword ptr [RAX]
	0000564d:MOV EAX,dword ptr [RBP + -0x5c]
	00005650:CDQE
	00005652:SHL RAX,0x3
	00005656:SUB RAX,0x8
	0000565a:ADD RAX,RDX
	0000565d:MOV RAX,qword ptr [RAX]
	00005660:TEST RAX,RAX
	00005663:JNZ 0x0000562f
END_OF_LINE
----------------------------------------------
48: k = k + 1;
	0000562f:ADD dword ptr [RBP + -0x5c],0x1
END_OF_LINE
----------------------------------------------
50: for (j = 1; n = root->pi[i][j], n != (char *)0x0; j = j + 1) {
	00005665:MOV dword ptr [RBP + -0x60],0x1
	0000566c:JMP 0x00005787
	00005671:MOV RAX,qword ptr [RBP + -0x40]
	00005675:MOV RDX,qword ptr [RAX + 0x90]
	0000567c:MOV EAX,dword ptr [RBP + -0x64]
	0000567f:CDQE
	00005681:SHL RAX,0x3
	00005685:ADD RAX,RDX
	00005688:MOV RDX,qword ptr [RAX]
	0000568b:MOV EAX,dword ptr [RBP + -0x5c]
	0000568e:CDQE
	00005690:SHL RAX,0x3
	00005694:ADD RAX,RDX
	00005697:MOV RDX,qword ptr [RAX]
	0000569a:MOV EAX,dword ptr [RBP + -0x60]
	0000569d:CDQE
	0000569f:SUB RAX,0x1
	000056a3:ADD RAX,RDX
	000056a6:MOVZX EAX,byte ptr [RAX]
	000056a9:CMP AL,0x3e
	000056ab:JZ 0x00005782
	000056b1:JMP 0x000056d8
	000056b3:MOV RAX,qword ptr [RBP + -0x50]
	000056b7:ADD RAX,0x400
	000056bd:MOV qword ptr [RBP + -0x50],RAX
	000056c1:MOV RDX,qword ptr [RBP + -0x50]
	000056c5:MOV RAX,qword ptr [RBP + -0x48]
	000056c9:MOV RSI,RDX
	000056cc:MOV RDI,RAX
	000056cf:CALL 0x000013b0
	000056d4:MOV qword ptr [RBP + -0x48],RAX
	000056d8:MOV RAX,qword ptr [RBP + -0x40]
	000056dc:MOV RDX,qword ptr [RAX + 0x90]
	000056e3:MOV EAX,dword ptr [RBP + -0x64]
	000056e6:CDQE
	000056e8:SHL RAX,0x3
	000056ec:ADD RAX,RDX
	000056ef:MOV RAX,qword ptr [RAX]
	000056f2:MOV RAX,qword ptr [RAX]
	000056f5:MOV qword ptr [RBP + -0x20],RAX
	000056f9:MOV RAX,qword ptr [RBP + -0x20]
	000056fd:MOV RDI,RAX
	00005700:CALL 0x000012c0
	00005705:MOV RDX,qword ptr [RBP + -0x58]
	00005709:LEA RBX,[RAX + RDX*0x1]
	0000570d:MOV RAX,qword ptr [RBP + -0x28]
	00005711:MOV RDI,RAX
	00005714:CALL 0x000012c0
	00005719:ADD RAX,RBX
	0000571c:LEA RDX,[RAX + 0x7]
	00005720:MOV RAX,qword ptr [RBP + -0x50]
	00005724:CMP RDX,RAX
	00005727:JA 0x000056b3
	00005729:MOV RAX,qword ptr [RBP + -0x28]
	0000572d:MOVZX EAX,byte ptr [RAX]
	00005730:TEST AL,AL
	00005732:JZ 0x0000573d
	00005734:LEA RAX,[0x7024]
	0000573b:JMP 0x00005744
	0000573d:LEA RAX,[0x7063]
	00005744:MOV RCX,qword ptr [RBP + -0x48]
	00005748:MOV RDX,qword ptr [RBP + -0x58]
	0000574c:LEA RDI,[RCX + RDX*0x1]
	00005750:MOV RCX,qword ptr [RBP + -0x28]
	00005754:MOV RDX,qword ptr [RBP + -0x20]
	00005758:MOV R8,RCX
	0000575b:MOV RCX,RAX
	0000575e:LEA RAX,[0x7314]
	00005765:MOV RSI,RAX
	00005768:MOV EAX,0x0
	0000576d:CALL 0x00001410
	00005772:MOVSXD RDX,EAX
	00005775:MOV RAX,qword ptr [RBP + -0x58]
	00005779:ADD RAX,RDX
	0000577c:MOV qword ptr [RBP + -0x58],RAX
	00005780:JMP 0x00005783
	00005782:NOP
	00005783:ADD dword ptr [RBP + -0x60],0x1
	00005787:MOV RAX,qword ptr [RBP + -0x40]
	0000578b:MOV RDX,qword ptr [RAX + 0x90]
	00005792:MOV EAX,dword ptr [RBP + -0x64]
	00005795:CDQE
	00005797:SHL RAX,0x3
	0000579b:ADD RAX,RDX
	0000579e:MOV RDX,qword ptr [RAX]
	000057a1:MOV EAX,dword ptr [RBP + -0x60]
	000057a4:CDQE
	000057a6:SHL RAX,0x3
	000057aa:ADD RAX,RDX
	000057ad:MOV RAX,qword ptr [RAX]
	000057b0:MOV qword ptr [RBP + -0x28],RAX
	000057b4:CMP qword ptr [RBP + -0x28],0x0
	000057b9:JNZ 0x00005671
END_OF_LINE
----------------------------------------------
51: if (root->pi[i][k][(long)j + -1] != '>') {
	00005675:MOV RDX,qword ptr [RAX + 0x90]
	0000567c:MOV EAX,dword ptr [RBP + -0x64]
	0000567f:CDQE
	00005681:SHL RAX,0x3
	00005685:ADD RAX,RDX
	00005688:MOV RDX,qword ptr [RAX]
	0000568b:MOV EAX,dword ptr [RBP + -0x5c]
	0000568e:CDQE
	00005690:SHL RAX,0x3
	00005694:ADD RAX,RDX
	00005697:MOV RDX,qword ptr [RAX]
	0000569a:MOV EAX,dword ptr [RBP + -0x60]
	0000569d:CDQE
	0000569f:SUB RAX,0x1
	000056a3:ADD RAX,RDX
	000056a6:MOVZX EAX,byte ptr [RAX]
	000056a9:CMP AL,0x3e
	000056ab:JZ 0x00005782
END_OF_LINE
----------------------------------------------
52: while( true ) {
	00005727:JA 0x000056b3
END_OF_LINE
----------------------------------------------
53: t = *root->pi[i];
	000056dc:MOV RDX,qword ptr [RAX + 0x90]
	000056e3:MOV EAX,dword ptr [RBP + -0x64]
	000056e6:CDQE
	000056e8:SHL RAX,0x3
	000056ec:ADD RAX,RDX
	000056ef:MOV RAX,qword ptr [RAX]
	000056f2:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
54: sVar4 = strlen(t);
	00005700:CALL 0x000012c0
END_OF_LINE
----------------------------------------------
55: lVar1 = sVar4 + len;
	00005709:LEA RBX,[RAX + RDX*0x1]
END_OF_LINE
----------------------------------------------
56: sVar4 = strlen(n);
	00005714:CALL 0x000012c0
END_OF_LINE
----------------------------------------------
57: if (sVar4 + lVar1 + 7 <= max) break;
	00005719:ADD RAX,RBX
	0000571c:LEA RDX,[RAX + 0x7]
	00005720:MOV RAX,qword ptr [RBP + -0x50]
	00005724:CMP RDX,RAX
	00005727:JA 0x000056b3
END_OF_LINE
----------------------------------------------
58: max = max + 0x400;
	000056b7:ADD RAX,0x400
END_OF_LINE
----------------------------------------------
59: s = (char *)realloc(s,max);
	000056cf:CALL 0x000013b0
END_OF_LINE
----------------------------------------------
61: if (*n == '\0') {
	0000572d:MOVZX EAX,byte ptr [RAX]
	00005730:TEST AL,AL
	00005732:JZ 0x0000573d
END_OF_LINE
----------------------------------------------
62: puVar5 = &DAT_00007063;
	0000573d:LEA RAX,[0x7063]
END_OF_LINE
----------------------------------------------
65: puVar5 = &DAT_00007024;
	00005734:LEA RAX,[0x7024]
END_OF_LINE
----------------------------------------------
67: iVar2 = sprintf(s + len,"<?%s%s%s?>\n",t,puVar5,n);
	0000574c:LEA RDI,[RCX + RDX*0x1]
	00005750:MOV RCX,qword ptr [RBP + -0x28]
	00005754:MOV RDX,qword ptr [RBP + -0x20]
	00005758:MOV R8,RCX
	0000575b:MOV RCX,RAX
	0000575e:LEA RAX,[0x7314]
	00005765:MOV RSI,RAX
	00005768:MOV EAX,0x0
	0000576d:CALL 0x00001410
END_OF_LINE
----------------------------------------------
68: len = len + (long)iVar2;
	00005772:MOVSXD RDX,EAX
	00005775:MOV RAX,qword ptr [RBP + -0x58]
	00005779:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
71: n = (char *)0x0;
	000057bf:ADD dword ptr [RBP + -0x64],0x1
END_OF_LINE
----------------------------------------------
73: xml->ordered = (ezxml_t)0x0;
	000057f1:MOV qword ptr [RAX + 0x30],0x0
END_OF_LINE
----------------------------------------------
74: xml->parent = xml->ordered;
	000057fd:MOV RDX,qword ptr [RAX + 0x30]
	00005801:MOV RAX,qword ptr [RBP + -0x78]
	00005805:MOV qword ptr [RAX + 0x40],RDX
END_OF_LINE
----------------------------------------------
75: s = ezxml_toxml_r(xml,&s,&len,&max,0,root->attr);
	0000580d:MOV RDI,qword ptr [RAX + 0x88]
	00005814:LEA RCX,[RBP + -0x50]
	00005818:LEA RDX,[RBP + -0x58]
	0000581c:LEA RSI,[RBP + -0x48]
	00005820:MOV RAX,qword ptr [RBP + -0x78]
	00005824:MOV R9,RDI
	00005827:MOV R8D,0x0
	0000582d:MOV RDI,RAX
	00005830:CALL 0x00004dbe
END_OF_LINE
----------------------------------------------
76: xml->parent = p;
	00005841:MOV qword ptr [RAX + 0x40],RDX
END_OF_LINE
----------------------------------------------
77: xml->ordered = o;
	0000584d:MOV qword ptr [RAX + 0x30],RDX
END_OF_LINE
----------------------------------------------
78: for (i = 0; (p == (ezxml_t.conflict)0x0 && (root->pi[i] != (char **)0x0)); i = i + 1) {
	00005851:MOV dword ptr [RBP + -0x64],0x0
	00005858:JMP 0x000059fa
	0000585d:MOV dword ptr [RBP + -0x5c],0x2
	00005864:JMP 0x0000586a
	00005866:ADD dword ptr [RBP + -0x5c],0x1
	0000586a:MOV RAX,qword ptr [RBP + -0x40]
	0000586e:MOV RDX,qword ptr [RAX + 0x90]
	00005875:MOV EAX,dword ptr [RBP + -0x64]
	00005878:CDQE
	0000587a:SHL RAX,0x3
	0000587e:ADD RAX,RDX
	00005881:MOV RDX,qword ptr [RAX]
	00005884:MOV EAX,dword ptr [RBP + -0x5c]
	00005887:CDQE
	00005889:SHL RAX,0x3
	0000588d:SUB RAX,0x8
	00005891:ADD RAX,RDX
	00005894:MOV RAX,qword ptr [RAX]
	00005897:TEST RAX,RAX
	0000589a:JNZ 0x00005866
	0000589c:MOV dword ptr [RBP + -0x60],0x1
	000058a3:JMP 0x000059be
	000058a8:MOV RAX,qword ptr [RBP + -0x40]
	000058ac:MOV RDX,qword ptr [RAX + 0x90]
	000058b3:MOV EAX,dword ptr [RBP + -0x64]
	000058b6:CDQE
	000058b8:SHL RAX,0x3
	000058bc:ADD RAX,RDX
	000058bf:MOV RDX,qword ptr [RAX]
	000058c2:MOV EAX,dword ptr [RBP + -0x5c]
	000058c5:CDQE
	000058c7:SHL RAX,0x3
	000058cb:ADD RAX,RDX
	000058ce:MOV RDX,qword ptr [RAX]
	000058d1:MOV EAX,dword ptr [RBP + -0x60]
	000058d4:CDQE
	000058d6:SUB RAX,0x1
	000058da:ADD RAX,RDX
	000058dd:MOVZX EAX,byte ptr [RAX]
	000058e0:CMP AL,0x3c
	000058e2:JZ 0x000059b9
	000058e8:JMP 0x0000590f
	000058ea:MOV RAX,qword ptr [RBP + -0x50]
	000058ee:ADD RAX,0x400
	000058f4:MOV qword ptr [RBP + -0x50],RAX
	000058f8:MOV RDX,qword ptr [RBP + -0x50]
	000058fc:MOV RAX,qword ptr [RBP + -0x48]
	00005900:MOV RSI,RDX
	00005903:MOV RDI,RAX
	00005906:CALL 0x000013b0
	0000590b:MOV qword ptr [RBP + -0x48],RAX
	0000590f:MOV RAX,qword ptr [RBP + -0x40]
	00005913:MOV RDX,qword ptr [RAX + 0x90]
	0000591a:MOV EAX,dword ptr [RBP + -0x64]
	0000591d:CDQE
	0000591f:SHL RAX,0x3
	00005923:ADD RAX,RDX
	00005926:MOV RAX,qword ptr [RAX]
	00005929:MOV RAX,qword ptr [RAX]
	0000592c:MOV qword ptr [RBP + -0x20],RAX
	00005930:MOV RAX,qword ptr [RBP + -0x20]
	00005934:MOV RDI,RAX
	00005937:CALL 0x000012c0
	0000593c:MOV RDX,qword ptr [RBP + -0x58]
	00005940:LEA RBX,[RAX + RDX*0x1]
	00005944:MOV RAX,qword ptr [RBP + -0x28]
	00005948:MOV RDI,RAX
	0000594b:CALL 0x000012c0
	00005950:ADD RAX,RBX
	00005953:LEA RDX,[RAX + 0x7]
	00005957:MOV RAX,qword ptr [RBP + -0x50]
	0000595b:CMP RDX,RAX
	0000595e:JA 0x000058ea
	00005960:MOV RAX,qword ptr [RBP + -0x28]
	00005964:MOVZX EAX,byte ptr [RAX]
	00005967:TEST AL,AL
	00005969:JZ 0x00005974
	0000596b:LEA RAX,[0x7024]
	00005972:JMP 0x0000597b
	00005974:LEA RAX,[0x7063]
	0000597b:MOV RCX,qword ptr [RBP + -0x48]
	0000597f:MOV RDX,qword ptr [RBP + -0x58]
	00005983:LEA RDI,[RCX + RDX*0x1]
	00005987:MOV RCX,qword ptr [RBP + -0x28]
	0000598b:MOV RDX,qword ptr [RBP + -0x20]
	0000598f:MOV R8,RCX
	00005992:MOV RCX,RAX
	00005995:LEA RAX,[0x7320]
	0000599c:MOV RSI,RAX
	0000599f:MOV EAX,0x0
	000059a4:CALL 0x00001410
	000059a9:MOVSXD RDX,EAX
	000059ac:MOV RAX,qword ptr [RBP + -0x58]
	000059b0:ADD RAX,RDX
	000059b3:MOV qword ptr [RBP + -0x58],RAX
	000059b7:JMP 0x000059ba
	000059b9:NOP
	000059ba:ADD dword ptr [RBP + -0x60],0x1
	000059be:MOV RAX,qword ptr [RBP + -0x40]
	000059c2:MOV RDX,qword ptr [RAX + 0x90]
	000059c9:MOV EAX,dword ptr [RBP + -0x64]
	000059cc:CDQE
	000059ce:SHL RAX,0x3
	000059d2:ADD RAX,RDX
	000059d5:MOV RDX,qword ptr [RAX]
	000059d8:MOV EAX,dword ptr [RBP + -0x60]
	000059db:CDQE
	000059dd:SHL RAX,0x3
	000059e1:ADD RAX,RDX
	000059e4:MOV RAX,qword ptr [RAX]
	000059e7:MOV qword ptr [RBP + -0x28],RAX
	000059eb:CMP qword ptr [RBP + -0x28],0x0
	000059f0:JNZ 0x000058a8
	000059f6:ADD dword ptr [RBP + -0x64],0x1
	000059fa:CMP qword ptr [RBP + -0x38],0x0
	000059ff:JNZ 0x00005a24
	00005a01:MOV RAX,qword ptr [RBP + -0x40]
	00005a05:MOV RDX,qword ptr [RAX + 0x90]
	00005a0c:MOV EAX,dword ptr [RBP + -0x64]
	00005a0f:CDQE
	00005a11:SHL RAX,0x3
	00005a15:ADD RAX,RDX
	00005a18:MOV RAX,qword ptr [RAX]
	00005a1b:TEST RAX,RAX
	00005a1e:JNZ 0x0000585d
END_OF_LINE
----------------------------------------------
79: k = 2;
	0000585d:MOV dword ptr [RBP + -0x5c],0x2
END_OF_LINE
----------------------------------------------
80: while (root->pi[i][(long)k + -1] != (char *)0x0) {
	0000586e:MOV RDX,qword ptr [RAX + 0x90]
	00005875:MOV EAX,dword ptr [RBP + -0x64]
	00005878:CDQE
	0000587a:SHL RAX,0x3
	0000587e:ADD RAX,RDX
	00005881:MOV RDX,qword ptr [RAX]
	00005884:MOV EAX,dword ptr [RBP + -0x5c]
	00005887:CDQE
	00005889:SHL RAX,0x3
	0000588d:SUB RAX,0x8
	00005891:ADD RAX,RDX
	00005894:MOV RAX,qword ptr [RAX]
	00005897:TEST RAX,RAX
	0000589a:JNZ 0x00005866
END_OF_LINE
----------------------------------------------
81: k = k + 1;
	00005866:ADD dword ptr [RBP + -0x5c],0x1
END_OF_LINE
----------------------------------------------
83: for (j = 1; n = root->pi[i][j], n != (char *)0x0; j = j + 1) {
	0000589c:MOV dword ptr [RBP + -0x60],0x1
	000058a3:JMP 0x000059be
	000058a8:MOV RAX,qword ptr [RBP + -0x40]
	000058ac:MOV RDX,qword ptr [RAX + 0x90]
	000058b3:MOV EAX,dword ptr [RBP + -0x64]
	000058b6:CDQE
	000058b8:SHL RAX,0x3
	000058bc:ADD RAX,RDX
	000058bf:MOV RDX,qword ptr [RAX]
	000058c2:MOV EAX,dword ptr [RBP + -0x5c]
	000058c5:CDQE
	000058c7:SHL RAX,0x3
	000058cb:ADD RAX,RDX
	000058ce:MOV RDX,qword ptr [RAX]
	000058d1:MOV EAX,dword ptr [RBP + -0x60]
	000058d4:CDQE
	000058d6:SUB RAX,0x1
	000058da:ADD RAX,RDX
	000058dd:MOVZX EAX,byte ptr [RAX]
	000058e0:CMP AL,0x3c
	000058e2:JZ 0x000059b9
	000058e8:JMP 0x0000590f
	000058ea:MOV RAX,qword ptr [RBP + -0x50]
	000058ee:ADD RAX,0x400
	000058f4:MOV qword ptr [RBP + -0x50],RAX
	000058f8:MOV RDX,qword ptr [RBP + -0x50]
	000058fc:MOV RAX,qword ptr [RBP + -0x48]
	00005900:MOV RSI,RDX
	00005903:MOV RDI,RAX
	00005906:CALL 0x000013b0
	0000590b:MOV qword ptr [RBP + -0x48],RAX
	0000590f:MOV RAX,qword ptr [RBP + -0x40]
	00005913:MOV RDX,qword ptr [RAX + 0x90]
	0000591a:MOV EAX,dword ptr [RBP + -0x64]
	0000591d:CDQE
	0000591f:SHL RAX,0x3
	00005923:ADD RAX,RDX
	00005926:MOV RAX,qword ptr [RAX]
	00005929:MOV RAX,qword ptr [RAX]
	0000592c:MOV qword ptr [RBP + -0x20],RAX
	00005930:MOV RAX,qword ptr [RBP + -0x20]
	00005934:MOV RDI,RAX
	00005937:CALL 0x000012c0
	0000593c:MOV RDX,qword ptr [RBP + -0x58]
	00005940:LEA RBX,[RAX + RDX*0x1]
	00005944:MOV RAX,qword ptr [RBP + -0x28]
	00005948:MOV RDI,RAX
	0000594b:CALL 0x000012c0
	00005950:ADD RAX,RBX
	00005953:LEA RDX,[RAX + 0x7]
	00005957:MOV RAX,qword ptr [RBP + -0x50]
	0000595b:CMP RDX,RAX
	0000595e:JA 0x000058ea
	00005960:MOV RAX,qword ptr [RBP + -0x28]
	00005964:MOVZX EAX,byte ptr [RAX]
	00005967:TEST AL,AL
	00005969:JZ 0x00005974
	0000596b:LEA RAX,[0x7024]
	00005972:JMP 0x0000597b
	00005974:LEA RAX,[0x7063]
	0000597b:MOV RCX,qword ptr [RBP + -0x48]
	0000597f:MOV RDX,qword ptr [RBP + -0x58]
	00005983:LEA RDI,[RCX + RDX*0x1]
	00005987:MOV RCX,qword ptr [RBP + -0x28]
	0000598b:MOV RDX,qword ptr [RBP + -0x20]
	0000598f:MOV R8,RCX
	00005992:MOV RCX,RAX
	00005995:LEA RAX,[0x7320]
	0000599c:MOV RSI,RAX
	0000599f:MOV EAX,0x0
	000059a4:CALL 0x00001410
	000059a9:MOVSXD RDX,EAX
	000059ac:MOV RAX,qword ptr [RBP + -0x58]
	000059b0:ADD RAX,RDX
	000059b3:MOV qword ptr [RBP + -0x58],RAX
	000059b7:JMP 0x000059ba
	000059b9:NOP
	000059ba:ADD dword ptr [RBP + -0x60],0x1
	000059be:MOV RAX,qword ptr [RBP + -0x40]
	000059c2:MOV RDX,qword ptr [RAX + 0x90]
	000059c9:MOV EAX,dword ptr [RBP + -0x64]
	000059cc:CDQE
	000059ce:SHL RAX,0x3
	000059d2:ADD RAX,RDX
	000059d5:MOV RDX,qword ptr [RAX]
	000059d8:MOV EAX,dword ptr [RBP + -0x60]
	000059db:CDQE
	000059dd:SHL RAX,0x3
	000059e1:ADD RAX,RDX
	000059e4:MOV RAX,qword ptr [RAX]
	000059e7:MOV qword ptr [RBP + -0x28],RAX
	000059eb:CMP qword ptr [RBP + -0x28],0x0
	000059f0:JNZ 0x000058a8
END_OF_LINE
----------------------------------------------
84: if (root->pi[i][k][(long)j + -1] != '<') {
	000058ac:MOV RDX,qword ptr [RAX + 0x90]
	000058b3:MOV EAX,dword ptr [RBP + -0x64]
	000058b6:CDQE
	000058b8:SHL RAX,0x3
	000058bc:ADD RAX,RDX
	000058bf:MOV RDX,qword ptr [RAX]
	000058c2:MOV EAX,dword ptr [RBP + -0x5c]
	000058c5:CDQE
	000058c7:SHL RAX,0x3
	000058cb:ADD RAX,RDX
	000058ce:MOV RDX,qword ptr [RAX]
	000058d1:MOV EAX,dword ptr [RBP + -0x60]
	000058d4:CDQE
	000058d6:SUB RAX,0x1
	000058da:ADD RAX,RDX
	000058dd:MOVZX EAX,byte ptr [RAX]
	000058e0:CMP AL,0x3c
	000058e2:JZ 0x000059b9
END_OF_LINE
----------------------------------------------
85: while( true ) {
	0000595e:JA 0x000058ea
END_OF_LINE
----------------------------------------------
86: t = *root->pi[i];
	00005913:MOV RDX,qword ptr [RAX + 0x90]
	0000591a:MOV EAX,dword ptr [RBP + -0x64]
	0000591d:CDQE
	0000591f:SHL RAX,0x3
	00005923:ADD RAX,RDX
	00005926:MOV RAX,qword ptr [RAX]
	00005929:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
87: sVar4 = strlen(t);
	00005937:CALL 0x000012c0
END_OF_LINE
----------------------------------------------
88: lVar1 = sVar4 + len;
	00005940:LEA RBX,[RAX + RDX*0x1]
END_OF_LINE
----------------------------------------------
89: sVar4 = strlen(n);
	0000594b:CALL 0x000012c0
END_OF_LINE
----------------------------------------------
90: if (sVar4 + lVar1 + 7 <= max) break;
	00005950:ADD RAX,RBX
	00005953:LEA RDX,[RAX + 0x7]
	00005957:MOV RAX,qword ptr [RBP + -0x50]
	0000595b:CMP RDX,RAX
	0000595e:JA 0x000058ea
END_OF_LINE
----------------------------------------------
91: max = max + 0x400;
	000058ee:ADD RAX,0x400
END_OF_LINE
----------------------------------------------
92: s = (char *)realloc(s,max);
	00005906:CALL 0x000013b0
END_OF_LINE
----------------------------------------------
94: if (*n == '\0') {
	00005964:MOVZX EAX,byte ptr [RAX]
	00005967:TEST AL,AL
	00005969:JZ 0x00005974
END_OF_LINE
----------------------------------------------
95: puVar5 = &DAT_00007063;
	00005974:LEA RAX,[0x7063]
END_OF_LINE
----------------------------------------------
98: puVar5 = &DAT_00007024;
	0000596b:LEA RAX,[0x7024]
END_OF_LINE
----------------------------------------------
100: iVar2 = sprintf(s + len,"\n<?%s%s%s?>",t,puVar5,n);
	00005983:LEA RDI,[RCX + RDX*0x1]
	00005987:MOV RCX,qword ptr [RBP + -0x28]
	0000598b:MOV RDX,qword ptr [RBP + -0x20]
	0000598f:MOV R8,RCX
	00005992:MOV RCX,RAX
	00005995:LEA RAX,[0x7320]
	0000599c:MOV RSI,RAX
	0000599f:MOV EAX,0x0
	000059a4:CALL 0x00001410
END_OF_LINE
----------------------------------------------
101: len = len + (long)iVar2;
	000059a9:MOVSXD RDX,EAX
	000059ac:MOV RAX,qword ptr [RBP + -0x58]
	000059b0:ADD RAX,RDX
END_OF_LINE
----------------------------------------------
104: n = (char *)0x0;
	000059f6:ADD dword ptr [RBP + -0x64],0x1
END_OF_LINE
----------------------------------------------
106: pcVar3 = (char *)realloc(s,len + 1);
	00005a28:LEA RDX,[RAX + 0x1]
	00005a2c:MOV RAX,qword ptr [RBP + -0x48]
	00005a30:MOV RSI,RDX
	00005a33:MOV RDI,RAX
	00005a36:CALL 0x000013b0
END_OF_LINE
----------------------------------------------
108: if (local_20 != *(long *)(in_FS_OFFSET + 0x28)) {
	00005a3f:SUB RDX,qword ptr FS:[0x28]
	00005a48:JZ 0x00005a4f
END_OF_LINE
----------------------------------------------
110: __stack_chk_fail();
	00005a4a:CALL 0x000012d0
END_OF_LINE
----------------------------------------------
112: return pcVar3;
	00005a54:RET
END_OF_LINE



Function: ezxml_free
----------------------------------------------
15: if (xml != (ezxml_t.conflict)0x0) {
	00005a6d:CMP qword ptr [RBP + -0x28],0x0
	00005a72:JZ 0x00005e05
END_OF_LINE
----------------------------------------------
16: ezxml_free(xml->child);
	00005a7c:MOV RAX,qword ptr [RAX + 0x38]
	00005a80:MOV RDI,RAX
	00005a83:CALL 0x00005a55
END_OF_LINE
----------------------------------------------
17: ezxml_free(xml->ordered);
	00005a8c:MOV RAX,qword ptr [RAX + 0x30]
	00005a90:MOV RDI,RAX
	00005a93:CALL 0x00005a55
END_OF_LINE
----------------------------------------------
18: if (xml->parent == (ezxml_t)0x0) {
	00005a9c:MOV RAX,qword ptr [RAX + 0x40]
	00005aa0:TEST RAX,RAX
	00005aa3:JNZ 0x00005da6
END_OF_LINE
----------------------------------------------
19: for (i = 10; (&(xml[1].ordered)->name)[i] != (char *)0x0; i = i + 2) {
	00005aa9:MOV dword ptr [RBP + -0x20],0xa
	00005ab0:JMP 0x00005b00
	00005ab2:MOV RAX,qword ptr [RBP + -0x18]
	00005ab6:MOV RDX,qword ptr [RAX + 0x80]
	00005abd:MOV EAX,dword ptr [RBP + -0x20]
	00005ac0:CDQE
	00005ac2:ADD RAX,0x1
	00005ac6:SHL RAX,0x3
	00005aca:ADD RAX,RDX
	00005acd:MOV RAX,qword ptr [RAX]
	00005ad0:MOV qword ptr [RBP + -0x8],RAX
	00005ad4:MOV RAX,qword ptr [RBP + -0x18]
	00005ad8:MOV RAX,qword ptr [RAX + 0x70]
	00005adc:CMP qword ptr [RBP + -0x8],RAX
	00005ae0:JC 0x00005af0
	00005ae2:MOV RAX,qword ptr [RBP + -0x18]
	00005ae6:MOV RAX,qword ptr [RAX + 0x78]
	00005aea:CMP qword ptr [RBP + -0x8],RAX
	00005aee:JBE 0x00005afc
	00005af0:MOV RAX,qword ptr [RBP + -0x8]
	00005af4:MOV RDI,RAX
	00005af7:CALL 0x00001250
	00005afc:ADD dword ptr [RBP + -0x20],0x2
	00005b00:MOV RAX,qword ptr [RBP + -0x18]
	00005b04:MOV RDX,qword ptr [RAX + 0x80]
	00005b0b:MOV EAX,dword ptr [RBP + -0x20]
	00005b0e:CDQE
	00005b10:SHL RAX,0x3
	00005b14:ADD RAX,RDX
	00005b17:MOV RAX,qword ptr [RAX]
	00005b1a:TEST RAX,RAX
	00005b1d:JNZ 0x00005ab2
END_OF_LINE
----------------------------------------------
20: __ptr = (ezxml_t)(&(xml[1].ordered)->attr)[i];
	00005ab6:MOV RDX,qword ptr [RAX + 0x80]
	00005abd:MOV EAX,dword ptr [RBP + -0x20]
	00005ac0:CDQE
	00005ac2:ADD RAX,0x1
	00005ac6:SHL RAX,0x3
	00005aca:ADD RAX,RDX
	00005acd:MOV RAX,qword ptr [RAX]
END_OF_LINE
----------------------------------------------
21: if ((__ptr < xml[1].next) || (xml[1].sibling < __ptr)) {
	00005ad8:MOV RAX,qword ptr [RAX + 0x70]
	00005adc:CMP qword ptr [RBP + -0x8],RAX
	00005ae0:JC 0x00005af0
	00005ae2:MOV RAX,qword ptr [RBP + -0x18]
	00005ae6:MOV RAX,qword ptr [RAX + 0x78]
	00005aea:CMP qword ptr [RBP + -0x8],RAX
	00005aee:JBE 0x00005afc
END_OF_LINE
----------------------------------------------
22: free(__ptr);
	00005af7:CALL 0x00001250
END_OF_LINE
----------------------------------------------
25: free(xml[1].ordered);
	00005b23:MOV RAX,qword ptr [RAX + 0x80]
	00005b2a:MOV RDI,RAX
	00005b2d:CALL 0x00001250
END_OF_LINE
----------------------------------------------
26: for (i = 0; __ptr_00 = (&(xml[1].child)->name)[i], __ptr_00 != (char *)0x0; i = i + 1) {
	00005b32:MOV dword ptr [RBP + -0x20],0x0
	00005b39:JMP 0x00005c07
	00005b3e:MOV dword ptr [RBP + -0x1c],0x1
	00005b45:JMP 0x00005bd1
	00005b4a:MOV EAX,dword ptr [RBP + -0x1c]
	00005b4d:CDQE
	00005b4f:LEA RDX,[RAX*0x8]
	00005b57:MOV RAX,qword ptr [RBP + -0x10]
	00005b5b:ADD RAX,RDX
	00005b5e:MOV RAX,qword ptr [RAX]
	00005b61:TEST RAX,RAX
	00005b64:JZ 0x00005bcd
	00005b66:MOV EAX,dword ptr [RBP + -0x1c]
	00005b69:CDQE
	00005b6b:LEA RDX,[RAX*0x8]
	00005b73:MOV RAX,qword ptr [RBP + -0x10]
	00005b77:ADD RAX,RDX
	00005b7a:MOV RDX,qword ptr [RAX]
	00005b7d:MOV RAX,qword ptr [RBP + -0x18]
	00005b81:MOV RAX,qword ptr [RAX + 0x70]
	00005b85:CMP RDX,RAX
	00005b88:JC 0x00005bae
	00005b8a:MOV EAX,dword ptr [RBP + -0x1c]
	00005b8d:CDQE
	00005b8f:LEA RDX,[RAX*0x8]
	00005b97:MOV RAX,qword ptr [RBP + -0x10]
	00005b9b:ADD RAX,RDX
	00005b9e:MOV RDX,qword ptr [RAX]
	00005ba1:MOV RAX,qword ptr [RBP + -0x18]
	00005ba5:MOV RAX,qword ptr [RAX + 0x78]
	00005ba9:CMP RDX,RAX
	00005bac:JBE 0x00005bcd
	00005bae:MOV EAX,dword ptr [RBP + -0x1c]
	00005bb1:CDQE
	00005bb3:LEA RDX,[RAX*0x8]
	00005bbb:MOV RAX,qword ptr [RBP + -0x10]
	00005bbf:ADD RAX,RDX
	00005bc2:MOV RAX,qword ptr [RAX]
	00005bc5:MOV RDI,RAX
	00005bc8:CALL 0x00001250
	00005bcd:ADD dword ptr [RBP + -0x1c],0x2
	00005bd1:MOV EAX,dword ptr [RBP + -0x1c]
	00005bd4:LEA EDX,[RAX + 0x1]
	00005bd7:MOV dword ptr [RBP + -0x1c],EDX
	00005bda:CDQE
	00005bdc:LEA RDX,[RAX*0x8]
	00005be4:MOV RAX,qword ptr [RBP + -0x10]
	00005be8:ADD RAX,RDX
	00005beb:MOV RAX,qword ptr [RAX]
	00005bee:TEST RAX,RAX
	00005bf1:JNZ 0x00005b4a
	00005bf7:MOV RAX,qword ptr [RBP + -0x10]
	00005bfb:MOV RDI,RAX
	00005bfe:CALL 0x00001250
	00005c03:ADD dword ptr [RBP + -0x20],0x1
	00005c07:MOV RAX,qword ptr [RBP + -0x18]
	00005c0b:MOV RDX,qword ptr [RAX + 0x88]
	00005c12:MOV EAX,dword ptr [RBP + -0x20]
	00005c15:CDQE
	00005c17:SHL RAX,0x3
	00005c1b:ADD RAX,RDX
	00005c1e:MOV RAX,qword ptr [RAX]
	00005c21:MOV qword ptr [RBP + -0x10],RAX
	00005c25:CMP qword ptr [RBP + -0x10],0x0
	00005c2a:JNZ 0x00005b3e
END_OF_LINE
----------------------------------------------
27: j = 1;
	00005b3e:MOV dword ptr [RBP + -0x1c],0x1
END_OF_LINE
----------------------------------------------
28: while (iVar1 = j + 1, *(long *)(__ptr_00 + (long)j * 8) != 0) {
	00005bd4:LEA EDX,[RAX + 0x1]
	00005bd7:MOV dword ptr [RBP + -0x1c],EDX
	00005bda:CDQE
	00005bdc:LEA RDX,[RAX*0x8]
	00005be4:MOV RAX,qword ptr [RBP + -0x10]
	00005be8:ADD RAX,RDX
	00005beb:MOV RAX,qword ptr [RAX]
	00005bee:TEST RAX,RAX
	00005bf1:JNZ 0x00005b4a
END_OF_LINE
----------------------------------------------
29: if ((*(long *)(__ptr_00 + (long)iVar1 * 8) != 0) &&
	00005b4d:CDQE
	00005b4f:LEA RDX,[RAX*0x8]
	00005b57:MOV RAX,qword ptr [RBP + -0x10]
	00005b5b:ADD RAX,RDX
	00005b5e:MOV RAX,qword ptr [RAX]
	00005b61:TEST RAX,RAX
	00005b64:JZ 0x00005bcd
	00005b66:MOV EAX,dword ptr [RBP + -0x1c]
	00005b69:CDQE
	00005b6b:LEA RDX,[RAX*0x8]
	00005b73:MOV RAX,qword ptr [RBP + -0x10]
	00005b77:ADD RAX,RDX
	00005b7a:MOV RDX,qword ptr [RAX]
	00005b7d:MOV RAX,qword ptr [RBP + -0x18]
	00005b81:MOV RAX,qword ptr [RAX + 0x70]
	00005b85:CMP RDX,RAX
	00005b88:JC 0x00005bae
	00005b8a:MOV EAX,dword ptr [RBP + -0x1c]
	00005b8d:CDQE
	00005b8f:LEA RDX,[RAX*0x8]
	00005b97:MOV RAX,qword ptr [RBP + -0x10]
	00005b9b:ADD RAX,RDX
	00005b9e:MOV RDX,qword ptr [RAX]
	00005ba1:MOV RAX,qword ptr [RBP + -0x18]
	00005ba5:MOV RAX,qword ptr [RAX + 0x78]
	00005ba9:CMP RDX,RAX
	00005bac:JBE 0x00005bcd
END_OF_LINE
----------------------------------------------
30: ((*(ezxml_t *)(__ptr_00 + (long)iVar1 * 8) < xml[1].next ||
	00005b69:CDQE
	00005b6b:LEA RDX,[RAX*0x8]
	00005b73:MOV RAX,qword ptr [RBP + -0x10]
	00005b77:ADD RAX,RDX
	00005b7a:MOV RDX,qword ptr [RAX]
	00005b7d:MOV RAX,qword ptr [RBP + -0x18]
	00005b81:MOV RAX,qword ptr [RAX + 0x70]
	00005b85:CMP RDX,RAX
END_OF_LINE
----------------------------------------------
31: (xml[1].sibling < *(ezxml_t *)(__ptr_00 + (long)iVar1 * 8))))) {
	00005b8d:CDQE
	00005b8f:LEA RDX,[RAX*0x8]
	00005b97:MOV RAX,qword ptr [RBP + -0x10]
	00005b9b:ADD RAX,RDX
	00005b9e:MOV RDX,qword ptr [RAX]
	00005ba1:MOV RAX,qword ptr [RBP + -0x18]
	00005ba5:MOV RAX,qword ptr [RAX + 0x78]
	00005ba9:CMP RDX,RAX
	00005bac:JBE 0x00005bcd
END_OF_LINE
----------------------------------------------
32: free(*(void **)(__ptr_00 + (long)iVar1 * 8));
	00005bb1:CDQE
	00005bb3:LEA RDX,[RAX*0x8]
	00005bbb:MOV RAX,qword ptr [RBP + -0x10]
	00005bbf:ADD RAX,RDX
	00005bc2:MOV RAX,qword ptr [RAX]
	00005bc5:MOV RDI,RAX
	00005bc8:CALL 0x00001250
END_OF_LINE
----------------------------------------------
34: j = j + 3;
	00005bcd:ADD dword ptr [RBP + -0x1c],0x2
END_OF_LINE
----------------------------------------------
36: free(__ptr_00);
	00005bfe:CALL 0x00001250
END_OF_LINE
----------------------------------------------
38: if ((xml[1].child)->name != (char *)0x0) {
	00005c34:MOV RAX,qword ptr [RAX + 0x88]
	00005c3b:MOV RAX,qword ptr [RAX]
	00005c3e:TEST RAX,RAX
	00005c41:JZ 0x00005c56
END_OF_LINE
----------------------------------------------
39: free(xml[1].child);
	00005c47:MOV RAX,qword ptr [RAX + 0x88]
	00005c4e:MOV RDI,RAX
	00005c51:CALL 0x00001250
END_OF_LINE
----------------------------------------------
41: for (i = 0; (&(xml[1].parent)->name)[i] != (char *)0x0; i = i + 1) {
	00005c56:MOV dword ptr [RBP + -0x20],0x0
	00005c5d:JMP 0x00005cf8
	00005c62:MOV dword ptr [RBP + -0x1c],0x1
	00005c69:JMP 0x00005c6f
	00005c6b:ADD dword ptr [RBP + -0x1c],0x1
	00005c6f:MOV RAX,qword ptr [RBP + -0x18]
	00005c73:MOV RDX,qword ptr [RAX + 0x90]
	00005c7a:MOV EAX,dword ptr [RBP + -0x20]
	00005c7d:CDQE
	00005c7f:SHL RAX,0x3
	00005c83:ADD RAX,RDX
	00005c86:MOV RDX,qword ptr [RAX]
	00005c89:MOV EAX,dword ptr [RBP + -0x1c]
	00005c8c:CDQE
	00005c8e:SHL RAX,0x3
	00005c92:ADD RAX,RDX
	00005c95:MOV RAX,qword ptr [RAX]
	00005c98:TEST RAX,RAX
	00005c9b:JNZ 0x00005c6b
	00005c9d:MOV RAX,qword ptr [RBP + -0x18]
	00005ca1:MOV RDX,qword ptr [RAX + 0x90]
	00005ca8:MOV EAX,dword ptr [RBP + -0x20]
	00005cab:CDQE
	00005cad:SHL RAX,0x3
	00005cb1:ADD RAX,RDX
	00005cb4:MOV RDX,qword ptr [RAX]
	00005cb7:MOV EAX,dword ptr [RBP + -0x1c]
	00005cba:CDQE
	00005cbc:ADD RAX,0x1
	00005cc0:SHL RAX,0x3
	00005cc4:ADD RAX,RDX
	00005cc7:MOV RAX,qword ptr [RAX]
	00005cca:MOV RDI,RAX
	00005ccd:CALL 0x00001250
	00005cd2:MOV RAX,qword ptr [RBP + -0x18]
	00005cd6:MOV RDX,qword ptr [RAX + 0x90]
	00005cdd:MOV EAX,dword ptr [RBP + -0x20]
	00005ce0:CDQE
	00005ce2:SHL RAX,0x3
	00005ce6:ADD RAX,RDX
	00005ce9:MOV RAX,qword ptr [RAX]
	00005cec:MOV RDI,RAX
	00005cef:CALL 0x00001250
	00005cf4:ADD dword ptr [RBP + -0x20],0x1
	00005cf8:MOV RAX,qword ptr [RBP + -0x18]
	00005cfc:MOV RDX,qword ptr [RAX + 0x90]
	00005d03:MOV EAX,dword ptr [RBP + -0x20]
	00005d06:CDQE
	00005d08:SHL RAX,0x3
	00005d0c:ADD RAX,RDX
	00005d0f:MOV RAX,qword ptr [RAX]
	00005d12:TEST RAX,RAX
	00005d15:JNZ 0x00005c62
END_OF_LINE
----------------------------------------------
42: j = 1;
	00005c62:MOV dword ptr [RBP + -0x1c],0x1
END_OF_LINE
----------------------------------------------
43: while (*(long *)((&(xml[1].parent)->name)[i] + (long)j * 8) != 0) {
	00005c73:MOV RDX,qword ptr [RAX + 0x90]
	00005c7a:MOV EAX,dword ptr [RBP + -0x20]
	00005c7d:CDQE
	00005c7f:SHL RAX,0x3
	00005c83:ADD RAX,RDX
	00005c86:MOV RDX,qword ptr [RAX]
	00005c89:MOV EAX,dword ptr [RBP + -0x1c]
	00005c8c:CDQE
	00005c8e:SHL RAX,0x3
	00005c92:ADD RAX,RDX
	00005c95:MOV RAX,qword ptr [RAX]
	00005c98:TEST RAX,RAX
	00005c9b:JNZ 0x00005c6b
END_OF_LINE
----------------------------------------------
44: j = j + 1;
	00005c6b:ADD dword ptr [RBP + -0x1c],0x1
END_OF_LINE
----------------------------------------------
46: free(*(void **)((&(xml[1].parent)->name)[i] + ((long)j + 1) * 8));
	00005ca1:MOV RDX,qword ptr [RAX + 0x90]
	00005ca8:MOV EAX,dword ptr [RBP + -0x20]
	00005cab:CDQE
	00005cad:SHL RAX,0x3
	00005cb1:ADD RAX,RDX
	00005cb4:MOV RDX,qword ptr [RAX]
	00005cb7:MOV EAX,dword ptr [RBP + -0x1c]
	00005cba:CDQE
	00005cbc:ADD RAX,0x1
	00005cc0:SHL RAX,0x3
	00005cc4:ADD RAX,RDX
	00005cc7:MOV RAX,qword ptr [RAX]
	00005cca:MOV RDI,RAX
	00005ccd:CALL 0x00001250
END_OF_LINE
----------------------------------------------
47: free((&(xml[1].parent)->name)[i]);
	00005cd6:MOV RDX,qword ptr [RAX + 0x90]
	00005cdd:MOV EAX,dword ptr [RBP + -0x20]
	00005ce0:CDQE
	00005ce2:SHL RAX,0x3
	00005ce6:ADD RAX,RDX
	00005ce9:MOV RAX,qword ptr [RAX]
	00005cec:MOV RDI,RAX
	00005cef:CALL 0x00001250
END_OF_LINE
----------------------------------------------
49: if ((xml[1].parent)->name != (char *)0x0) {
	00005d1f:MOV RAX,qword ptr [RAX + 0x90]
	00005d26:MOV RAX,qword ptr [RAX]
	00005d29:TEST RAX,RAX
	00005d2c:JZ 0x00005d41
END_OF_LINE
----------------------------------------------
50: free(xml[1].parent);
	00005d32:MOV RAX,qword ptr [RAX + 0x90]
	00005d39:MOV RDI,RAX
	00005d3c:CALL 0x00001250
END_OF_LINE
----------------------------------------------
52: if (xml[1].txt == (char *)0xffffffffffffffff) {
	00005d45:MOV RAX,qword ptr [RAX + 0x60]
	00005d49:CMP RAX,-0x1
	00005d4d:JNZ 0x00005d61
END_OF_LINE
----------------------------------------------
53: free(xml[1].attr);
	00005d53:MOV RAX,qword ptr [RAX + 0x58]
	00005d57:MOV RDI,RAX
	00005d5a:CALL 0x00001250
END_OF_LINE
----------------------------------------------
55: else if (xml[1].txt != (char *)0x0) {
	00005d65:MOV RAX,qword ptr [RAX + 0x60]
	00005d69:TEST RAX,RAX
	00005d6c:JZ 0x00005d89
END_OF_LINE
----------------------------------------------
56: munmap(xml[1].attr,(size_t)xml[1].txt);
	00005d72:MOV RDX,qword ptr [RAX + 0x60]
	00005d76:MOV RAX,qword ptr [RBP + -0x18]
	00005d7a:MOV RAX,qword ptr [RAX + 0x58]
	00005d7e:MOV RSI,RDX
	00005d81:MOV RDI,RAX
	00005d84:CALL 0x000013c0
END_OF_LINE
----------------------------------------------
58: if (xml[1].off != 0) {
	00005d8d:MOV RAX,qword ptr [RAX + 0x68]
	00005d91:TEST RAX,RAX
	00005d94:JZ 0x00005da6
END_OF_LINE
----------------------------------------------
59: free((void *)xml[1].off);
	00005d9a:MOV RAX,qword ptr [RAX + 0x68]
	00005d9e:MOV RDI,RAX
	00005da1:CALL 0x00001250
END_OF_LINE
----------------------------------------------
62: ezxml_free_attr(xml->attr);
	00005daa:MOV RAX,qword ptr [RAX + 0x8]
	00005dae:MOV RDI,RAX
	00005db1:CALL 0x00003915
END_OF_LINE
----------------------------------------------
63: if ((xml->flags & 0x40U) != 0) {
	00005dba:MOVZX EAX,word ptr [RAX + 0x48]
	00005dbe:CWDE
	00005dbf:AND EAX,0x40
	00005dc2:TEST EAX,EAX
	00005dc4:JZ 0x00005dd6
END_OF_LINE
----------------------------------------------
64: free(xml->txt);
	00005dca:MOV RAX,qword ptr [RAX + 0x10]
	00005dce:MOV RDI,RAX
	00005dd1:CALL 0x00001250
END_OF_LINE
----------------------------------------------
66: if ((xml->flags & 0x80U) != 0) {
	00005dda:MOVZX EAX,word ptr [RAX + 0x48]
	00005dde:CWDE
	00005ddf:AND EAX,0x80
	00005de4:TEST EAX,EAX
	00005de6:JZ 0x00005df7
END_OF_LINE
----------------------------------------------
67: free(xml->name);
	00005dec:MOV RAX,qword ptr [RAX]
	00005def:MOV RDI,RAX
	00005df2:CALL 0x00001250
END_OF_LINE
----------------------------------------------
69: free(xml);
	00005dfe:CALL 0x00001250
END_OF_LINE
----------------------------------------------
71: return;
	00005e07:RET
END_OF_LINE



Function: ezxml_error
----------------------------------------------
8: for (xml_local = xml; (xml_local != (ezxml_t.conflict)0x0 && (xml_local->parent != (ezxml_t)0x0));
	00005e14:JMP 0x00005e22
	00005e16:MOV RAX,qword ptr [RBP + -0x8]
	00005e1a:MOV RAX,qword ptr [RAX + 0x40]
	00005e1e:MOV qword ptr [RBP + -0x8],RAX
	00005e22:CMP qword ptr [RBP + -0x8],0x0
	00005e27:JZ 0x00005e36
	00005e29:MOV RAX,qword ptr [RBP + -0x8]
	00005e2d:MOV RAX,qword ptr [RAX + 0x40]
	00005e31:TEST RAX,RAX
	00005e34:JNZ 0x00005e16
END_OF_LINE
----------------------------------------------
9: xml_local = xml_local->parent) {
	00005e1a:MOV RAX,qword ptr [RAX + 0x40]
END_OF_LINE
----------------------------------------------
11: if (xml_local == (ezxml_t.conflict)0x0) {
	00005e36:CMP qword ptr [RBP + -0x8],0x0
	00005e3b:JZ 0x00005e49
END_OF_LINE
----------------------------------------------
12: pcVar1 = "";
	00005e49:LEA RAX,[0x7063]
END_OF_LINE
----------------------------------------------
15: pcVar1 = &xml_local[1].field_0x4a;
	00005e41:ADD RAX,0x9a
END_OF_LINE
----------------------------------------------
17: return pcVar1;
	00005e51:RET
END_OF_LINE



Function: ezxml_new
----------------------------------------------
11: pvVar1 = malloc(0x120);
	00005e67:CALL 0x000013a0
END_OF_LINE
----------------------------------------------
12: peVar2 = (ezxml_t.conflict)memset(pvVar1,0,0x120);
	00005e79:CALL 0x00001310
END_OF_LINE
----------------------------------------------
13: peVar2->name = name;
	00005e8a:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
14: peVar2[1].name = (char *)peVar2;
	00005e95:MOV qword ptr [RAX + 0x50],RDX
END_OF_LINE
----------------------------------------------
15: peVar2->txt = "";
	00005ea4:MOV qword ptr [RAX + 0x10],RDX
END_OF_LINE
----------------------------------------------
16: peVar2[1].field_0x4a = 0;
	00005eac:ADD RAX,0x9a
	00005eb2:MOV byte ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
17: pvVar1 = malloc(0x58);
	00005eba:CALL 0x000013a0
END_OF_LINE
----------------------------------------------
18: peVar3 = (ezxml_t)memcpy(pvVar1,ezxml_new::ent,0x58);
	00005ed4:CALL 0x00001390
END_OF_LINE
----------------------------------------------
19: peVar2[1].ordered = peVar3;
	00005edd:MOV qword ptr [RDX + 0x80],RAX
END_OF_LINE
----------------------------------------------
20: peVar2->attr = EZXML_NIL;
	00005eef:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
21: peVar2[1].parent = (ezxml_t)EZXML_NIL;
	00005efe:MOV qword ptr [RAX + 0x90],RDX
END_OF_LINE
----------------------------------------------
22: peVar2[1].child = peVar2[1].parent;
	00005f09:MOV RDX,qword ptr [RAX + 0x90]
	00005f10:MOV RAX,qword ptr [RBP + -0x8]
	00005f14:MOV qword ptr [RAX + 0x88],RDX
END_OF_LINE
----------------------------------------------
23: return peVar2;
	00005f1b:MOV RAX,qword ptr [RBP + -0x8]
	00005f1f:LEAVE
	00005f20:RET
END_OF_LINE



Function: ezxml_insert
----------------------------------------------
14: xml->ordered = (ezxml_t)0x0;
	00005f3d:MOV qword ptr [RAX + 0x30],0x0
END_OF_LINE
----------------------------------------------
15: xml->sibling = xml->ordered;
	00005f49:MOV RDX,qword ptr [RAX + 0x30]
	00005f4d:MOV RAX,qword ptr [RBP + -0x28]
	00005f51:MOV qword ptr [RAX + 0x28],RDX
END_OF_LINE
----------------------------------------------
16: xml->next = xml->sibling;
	00005f59:MOV RDX,qword ptr [RAX + 0x28]
	00005f5d:MOV RAX,qword ptr [RBP + -0x28]
	00005f61:MOV qword ptr [RAX + 0x20],RDX
END_OF_LINE
----------------------------------------------
17: xml->off = off;
	00005f6d:MOV qword ptr [RAX + 0x18],RDX
END_OF_LINE
----------------------------------------------
18: xml->parent = dest;
	00005f79:MOV qword ptr [RAX + 0x40],RDX
END_OF_LINE
----------------------------------------------
19: peVar1 = dest->child;
	00005f81:MOV RAX,qword ptr [RAX + 0x38]
END_OF_LINE
----------------------------------------------
20: if (peVar1 == (ezxml_t)0x0) {
	00005f89:CMP qword ptr [RBP + -0x8],0x0
	00005f8e:JZ 0x00006140
END_OF_LINE
----------------------------------------------
21: dest->child = xml;
	00006148:MOV qword ptr [RAX + 0x38],RDX
END_OF_LINE
----------------------------------------------
24: cur = peVar1;
	00005fa0:JC 0x00005ff5
END_OF_LINE
----------------------------------------------
25: if (off < peVar1->off) {
	00005f98:MOV RAX,qword ptr [RAX + 0x18]
	00005f9c:CMP qword ptr [RBP + -0x38],RAX
	00005fa0:JC 0x00005ff5
END_OF_LINE
----------------------------------------------
26: xml->ordered = peVar1;
	00005ffd:MOV qword ptr [RAX + 0x30],RDX
END_OF_LINE
----------------------------------------------
27: dest->child = xml;
	00006009:MOV qword ptr [RAX + 0x38],RDX
END_OF_LINE
----------------------------------------------
30: while ((cur->ordered != (ezxml_t)0x0 && (cur->ordered->off <= off))) {
	00005fbc:MOV RAX,qword ptr [RAX + 0x30]
	00005fc0:TEST RAX,RAX
	00005fc3:JZ 0x00005fd7
	00005fc5:MOV RAX,qword ptr [RBP + -0x18]
	00005fc9:MOV RAX,qword ptr [RAX + 0x30]
	00005fcd:MOV RAX,qword ptr [RAX + 0x18]
	00005fd1:CMP qword ptr [RBP + -0x38],RAX
	00005fd5:JNC 0x00005fac
END_OF_LINE
----------------------------------------------
31: cur = cur->ordered;
	00005fb0:MOV RAX,qword ptr [RAX + 0x30]
	00005fb4:MOV qword ptr [RBP + -0x18],RAX
END_OF_LINE
----------------------------------------------
33: xml->ordered = cur->ordered;
	00005fdb:MOV RDX,qword ptr [RAX + 0x30]
	00005fdf:MOV RAX,qword ptr [RBP + -0x28]
	00005fe3:MOV qword ptr [RAX + 0x30],RDX
END_OF_LINE
----------------------------------------------
34: cur->ordered = xml;
	00005fef:MOV qword ptr [RAX + 0x30],RDX
END_OF_LINE
----------------------------------------------
36: prev = (ezxml_t.conflict)0x0;
	00006015:MOV qword ptr [RBP + -0x10],0x0
END_OF_LINE
----------------------------------------------
37: cur = peVar1;
	0000601d:JMP 0x00006033
END_OF_LINE
----------------------------------------------
38: while ((cur != (ezxml_t.conflict)0x0 && (iVar2 = strcmp(cur->name,xml->name), iVar2 != 0))) {
	00006033:CMP qword ptr [RBP + -0x18],0x0
	00006038:JZ 0x00006057
	0000603a:MOV RAX,qword ptr [RBP + -0x28]
	0000603e:MOV RDX,qword ptr [RAX]
	00006041:MOV RAX,qword ptr [RBP + -0x18]
	00006045:MOV RAX,qword ptr [RAX]
	00006048:MOV RSI,RDX
	0000604b:MOV RDI,RAX
	0000604e:CALL 0x00001360
	00006053:TEST EAX,EAX
	00006055:JNZ 0x0000601f
END_OF_LINE
----------------------------------------------
39: prev = cur;
	00006023:MOV qword ptr [RBP + -0x10],RAX
END_OF_LINE
----------------------------------------------
40: cur = cur->sibling;
	0000602b:MOV RAX,qword ptr [RAX + 0x28]
END_OF_LINE
----------------------------------------------
42: if ((cur == (ezxml_t.conflict)0x0) || (off < cur->off)) {
	00006057:CMP qword ptr [RBP + -0x18],0x0
	0000605c:JZ 0x000060ba
	0000605e:MOV RAX,qword ptr [RBP + -0x18]
	00006062:MOV RAX,qword ptr [RAX + 0x18]
	00006066:CMP qword ptr [RBP + -0x38],RAX
	0000606a:JC 0x000060ba
END_OF_LINE
----------------------------------------------
43: if ((prev != (ezxml_t.conflict)0x0) && (cur != (ezxml_t.conflict)0x0)) {
	000060ba:CMP qword ptr [RBP + -0x10],0x0
	000060bf:JZ 0x000060d8
	000060c1:CMP qword ptr [RBP + -0x18],0x0
	000060c6:JZ 0x000060d8
END_OF_LINE
----------------------------------------------
44: prev->sibling = cur->sibling;
	000060cc:MOV RDX,qword ptr [RAX + 0x28]
	000060d0:MOV RAX,qword ptr [RBP + -0x10]
	000060d4:MOV qword ptr [RAX + 0x28],RDX
END_OF_LINE
----------------------------------------------
46: xml->next = cur;
	000060e0:MOV qword ptr [RAX + 0x20],RDX
END_OF_LINE
----------------------------------------------
47: prev = (ezxml_t.conflict)0x0;
	000060ec:MOV qword ptr [RBP + -0x10],0x0
END_OF_LINE
----------------------------------------------
48: for (cur = peVar1; (cur != (ezxml_t.conflict)0x0 && (cur->off <= off)); cur = cur->sibling) {
	000060f4:JMP 0x0000610a
	000060f6:MOV RAX,qword ptr [RBP + -0x18]
	000060fa:MOV qword ptr [RBP + -0x10],RAX
	000060fe:MOV RAX,qword ptr [RBP + -0x18]
	00006102:MOV RAX,qword ptr [RAX + 0x28]
	00006106:MOV qword ptr [RBP + -0x18],RAX
	0000610a:CMP qword ptr [RBP + -0x18],0x0
	0000610f:JZ 0x0000611f
	00006111:MOV RAX,qword ptr [RBP + -0x18]
	00006115:MOV RAX,qword ptr [RAX + 0x18]
	00006119:CMP qword ptr [RBP + -0x38],RAX
	0000611d:JNC 0x000060f6
END_OF_LINE
----------------------------------------------
49: prev = cur;
	000060fa:MOV qword ptr [RBP + -0x10],RAX
END_OF_LINE
----------------------------------------------
51: xml->sibling = cur;
	00006127:MOV qword ptr [RAX + 0x28],RDX
END_OF_LINE
----------------------------------------------
52: if (prev != (ezxml_t.conflict)0x0) {
	0000612b:CMP qword ptr [RBP + -0x10],0x0
	00006130:JZ 0x0000614c
END_OF_LINE
----------------------------------------------
53: prev->sibling = xml;
	0000613a:MOV qword ptr [RAX + 0x28],RDX
END_OF_LINE
----------------------------------------------
57: while ((cur->next != (ezxml_t)0x0 && (cur->next->off <= off))) {
	0000607e:MOV RAX,qword ptr [RAX + 0x20]
	00006082:TEST RAX,RAX
	00006085:JZ 0x00006099
	00006087:MOV RAX,qword ptr [RBP + -0x18]
	0000608b:MOV RAX,qword ptr [RAX + 0x20]
	0000608f:MOV RAX,qword ptr [RAX + 0x18]
	00006093:CMP qword ptr [RBP + -0x38],RAX
	00006097:JNC 0x0000606e
END_OF_LINE
----------------------------------------------
58: cur = cur->next;
	00006072:MOV RAX,qword ptr [RAX + 0x20]
END_OF_LINE
----------------------------------------------
60: xml->next = cur->next;
	0000609d:MOV RDX,qword ptr [RAX + 0x20]
	000060a1:MOV RAX,qword ptr [RBP + -0x28]
	000060a5:MOV qword ptr [RAX + 0x20],RDX
END_OF_LINE
----------------------------------------------
61: cur->next = xml;
	000060b1:MOV qword ptr [RAX + 0x20],RDX
END_OF_LINE
----------------------------------------------
64: return xml;
	0000614c:MOV RAX,qword ptr [RBP + -0x28]
	00006150:LEAVE
	00006151:RET
END_OF_LINE



Function: ezxml_add_child
----------------------------------------------
12: if (xml == (ezxml_t.conflict)0x0) {
	0000616a:CMP qword ptr [RBP + -0x18],0x0
	0000616f:JNZ 0x00006178
END_OF_LINE
----------------------------------------------
13: peVar1 = (ezxml_t.conflict)0x0;
	00006171:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
16: __s = malloc(0x50);
	0000617d:CALL 0x000013a0
END_OF_LINE
----------------------------------------------
17: peVar1 = (ezxml_t.conflict)memset(__s,0,0x50);
	0000618f:CALL 0x00001310
END_OF_LINE
----------------------------------------------
18: peVar1->name = name;
	000061a0:MOV qword ptr [RAX],RDX
END_OF_LINE
----------------------------------------------
19: peVar1->attr = EZXML_NIL;
	000061ae:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
20: peVar1->txt = "";
	000061bd:MOV qword ptr [RAX + 0x10],RDX
END_OF_LINE
----------------------------------------------
21: peVar1 = ezxml_insert(peVar1,xml,off);
	000061d3:CALL 0x00005f21
END_OF_LINE
----------------------------------------------
23: return peVar1;
	000061d9:RET
END_OF_LINE



Function: ezxml_set_txt
----------------------------------------------
8: if (xml == (ezxml_t.conflict)0x0) {
	000061ee:CMP qword ptr [RBP + -0x8],0x0
	000061f3:JNZ 0x000061fc
END_OF_LINE
----------------------------------------------
9: xml = (ezxml_t.conflict)0x0;
	000061f5:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
12: if ((xml->flags & 0x40U) != 0) {
	00006200:MOVZX EAX,word ptr [RAX + 0x48]
	00006204:CWDE
	00006205:AND EAX,0x40
	00006208:TEST EAX,EAX
	0000620a:JZ 0x0000621c
END_OF_LINE
----------------------------------------------
13: free(xml->txt);
	00006210:MOV RAX,qword ptr [RAX + 0x10]
	00006214:MOV RDI,RAX
	00006217:CALL 0x00001250
END_OF_LINE
----------------------------------------------
15: xml->flags = xml->flags & 0xffbf;
	00006220:MOVZX EAX,word ptr [RAX + 0x48]
	00006224:AND EAX,0xffffffbf
	00006227:MOV EDX,EAX
	00006229:MOV RAX,qword ptr [RBP + -0x8]
	0000622d:MOV word ptr [RAX + 0x48],DX
END_OF_LINE
----------------------------------------------
16: xml->txt = txt;
	00006239:MOV qword ptr [RAX + 0x10],RDX
END_OF_LINE
----------------------------------------------
18: return xml;
	00006242:RET
END_OF_LINE



Function: ezxml_set_attr
----------------------------------------------
15: l = 0;
	0000625c:MOV dword ptr [RBP + -0x18],0x0
END_OF_LINE
----------------------------------------------
16: if (xml == (ezxml_t.conflict)0x0) {
	00006263:CMP qword ptr [RBP + -0x28],0x0
	00006268:JNZ 0x00006278
END_OF_LINE
----------------------------------------------
17: xml = (ezxml_t.conflict)0x0;
	0000626a:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
20: while ((xml->attr[l] != (char *)0x0 && (iVar1 = strcmp(xml->attr[l],name), iVar1 != 0))) {
	0000627c:MOV RDX,qword ptr [RAX + 0x8]
	00006280:MOV EAX,dword ptr [RBP + -0x18]
	00006283:CDQE
	00006285:SHL RAX,0x3
	00006289:ADD RAX,RDX
	0000628c:MOV RAX,qword ptr [RAX]
	0000628f:TEST RAX,RAX
	00006292:JZ 0x000062be
	00006294:MOV RAX,qword ptr [RBP + -0x28]
	00006298:MOV RDX,qword ptr [RAX + 0x8]
	0000629c:MOV EAX,dword ptr [RBP + -0x18]
	0000629f:CDQE
	000062a1:SHL RAX,0x3
	000062a5:ADD RAX,RDX
	000062a8:MOV RAX,qword ptr [RAX]
	000062ab:MOV RDX,qword ptr [RBP + -0x30]
	000062af:MOV RSI,RDX
	000062b2:MOV RDI,RAX
	000062b5:CALL 0x00001360
	000062ba:TEST EAX,EAX
	000062bc:JNZ 0x00006274
END_OF_LINE
----------------------------------------------
21: l = l + 2;
	00006274:ADD dword ptr [RBP + -0x18],0x2
END_OF_LINE
----------------------------------------------
23: if (xml->attr[l] == (char *)0x0) {
	000062c2:MOV RDX,qword ptr [RAX + 0x8]
	000062c6:MOV EAX,dword ptr [RBP + -0x18]
	000062c9:CDQE
	000062cb:SHL RAX,0x3
	000062cf:ADD RAX,RDX
	000062d2:MOV RAX,qword ptr [RAX]
	000062d5:TEST RAX,RAX
	000062d8:JNZ 0x0000646e
END_OF_LINE
----------------------------------------------
24: if (value == (char *)0x0) {
	000062de:CMP qword ptr [RBP + -0x38],0x0
	000062e3:JNZ 0x000062ee
END_OF_LINE
----------------------------------------------
25: return xml;
	00006767:MOV RBX,qword ptr [RBP + -0x8]
	0000676b:LEAVE
	0000676c:RET
END_OF_LINE
----------------------------------------------
27: if (xml->attr == EZXML_NIL) {
	000062f2:MOV RAX,qword ptr [RAX + 0x8]
	000062f6:LEA RDX,[0x9090]
	000062fd:CMP RAX,RDX
	00006300:JNZ 0x00006337
END_OF_LINE
----------------------------------------------
28: ppcVar2 = (char **)malloc(0x20);
	00006307:CALL 0x000013a0
END_OF_LINE
----------------------------------------------
29: xml->attr = ppcVar2;
	00006313:MOV qword ptr [RAX + 0x8],RDX
END_OF_LINE
----------------------------------------------
30: ppcVar2 = xml->attr;
	0000631b:MOV RAX,qword ptr [RAX + 0x8]
END_OF_LINE
----------------------------------------------
31: pcVar3 = strdup("");
	0000632d:CALL 0x00001420
END_OF_LINE
----------------------------------------------
32: ppcVar2[1] = pcVar3;
	0000631f:LEA RBX,[RAX + 0x8]
	00006323:LEA RAX,[0x7063]
	0000632a:MOV RDI,RAX
	0000632d:CALL 0x00001420
	00006332:MOV qword ptr [RBX],RAX
END_OF_LINE
----------------------------------------------
35: ppcVar2 = (char **)realloc(xml->attr,(long)(l + 4) * 8);
	0000633a:ADD EAX,0x4
	0000633d:CDQE
	0000633f:LEA RDX,[RAX*0x8]
	00006347:MOV RAX,qword ptr [RBP + -0x28]
	0000634b:MOV RAX,qword ptr [RAX + 0x8]
	0000634f:MOV RSI,RDX
	00006352:MOV RDI,RAX
	00006355:CALL 0x000013b0
END_OF_LINE
----------------------------------------------
36: xml->attr = ppcVar2;
	0000635e:MOV qword ptr [RDX + 0x8],RAX
END_OF_LINE
----------------------------------------------
38: xml->attr[l] = name;
	00006366:MOV RDX,qword ptr [RAX + 0x8]
	0000636a:MOV EAX,dword ptr [RBP + -0x18]
	0000636d:CDQE
	0000636f:SHL RAX,0x3
	00006373:ADD RDX,RAX
	00006376:MOV RAX,qword ptr [RBP + -0x30]
	0000637a:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
39: xml->attr[(long)l + 2] = (char *)0x0;
	00006381:MOV RDX,qword ptr [RAX + 0x8]
	00006385:MOV EAX,dword ptr [RBP + -0x18]
	00006388:CDQE
	0000638a:ADD RAX,0x2
	0000638e:SHL RAX,0x3
	00006392:ADD RAX,RDX
	00006395:MOV qword ptr [RAX],0x0
END_OF_LINE
----------------------------------------------
40: sVar4 = strlen(xml->attr[(long)l + 1]);
	000063a0:MOV RDX,qword ptr [RAX + 0x8]
	000063a4:MOV EAX,dword ptr [RBP + -0x18]
	000063a7:CDQE
	000063a9:ADD RAX,0x1
	000063ad:SHL RAX,0x3
	000063b1:ADD RAX,RDX
	000063b4:MOV RAX,qword ptr [RAX]
	000063b7:MOV RDI,RAX
	000063ba:CALL 0x000012c0
END_OF_LINE
----------------------------------------------
41: iVar1 = (int)sVar4;
	000063bf:MOV dword ptr [RBP + -0x14],EAX
END_OF_LINE
----------------------------------------------
42: ppcVar2 = xml->attr;
	000063ea:MOV RSI,qword ptr [RCX + 0x8]
END_OF_LINE
----------------------------------------------
43: pcVar3 = (char *)realloc(xml->attr[(long)l + 1],(long)(iVar1 + 2));
	000063c5:ADD EAX,0x2
	000063c8:MOVSXD RDX,EAX
	000063cb:MOV RAX,qword ptr [RBP + -0x28]
	000063cf:MOV RCX,qword ptr [RAX + 0x8]
	000063d3:MOV EAX,dword ptr [RBP + -0x18]
	000063d6:CDQE
	000063d8:ADD RAX,0x1
	000063dc:SHL RAX,0x3
	000063e0:ADD RAX,RCX
	000063e3:MOV RAX,qword ptr [RAX]
	000063e6:MOV RCX,qword ptr [RBP + -0x28]
	000063ea:MOV RSI,qword ptr [RCX + 0x8]
	000063ee:MOV ECX,dword ptr [RBP + -0x18]
	000063f1:MOVSXD RCX,ECX
	000063f4:ADD RCX,0x3
	000063f8:SHL RCX,0x3
	000063fc:LEA RBX,[RSI + RCX*0x1]
	00006400:MOV RSI,RDX
	00006403:MOV RDI,RAX
	00006406:CALL 0x000013b0
END_OF_LINE
----------------------------------------------
44: ppcVar2[(long)l + 3] = pcVar3;
	000063f1:MOVSXD RCX,ECX
	000063f4:ADD RCX,0x3
	000063f8:SHL RCX,0x3
	000063fc:LEA RBX,[RSI + RCX*0x1]
	00006400:MOV RSI,RDX
	00006403:MOV RDI,RAX
	00006406:CALL 0x000013b0
	0000640b:MOV qword ptr [RBX],RAX
END_OF_LINE
----------------------------------------------
45: *(undefined2 *)(xml->attr[(long)l + 3] + iVar1) = 0x20;
	00006412:MOV RDX,qword ptr [RAX + 0x8]
	00006416:MOV EAX,dword ptr [RBP + -0x18]
	00006419:CDQE
	0000641b:ADD RAX,0x3
	0000641f:SHL RAX,0x3
	00006423:ADD RAX,RDX
	00006426:MOV RDX,qword ptr [RAX]
	00006429:MOV EAX,dword ptr [RBP + -0x14]
	0000642c:CDQE
	0000642e:ADD RAX,RDX
	00006431:MOV word ptr [RAX],0x20
END_OF_LINE
----------------------------------------------
46: if ((xml->flags & 0x20U) != 0) {
	0000643a:MOVZX EAX,word ptr [RAX + 0x48]
	0000643e:CWDE
	0000643f:AND EAX,0x20
	00006442:TEST EAX,EAX
	00006444:JZ 0x0000648a
END_OF_LINE
----------------------------------------------
47: xml->attr[(long)l + 3][iVar1] = -0x80;
	0000644a:MOV RDX,qword ptr [RAX + 0x8]
	0000644e:MOV EAX,dword ptr [RBP + -0x18]
	00006451:CDQE
	00006453:ADD RAX,0x3
	00006457:SHL RAX,0x3
	0000645b:ADD RAX,RDX
	0000645e:MOV RDX,qword ptr [RAX]
	00006461:MOV EAX,dword ptr [RBP + -0x14]
	00006464:CDQE
	00006466:ADD RAX,RDX
	00006469:MOV byte ptr [RAX],0x80
END_OF_LINE
----------------------------------------------
50: else if ((xml->flags & 0x20U) != 0) {
	00006472:MOVZX EAX,word ptr [RAX + 0x48]
	00006476:CWDE
	00006477:AND EAX,0x20
	0000647a:TEST EAX,EAX
	0000647c:JZ 0x0000648a
END_OF_LINE
----------------------------------------------
51: free(name);
	00006485:CALL 0x00001250
END_OF_LINE
----------------------------------------------
53: for (c = l; xml->attr[c] != (char *)0x0; c = c + 2) {
	0000648d:MOV dword ptr [RBP + -0x14],EAX
	00006490:JMP 0x00006496
	00006492:ADD dword ptr [RBP + -0x14],0x2
	00006496:MOV RAX,qword ptr [RBP + -0x28]
	0000649a:MOV RDX,qword ptr [RAX + 0x8]
	0000649e:MOV EAX,dword ptr [RBP + -0x14]
	000064a1:CDQE
	000064a3:SHL RAX,0x3
	000064a7:ADD RAX,RDX
	000064aa:MOV RAX,qword ptr [RAX]
	000064ad:TEST RAX,RAX
	000064b0:JNZ 0x00006492
END_OF_LINE
----------------------------------------------
55: if ((xml->attr[(long)c + 1][l / 2] & 0x40U) != 0) {
	000064b6:MOV RDX,qword ptr [RAX + 0x8]
	000064ba:MOV EAX,dword ptr [RBP + -0x14]
	000064bd:CDQE
	000064bf:ADD RAX,0x1
	000064c3:SHL RAX,0x3
	000064c7:ADD RAX,RDX
	000064ca:MOV RDX,qword ptr [RAX]
	000064cd:MOV EAX,dword ptr [RBP + -0x18]
	000064d0:MOV ECX,EAX
	000064d2:SHR ECX,0x1f
	000064d5:ADD EAX,ECX
	000064d7:SAR EAX,0x1
	000064d9:CDQE
	000064db:ADD RAX,RDX
	000064de:MOVZX EAX,byte ptr [RAX]
	000064e1:MOVSX EAX,AL
	000064e4:AND EAX,0x40
	000064e7:TEST EAX,EAX
	000064e9:JZ 0x0000650e
END_OF_LINE
----------------------------------------------
56: free(xml->attr[(long)l + 1]);
	000064ef:MOV RDX,qword ptr [RAX + 0x8]
	000064f3:MOV EAX,dword ptr [RBP + -0x18]
	000064f6:CDQE
	000064f8:ADD RAX,0x1
	000064fc:SHL RAX,0x3
	00006500:ADD RAX,RDX
	00006503:MOV RAX,qword ptr [RAX]
	00006506:MOV RDI,RAX
	00006509:CALL 0x00001250
END_OF_LINE
----------------------------------------------
58: if ((xml->flags & 0x20U) == 0) {
	00006512:MOVZX EAX,word ptr [RAX + 0x48]
	00006516:CWDE
	00006517:AND EAX,0x20
	0000651a:TEST EAX,EAX
	0000651c:JZ 0x00006578
END_OF_LINE
----------------------------------------------
59: xml->attr[(long)c + 1][l / 2] = xml->attr[(long)c + 1][l / 2] & 0xbf;
	0000657c:MOV RDX,qword ptr [RAX + 0x8]
	00006580:MOV EAX,dword ptr [RBP + -0x14]
	00006583:CDQE
	00006585:ADD RAX,0x1
	00006589:SHL RAX,0x3
	0000658d:ADD RAX,RDX
	00006590:MOV RDX,qword ptr [RAX]
	00006593:MOV EAX,dword ptr [RBP + -0x18]
	00006596:MOV ECX,EAX
	00006598:SHR ECX,0x1f
	0000659b:ADD EAX,ECX
	0000659d:SAR EAX,0x1
	0000659f:MOV ECX,EAX
	000065a1:MOVSXD RAX,ECX
	000065a4:ADD RAX,RDX
	000065a7:MOVZX EDX,byte ptr [RAX]
	000065aa:MOV RAX,qword ptr [RBP + -0x28]
	000065ae:MOV RSI,qword ptr [RAX + 0x8]
	000065b2:MOV EAX,dword ptr [RBP + -0x14]
	000065b5:CDQE
	000065b7:ADD RAX,0x1
	000065bb:SHL RAX,0x3
	000065bf:ADD RAX,RSI
	000065c2:MOV RSI,qword ptr [RAX]
	000065c5:MOVSXD RAX,ECX
	000065c8:ADD RAX,RSI
	000065cb:AND EDX,0xffffffbf
	000065ce:MOV byte ptr [RAX],DL
END_OF_LINE
----------------------------------------------
62: xml->attr[(long)c + 1][l / 2] = xml->attr[(long)c + 1][l / 2] | 0x40;
	00006522:MOV RDX,qword ptr [RAX + 0x8]
	00006526:MOV EAX,dword ptr [RBP + -0x14]
	00006529:CDQE
	0000652b:ADD RAX,0x1
	0000652f:SHL RAX,0x3
	00006533:ADD RAX,RDX
	00006536:MOV RDX,qword ptr [RAX]
	00006539:MOV EAX,dword ptr [RBP + -0x18]
	0000653c:MOV ECX,EAX
	0000653e:SHR ECX,0x1f
	00006541:ADD EAX,ECX
	00006543:SAR EAX,0x1
	00006545:MOV ECX,EAX
	00006547:MOVSXD RAX,ECX
	0000654a:ADD RAX,RDX
	0000654d:MOVZX EDX,byte ptr [RAX]
	00006550:MOV RAX,qword ptr [RBP + -0x28]
	00006554:MOV RSI,qword ptr [RAX + 0x8]
	00006558:MOV EAX,dword ptr [RBP + -0x14]
	0000655b:CDQE
	0000655d:ADD RAX,0x1
	00006561:SHL RAX,0x3
	00006565:ADD RAX,RSI
	00006568:MOV RSI,qword ptr [RAX]
	0000656b:MOVSXD RAX,ECX
	0000656e:ADD RAX,RSI
	00006571:OR EDX,0x40
	00006574:MOV byte ptr [RAX],DL
END_OF_LINE
----------------------------------------------
64: if (value == (char *)0x0) {
	000065d0:CMP qword ptr [RBP + -0x38],0x0
	000065d5:JZ 0x000065fb
END_OF_LINE
----------------------------------------------
65: if (xml->attr[(long)c + 1][l / 2] < '\0') {
	000065ff:MOV RDX,qword ptr [RAX + 0x8]
	00006603:MOV EAX,dword ptr [RBP + -0x14]
	00006606:CDQE
	00006608:ADD RAX,0x1
	0000660c:SHL RAX,0x3
	00006610:ADD RAX,RDX
	00006613:MOV RDX,qword ptr [RAX]
	00006616:MOV EAX,dword ptr [RBP + -0x18]
	00006619:MOV ECX,EAX
	0000661b:SHR ECX,0x1f
	0000661e:ADD EAX,ECX
	00006620:SAR EAX,0x1
	00006622:CDQE
	00006624:ADD RAX,RDX
	00006627:MOVZX EAX,byte ptr [RAX]
	0000662a:TEST AL,AL
	0000662c:JNS 0x0000664d
END_OF_LINE
----------------------------------------------
66: free(xml->attr[l]);
	00006632:MOV RDX,qword ptr [RAX + 0x8]
	00006636:MOV EAX,dword ptr [RBP + -0x18]
	00006639:CDQE
	0000663b:SHL RAX,0x3
	0000663f:ADD RAX,RDX
	00006642:MOV RAX,qword ptr [RAX]
	00006645:MOV RDI,RAX
	00006648:CALL 0x00001250
END_OF_LINE
----------------------------------------------
68: memmove(xml->attr + l,xml->attr + (long)l + 2,(long)((c - l) + 2) * 8);
	00006650:SUB EAX,dword ptr [RBP + -0x18]
	00006653:ADD EAX,0x2
	00006656:CDQE
	00006658:LEA RDX,[RAX*0x8]
	00006660:MOV RAX,qword ptr [RBP + -0x28]
	00006664:MOV RCX,qword ptr [RAX + 0x8]
	00006668:MOV EAX,dword ptr [RBP + -0x18]
	0000666b:CDQE
	0000666d:ADD RAX,0x2
	00006671:SHL RAX,0x3
	00006675:ADD RCX,RAX
	00006678:MOV RAX,qword ptr [RBP + -0x28]
	0000667c:MOV RSI,qword ptr [RAX + 0x8]
	00006680:MOV EAX,dword ptr [RBP + -0x18]
	00006683:CDQE
	00006685:SHL RAX,0x3
	00006689:ADD RAX,RSI
	0000668c:MOV RSI,RCX
	0000668f:MOV RDI,RAX
	00006692:CALL 0x000013e0
END_OF_LINE
----------------------------------------------
69: ppcVar2 = (char **)realloc(xml->attr,(long)(c + 2) * 8);
	0000669a:ADD EAX,0x2
	0000669d:CDQE
	0000669f:LEA RDX,[RAX*0x8]
	000066a7:MOV RAX,qword ptr [RBP + -0x28]
	000066ab:MOV RAX,qword ptr [RAX + 0x8]
	000066af:MOV RSI,RDX
	000066b2:MOV RDI,RAX
	000066b5:CALL 0x000013b0
END_OF_LINE
----------------------------------------------
70: xml->attr = ppcVar2;
	000066be:MOV qword ptr [RDX + 0x8],RAX
END_OF_LINE
----------------------------------------------
71: memmove(xml->attr[(long)c + 1] + l / 2,xml->attr[(long)c + 1] + (long)(l / 2) + 1,
	000066e6:MOV RCX,qword ptr [RDX + 0x8]
	000066ea:MOV EDX,dword ptr [RBP + -0x14]
	000066ed:MOVSXD RDX,EDX
	000066f0:ADD RDX,0x1
	000066f4:SHL RDX,0x3
	000066f8:ADD RDX,RCX
	000066fb:MOV RCX,qword ptr [RDX]
	000066fe:MOV EDX,dword ptr [RBP + -0x18]
	00006701:MOV ESI,EDX
	00006703:SHR ESI,0x1f
	00006706:ADD EDX,ESI
	00006708:SAR EDX,0x1
	0000670a:MOVSXD RDX,EDX
	0000670d:ADD RDX,0x1
	00006711:LEA RSI,[RCX + RDX*0x1]
	00006715:MOV RDX,qword ptr [RBP + -0x28]
	00006719:MOV RCX,qword ptr [RDX + 0x8]
	0000671d:MOV EDX,dword ptr [RBP + -0x14]
	00006720:MOVSXD RDX,EDX
	00006723:ADD RDX,0x1
	00006727:SHL RDX,0x3
	0000672b:ADD RDX,RCX
	0000672e:MOV RCX,qword ptr [RDX]
	00006731:MOV EDX,dword ptr [RBP + -0x18]
	00006734:MOV EDI,EDX
	00006736:SHR EDI,0x1f
	00006739:ADD EDX,EDI
	0000673b:SAR EDX,0x1
	0000673d:MOVSXD RDX,EDX
	00006740:ADD RCX,RDX
	00006743:MOV RDX,RAX
	00006746:MOV RDI,RCX
	00006749:CALL 0x000013e0
END_OF_LINE
----------------------------------------------
72: (long)(c / 2 - l / 2));
	000066cc:SAR EAX,0x1
	000066ce:MOV ECX,EAX
	000066d0:MOV EAX,dword ptr [RBP + -0x18]
	000066d3:MOV EDX,EAX
	000066d5:SHR EDX,0x1f
	000066d8:ADD EAX,EDX
	000066da:SAR EAX,0x1
	000066dc:NEG EAX
	000066de:ADD EAX,ECX
END_OF_LINE
----------------------------------------------
75: xml->attr[(long)l + 1] = value;
	000065db:MOV RDX,qword ptr [RAX + 0x8]
	000065df:MOV EAX,dword ptr [RBP + -0x18]
	000065e2:CDQE
	000065e4:ADD RAX,0x1
	000065e8:SHL RAX,0x3
	000065ec:ADD RDX,RAX
	000065ef:MOV RAX,qword ptr [RBP + -0x38]
	000065f3:MOV qword ptr [RDX],RAX
END_OF_LINE
----------------------------------------------
77: xml->flags = xml->flags & 0xffdf;
	00006752:MOVZX EAX,word ptr [RAX + 0x48]
	00006756:AND EAX,0xffffffdf
	00006759:MOV EDX,EAX
	0000675b:MOV RAX,qword ptr [RBP + -0x28]
	0000675f:MOV word ptr [RAX + 0x48],DX
END_OF_LINE
----------------------------------------------
79: return xml;
	0000676c:RET
END_OF_LINE



Function: ezxml_set_flag
----------------------------------------------
8: if (xml != (ezxml_t.conflict)0x0) {
	0000677f:CMP qword ptr [RBP + -0x8],0x0
	00006784:JZ 0x0000679c
END_OF_LINE
----------------------------------------------
9: xml->flags = xml->flags | flag;
	0000678a:MOVZX EAX,word ptr [RAX + 0x48]
	0000678e:OR AX,word ptr [RBP + -0xc]
	00006792:MOV EDX,EAX
	00006794:MOV RAX,qword ptr [RBP + -0x8]
	00006798:MOV word ptr [RAX + 0x48],DX
END_OF_LINE
----------------------------------------------
11: return xml;
	0000679c:MOV RAX,qword ptr [RBP + -0x8]
	000067a0:POP RBP
	000067a1:RET
END_OF_LINE



Function: ezxml_cut
----------------------------------------------
10: if (xml == (ezxml_t.conflict)0x0) {
	000067b2:CMP qword ptr [RBP + -0x18],0x0
	000067b7:JNZ 0x000067c3
END_OF_LINE
----------------------------------------------
11: xml = (ezxml_t.conflict)0x0;
	000067b9:MOV EAX,0x0
END_OF_LINE
----------------------------------------------
14: if (xml->next != (ezxml_t)0x0) {
	000067c7:MOV RAX,qword ptr [RAX + 0x20]
	000067cb:TEST RAX,RAX
	000067ce:JZ 0x000067e4
END_OF_LINE
----------------------------------------------
15: xml->next->sibling = xml->sibling;
	000067d4:MOV RAX,qword ptr [RAX + 0x20]
	000067d8:MOV RDX,qword ptr [RBP + -0x18]
	000067dc:MOV RDX,qword ptr [RDX + 0x28]
	000067e0:MOV qword ptr [RAX + 0x28],RDX
END_OF_LINE
----------------------------------------------
17: if (xml->parent != (ezxml_t)0x0) {
	000067e8:MOV RAX,qword ptr [RAX + 0x40]
	000067ec:TEST RAX,RAX
	000067ef:JZ 0x00006947
END_OF_LINE
----------------------------------------------
18: cur = xml->parent->child;
	000067f9:MOV RAX,qword ptr [RAX + 0x40]
	000067fd:MOV RAX,qword ptr [RAX + 0x38]
END_OF_LINE
----------------------------------------------
19: if (cur == xml) {
	00006809:CMP RAX,qword ptr [RBP + -0x18]
	0000680d:JNZ 0x00006834
END_OF_LINE
----------------------------------------------
20: xml->parent->child = xml->ordered;
	00006813:MOV RAX,qword ptr [RAX + 0x40]
	00006817:MOV RDX,qword ptr [RBP + -0x18]
	0000681b:MOV RDX,qword ptr [RDX + 0x30]
	0000681f:MOV qword ptr [RAX + 0x38],RDX
END_OF_LINE
----------------------------------------------
23: for (; xml != cur->ordered; cur = cur->ordered) {
	0000682c:MOV RAX,qword ptr [RAX + 0x30]
	00006830:MOV qword ptr [RBP + -0x8],RAX
	00006834:MOV RAX,qword ptr [RBP + -0x8]
	00006838:MOV RAX,qword ptr [RAX + 0x30]
	0000683c:CMP qword ptr [RBP + -0x18],RAX
	00006840:JNZ 0x00006828
END_OF_LINE
----------------------------------------------
25: cur->ordered = cur->ordered->ordered;
	00006846:MOV RAX,qword ptr [RAX + 0x30]
	0000684a:MOV RDX,qword ptr [RAX + 0x30]
	0000684e:MOV RAX,qword ptr [RBP + -0x8]
	00006852:MOV qword ptr [RAX + 0x30],RDX
END_OF_LINE
----------------------------------------------
26: cur = xml->parent->child;
	0000685a:MOV RAX,qword ptr [RAX + 0x40]
	0000685e:MOV RAX,qword ptr [RAX + 0x38]
END_OF_LINE
----------------------------------------------
27: iVar1 = strcmp(cur->name,xml->name);
	0000686a:MOV RDX,qword ptr [RAX]
	0000686d:MOV RAX,qword ptr [RBP + -0x8]
	00006871:MOV RAX,qword ptr [RAX]
	00006874:MOV RSI,RDX
	00006877:MOV RDI,RAX
	0000687a:CALL 0x00001360
END_OF_LINE
----------------------------------------------
28: if (iVar1 != 0) {
	0000687f:TEST EAX,EAX
	00006881:JZ 0x0000690b
END_OF_LINE
----------------------------------------------
29: while (iVar1 = strcmp(cur->sibling->name,xml->name), iVar1 != 0) {
	00006899:MOV RDX,qword ptr [RAX]
	0000689c:MOV RAX,qword ptr [RBP + -0x8]
	000068a0:MOV RAX,qword ptr [RAX + 0x28]
	000068a4:MOV RAX,qword ptr [RAX]
	000068a7:MOV RSI,RDX
	000068aa:MOV RDI,RAX
	000068ad:CALL 0x00001360
	000068b2:TEST EAX,EAX
	000068b4:JNZ 0x00006889
END_OF_LINE
----------------------------------------------
30: cur = cur->sibling;
	0000688d:MOV RAX,qword ptr [RAX + 0x28]
END_OF_LINE
----------------------------------------------
32: if (xml == cur->sibling) {
	000068ba:MOV RAX,qword ptr [RAX + 0x28]
	000068be:CMP qword ptr [RBP + -0x18],RAX
	000068c2:JNZ 0x000068f1
END_OF_LINE
----------------------------------------------
33: if (xml->next == (ezxml_t)0x0) {
	000068c8:MOV RAX,qword ptr [RAX + 0x20]
	000068cc:TEST RAX,RAX
	000068cf:JZ 0x000068db
END_OF_LINE
----------------------------------------------
34: peVar2 = cur->sibling->sibling;
	000068df:MOV RAX,qword ptr [RAX + 0x28]
	000068e3:MOV RAX,qword ptr [RAX + 0x28]
END_OF_LINE
----------------------------------------------
37: peVar2 = xml->next;
	000068d5:MOV RAX,qword ptr [RAX + 0x20]
END_OF_LINE
----------------------------------------------
39: cur->sibling = peVar2;
	000068eb:MOV qword ptr [RDX + 0x28],RAX
END_OF_LINE
----------------------------------------------
42: cur = cur->sibling;
	000068f5:MOV RAX,qword ptr [RAX + 0x28]
END_OF_LINE
----------------------------------------------
45: for (; (cur->next != (ezxml_t)0x0 && (xml != cur->next)); cur = cur->next) {
	00006903:MOV RAX,qword ptr [RAX + 0x20]
	00006907:MOV qword ptr [RBP + -0x8],RAX
	0000690b:MOV RAX,qword ptr [RBP + -0x8]
	0000690f:MOV RAX,qword ptr [RAX + 0x20]
	00006913:TEST RAX,RAX
	00006916:JZ 0x00006926
	00006918:MOV RAX,qword ptr [RBP + -0x8]
	0000691c:MOV RAX,qword ptr [RAX + 0x20]
	00006920:CMP qword ptr [RBP + -0x18],RAX
	00006924:JNZ 0x000068ff
END_OF_LINE
----------------------------------------------
47: if (cur->next != (ezxml_t)0x0) {
	0000692a:MOV RAX,qword ptr [RAX + 0x20]
	0000692e:TEST RAX,RAX
	00006931:JZ 0x00006947
END_OF_LINE
----------------------------------------------
48: cur->next = cur->next->next;
	00006937:MOV RAX,qword ptr [RAX + 0x20]
	0000693b:MOV RDX,qword ptr [RAX + 0x20]
	0000693f:MOV RAX,qword ptr [RBP + -0x8]
	00006943:MOV qword ptr [RAX + 0x20],RDX
END_OF_LINE
----------------------------------------------
52: xml->next = (ezxml_t)0x0;
	0000694b:MOV qword ptr [RAX + 0x20],0x0
END_OF_LINE
----------------------------------------------
53: xml->sibling = xml->next;
	00006957:MOV RDX,qword ptr [RAX + 0x20]
	0000695b:MOV RAX,qword ptr [RBP + -0x18]
	0000695f:MOV qword ptr [RAX + 0x28],RDX
END_OF_LINE
----------------------------------------------
54: xml->ordered = xml->sibling;
	00006967:MOV RDX,qword ptr [RAX + 0x28]
	0000696b:MOV RAX,qword ptr [RBP + -0x18]
	0000696f:MOV qword ptr [RAX + 0x30],RDX
END_OF_LINE
----------------------------------------------
56: return xml;
	00006978:RET
END_OF_LINE



Function: main
----------------------------------------------
15: if (argc == 2) {
	0000698c:CMP dword ptr [RBP + -0x24],0x2
	00006990:JZ 0x000069bc
END_OF_LINE
----------------------------------------------
16: xml_00 = ezxml_parse_file(argv[1]);
	000069c0:ADD RAX,0x8
	000069c4:MOV RAX,qword ptr [RAX]
	000069c7:MOV RDI,RAX
	000069ca:CALL 0x00004a77
END_OF_LINE
----------------------------------------------
17: pcVar3 = ezxml_toxml(xml_00);
	000069da:CALL 0x00005553
END_OF_LINE
----------------------------------------------
18: puts(pcVar3);
	000069ea:CALL 0x00001290
END_OF_LINE
----------------------------------------------
19: free(pcVar3);
	000069f6:CALL 0x00001250
END_OF_LINE
----------------------------------------------
20: pcVar3 = ezxml_error(xml_00);
	00006a02:CALL 0x00005e08
END_OF_LINE
----------------------------------------------
21: iVar2 = fprintf(stderr,"%s",pcVar3);
	00006a23:CALL 0x00001370
END_OF_LINE
----------------------------------------------
22: ezxml_free(xml_00);
	00006a32:CALL 0x00005a55
END_OF_LINE
----------------------------------------------
23: uVar1 = (uint)(iVar2 != 0);
	00006a37:CMP dword ptr [RBP + -0x14],0x0
	00006a3b:SETNZ AL
	00006a3e:MOVZX EAX,AL
END_OF_LINE
----------------------------------------------
26: uVar1 = fprintf(stderr,"usage: %s xmlfile\n",*argv);
	00006996:MOV RDX,qword ptr [RAX]
	00006999:MOV RAX,qword ptr [0x00009080]
	000069a0:LEA RCX,[0x732c]
	000069a7:MOV RSI,RCX
	000069aa:MOV RDI,RAX
	000069ad:MOV EAX,0x0
	000069b2:CALL 0x00001370
END_OF_LINE
----------------------------------------------
28: return uVar1;
	00006a42:RET
END_OF_LINE



Function: _fini
----------------------------------------------
5: return;
	00006a50:RET
END_OF_LINE



Function: free
----------------------------------------------
10: halt_baddata();



Function: __libc_start_main
----------------------------------------------
9: halt_baddata();



Function: strncpy
----------------------------------------------
10: halt_baddata();



Function: strncmp
----------------------------------------------
10: halt_baddata();



Function: _ITM_deregisterTMCloneTable
----------------------------------------------
8: halt_baddata();



Function: strcpy
----------------------------------------------
10: halt_baddata();



Function: puts
----------------------------------------------
10: halt_baddata();



Function: fread
----------------------------------------------
10: halt_baddata();



Function: vsnprintf
----------------------------------------------
10: halt_baddata();



Function: strlen
----------------------------------------------
10: halt_baddata();



Function: __stack_chk_fail
----------------------------------------------
9: halt_baddata();



Function: mmap
----------------------------------------------
10: halt_baddata();



Function: strchr
----------------------------------------------
10: halt_baddata();



Function: snprintf
----------------------------------------------
10: halt_baddata();



Function: memset
----------------------------------------------
10: halt_baddata();



Function: close
----------------------------------------------
10: halt_baddata();



Function: strspn
----------------------------------------------
10: halt_baddata();



Function: strcspn
----------------------------------------------
10: halt_baddata();



Function: read
----------------------------------------------
10: halt_baddata();



Function: strcmp
----------------------------------------------
10: halt_baddata();



Function: fprintf
----------------------------------------------
10: halt_baddata();



Function: __gmon_start__
----------------------------------------------
8: halt_baddata();



Function: strtol
----------------------------------------------
10: halt_baddata();



Function: memcpy
----------------------------------------------
10: halt_baddata();



Function: malloc
----------------------------------------------
10: halt_baddata();



Function: realloc
----------------------------------------------
10: halt_baddata();



Function: munmap
----------------------------------------------
10: halt_baddata();



Function: madvise
----------------------------------------------
10: halt_baddata();



Function: memmove
----------------------------------------------
10: halt_baddata();



Function: open
----------------------------------------------
10: halt_baddata();



Function: sysconf
----------------------------------------------
10: halt_baddata();



Function: sprintf
----------------------------------------------
10: halt_baddata();



Function: _ITM_registerTMCloneTable
----------------------------------------------
8: halt_baddata();



Function: strdup
----------------------------------------------
10: halt_baddata();



Function: fstat
----------------------------------------------
10: halt_baddata();



Function: strstr
----------------------------------------------
10: halt_baddata();



Function: __ctype_b_loc
----------------------------------------------
10: halt_baddata();



Function: __cxa_finalize
----------------------------------------------
9: halt_baddata();
